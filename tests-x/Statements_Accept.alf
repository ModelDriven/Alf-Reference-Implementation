/**
 * Test accept statements.
 **/
active class Statements_Accept {

  private active class Test {
  
    public sig: any;
    public sig1: any;
    public name: String;
    public terminate: Boolean;
    public arrival: SignalNewArrival;

    public receive signal SignalNewArrival { public name: String; }
    public receive signal SignalTermination { }
  
  } do {
  
    accept (sig: SignalNewArrival, SignalTermination);    
    this.sig = sig;
    
    accept (arrival1: SignalNewArrival) {
      this.name = arrival1.name;
      this.terminate = false;
    } or accept (SignalTermination) {
      this.terminate = true;
    }
    
    accept (SignalNewArrival);
    
    accept (arrival3: SignalNewArrival);
    this.arrival = arrival3;
    
    accept (sig1: SignalTermination);
    this.sig1 = sig1;
    
  }
  
  private test(out test: Test) {
    test = new Test();
    
    test.SignalTermination();
    test.SignalNewArrival("Arrival1");
    test.SignalNewArrival("Arrival2");
    test.SignalNewArrival("Arrival3");
    test.SignalNewArrival("Arrival4");
  }

} do {

  this.test(test);

  AssertTrue("test.sig instanceof SignalTermination", test.sig instanceof Test::SignalTermination);
  AssertEqual("test.name", test.name, "Arrival1");
  AssertFalse("test.terminate", test.terminate);
  AssertEqual("test.arrival.name", test.arrival.name, "Arrival3");
  AssertTrue("test.sig1->isEmpty()", test.sig1->isEmpty());
}
