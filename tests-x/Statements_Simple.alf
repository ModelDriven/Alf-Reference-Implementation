/** 
 * Test block, empty and local name declaration statements.
 **/
active class Statements_Simple {

    // Supporting declarations *************************************************
    
  	offers: Offer[*] = new Offer();
  	principal: Integer = 100;
  	rate: Integer = 5;
	
    class Offer { }
    class Member { 
      	public isActive: Boolean;
      	public name: String;
      	@Create public Member(in isActive: Boolean, in name: String) {
      	    this.isActive = isActive;
      	    this.name = name;
      	}
  	}
  	
  	class RealProperty { 
  	    public name: String;
        @Create public RealProperty(in name: String) { this.name = name; }
  	}
  	
  	datatype Point { public x: Integer; public y: Integer; }
    datatype Money { public amount: Integer; }
  	
	//**************************************************************************

	test(out i: Integer, out last: Integer, out collection: Integer[*] sequence,
	  out offer: Offer, out money: Money, out members: Member[*] sequence,
	  out properties: RealProperty[*] sequence, out assets: RealProperty[*] sequence, 
	  out point: Point) {
	  
    // Setup
	  e1 = 1;
	  e2 = 2;
	  
	  period = 10;
	  members = Member[]{new Member(false, "A"), new Member(true, "B"), new Member(false, "C")};
	  land = new RealProperty("land");
	  home = new RealProperty("home");
	  condominium = new RealProperty("condominium");
	  things = any[]{land, home, condominium, "something"};
	  // *****
	  
	  //@parallel 
	  { 
	    i = e1;
	    last = e2;
	    collection = Integer[]{i, last};
	  }
	  
	  ;
	  
	  let currentOffer : Offer = this.offers[1];
	  Money interest = new (this.principal * this.rate * period/100);
	  let inactiveMembers : Member[] = members -> select member (!member.isActive);
	  RealProperty[] realProperties = (RealProperty)things;
	  let fixedAssets: RealProperty[] = new { land, home, condominium };
	  let origin : Point = new(0,0);
	  
	  offer = currentOffer;
	  money = interest;
	  members = inactiveMembers;
	  properties = realProperties; 
	  assets = fixedAssets;
	  point = origin;
	}
} do {
    this.test(i, last, collection, offer, money, members, properties, assets, point);
    
    AssertEqual("i", i, 1);
    AssertEqual("last", last, 2);
    AssertList("collection", collection, Integer[]{1,2});
    
    AssertEqual("offer->size()", offer->size(), 1);
    AssertEqual("money.amount", money.amount, 50);
    AssertList("members.name", members.name, String[]{"A","C"});
    AssertList("properties.name", properties.name, assets.name);
    AssertEqual("point.x", point.x, 0);
    AssertEqual("point.y", point.y, 0);
}