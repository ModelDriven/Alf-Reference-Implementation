/**
 * Test if and switch statements.
 **/  
class Statements_Conditional specializes Test {

	@Create public Statements_Conditional() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
		
		this.test(
			reading, condition1, condition2, condition3, 
			year, month, numDays,
			switch1, switch2, switch3
		);
		
		AssertEqual("reading", reading, 150);
		AssertEqual("condition1", condition1, Condition::alert);
		AssertEqual("condition2", condition2, Condition::critical);
		AssertEqual("condition3", condition3, Condition::critical);
		AssertEqual("year", year, 2012);
		AssertEqual("month", month, 2);
		AssertEqual("numDays", numDays, 29);
		AssertEqual("switch1", switch1, 3);
		AssertEqual("switch2", switch2, 1);
		AssertEqual("switch3", switch3, 1);
	
	  	this.done();
	}

    // Supporting declarations *************************************************
    
    class Monitor { 
    	public raiseAlarm(in sensorId: Integer) { }
    	public cleanUp() { }
    }
    enum Condition { normal, alert, critical, error }
    
    //**************************************************************************

    test(out reading1 : Integer, 
    	 out condition1: Condition, out condition2: Condition, out condition3: Condition,
    	 out year: Integer, out month: Integer, out numDays: Integer,
    	 out switch1: Integer, out switch2: Integer, out switch3: Integer ) {
    
      // Setup
      reading1 = 0;
      reading = 150;
      threshold = 10;
      safeLimit = 100;
      criticalLimit = 200;
      errorLimit = 1000;
      sensorId = 1;
      monitor = new Monitor();
      year = 2012;
      // *****
      
      if ((reading1 = reading) > threshold) {
         monitor.raiseAlarm(sensorId); 
      }
      
      //@determinate @assured
      if (reading <= safeLimit) {
        condition1 = Condition::normal; }
      or if (reading > safeLimit && reading <= criticalLimit) {
        condition1 = Condition::alert; }
      or if (reading > criticalLimit) {
        condition1 = Condition::critical; }
      
      reading = 500;
      
      if (reading <= safeLimit) {
        condition2 = Condition::normal; 
      }
      else if (reading <= criticalLimit) {
        condition2 = Condition::alert; 
      }
      else {
        condition2 = Condition::critical; 
      }
      
      if (reading <= safeLimit) {
        condition3 = Condition::normal; }
      else if (reading > safeLimit && reading <= criticalLimit) {
        condition3 = Condition::alert; }
      or if (reading > criticalLimit && reading < errorLimit) {
        condition3 = Condition::critical; }
      else {
        condition3 = Condition::error; }
      
      switch (year) {
      	case 2012:
      	  month = 2;
		default:
		  month = 3;
      }
      
      switch (month) {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
          numDays = 31; 
        case 4: case 6: case 9: case 11:
          numDays = 30; 
        case 2:
          if ( ((year % 4 == 0) && !(year % 100 == 0))
               || (year % 400 == 0) ) {
            numDays = 29;
          } 
          else {
            numDays = 28;
          }
        default:
          WriteLine("Invalid month.");
          numDays = 0;
      }
      
      switch1 = 1;
      switch (switch1 + 2) {
      	case 1: switch1 = 1;
      	case 2: switch1 = 2;
      	case 3: switch1 = 3;
      	default: switch1 = 0;
      }
      
      switch2 = 0;
      switch (switch2/0) {
      	case switch2/0: switch2 = 1;
      }
      
      switch (switch2) {
      	case 0: switch3 = 0;
      	default: switch3 = 1;
      }
	  
    }
}