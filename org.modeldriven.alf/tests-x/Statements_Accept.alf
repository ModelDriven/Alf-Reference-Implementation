/**
 * Test accept statements.
 **/
class Statements_Accept specializes Test {

	@Create public Statements_Accept() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
  		new TestRunner(this).Start();
	}

  private abstract active class Super {
    public signal SignalNewArrival { public name: String; }
    public receive signal SignalTermination { }
  }

  private active class MyTest specializes Super {
  
    public sig: any;
    public sig1: any;
    public name: String;
    public terminate: Boolean;
    public arrival: SignalNewArrival;
    
    public count: Integer = 0;
    public signals: any[*] sequence;
    
    public flag: Boolean;

    public receive SignalNewArrival;
    
    public tester: TestRunner;
    
    @Create
    public MyTest(in tester: TestRunner) {
      this.tester = tester;
    }
  
  } do {
  
    accept (sig: SignalNewArrival, SignalTermination);    
    this.sig = sig;
    
    terminate = false;
    accept (arrival1: SignalNewArrival) {
      this.name = arrival1.name;
    } or accept (SignalTermination) {
      terminate = true;
    }
    this.terminate = terminate;
    
    accept (SignalNewArrival);
    
    accept (arrival3: SignalNewArrival);
    this.arrival = arrival3;
    
    for (i in 1..2) {
      accept (s1: SignalNewArrival, SignalTermination);
      this.signals[i] = s1;
    }
    
    do {
      accept (s: SignalNewArrival, SignalTermination);
      this.count++;
    } while (s hastype SignalNewArrival);
    
    if (true) {
      accept (SignalNewArrival);
      this.flag = true;
    } else {
      accept (SignalTermination);
      this.flag = false;
    }
    
    accept (sig1: SignalTermination);
    this.sig1 = sig1;
    
    this.tester.Continue();
    
  }
  
  public active class TestRunner {
  	private outer: Test;
  	
  	@Create public TestRunner(in outer: Test) {
  		this.outer = outer;
  	}
  	
    public receive signal Start { }
    public receive signal Continue { }

    private run(out test: MyTest) {
      test = new MyTest(this);
      
      test.SignalTermination();
      test.SignalNewArrival("Arrival1");
      test.SignalNewArrival("Arrival2");
      test.SignalNewArrival("Arrival3");
      
      test.SignalNewArrival("Arrival4");
      test.SignalTermination();
      
      test.SignalNewArrival("Arrival5");    
      test.SignalNewArrival("Arrival6");
      test.SignalTermination();
      
      test.SignalNewArrival("Arrival7");
      test.SignalNewArrival("Arrival8");
      test.SignalTermination();
    }
    
  } do {
    accept(Start);
    this.run(test);
    accept (Continue);
  
    AssertTrue("test.sig instanceof SignalTermination", test.sig instanceof MyTest::SignalTermination);
    AssertEqual("test.name", test.name, "Arrival1");
    AssertFalse("test.terminate", test.terminate);
    AssertEqual("test.arrival.name", test.arrival.name, "Arrival3");
    
    AssertTrue("test.signals[1] hastype SignalArrival", (x = test.signals[1]) != null && (x hastype MyTest::SignalNewArrival));
    AssertTrue("test.signals[2] hastype SignalTermination", (x = test.signals[2]) != null && (x hastype MyTest::SignalTermination));
    
    AssertEqual("test.count", test.count, 3);
    AssertTrue("test.flag", test.flag);
    AssertTrue("test.sig1 instanceof SignalTermination", test.sig1 instanceof MyTest::SignalTermination);
    
    this.outer.done();
  }
}
