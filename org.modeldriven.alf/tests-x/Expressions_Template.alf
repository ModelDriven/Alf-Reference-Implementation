/**
 * Test expressions involving templates.
 **/
class Expressions_Template specializes Test {

	@Create public Expressions_Template() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
   		new TestRunner(this).Start();
	}

    public activity A<T specializes B>(in x: T): Integer { 
      return x.i;
    }
    
	public activity R<T> (in list: List<T>): Boolean {
	  return true;
	}
	
	public activity U<TT> (in x: TT[0..*]): TT[0..1] {
	  let l: List<T=>TT> = new (x);
	  return x[1];
	}

    public class B {
      public i: Integer;
      @Create public B(in i: Integer) { this.i = i; }
    }
    
    public class C<T> {
        p: T;
        
        @Create public C(in p: T) { this.p = p; }
        r(): T { return this.p; }
        
        activity E(in x: T): T { return x; }
    }
    
    public active class H<T> {
        public a: T;
        public b: T;
        public t: TestRunner;
        @Create public H(in a: T, in t: TestRunner) { 
          this.a = a; 
          this.t = t;
        }
    } do {
        $(this.b = new C<T>(this.a).r());
        this.t.Continue();
    }
    
    public class D<T> {
    	public flag: Boolean[0..1];
    	
    	public a(in i: Integer, in x: T) {
    		this.flag = false;
    	}
    	
    	public a(in s: String, in x: T) {
    		this.flag = true;
    	}
    }
    
    public active class TestRunner {
    	
      private outer : Test;
      
      @Create public TestRunner(in outer: Test) {
      	this.outer = outer;
      }
      
      public receive signal Start { }
      public receive signal Continue { }
      
      public test(
        out i: Integer, out j: Integer, out h: H<B>,
        out r: Boolean[0..1], out u1: B[0..1], out u2: any[0..1],
        out s: Set<Integer>, out list: List<Integer>,
        out flag: Boolean[0..1]) {
        
        b = new B(1);
        
        i = A<B>(b);
        j = C<B>.E(b).i;
        h = new H<B>(b, this);
        
        // Tests that parameter is still typed by a bound reference,
        // not the effective bound element, and R actually executes.
	    let l: List<Integer> = new List<Integer>();
	    r = R<Integer>(l);
	    
	    // Implicit instantiation.
	    u1 = U(b);
	    
	    // Implicit instantiation with type "any".
	    x = null;
	    u2 = U(x);
	      
        s = new Set<Integer>(null);
        s.add(1);
        
        list = List<Integer>{1, 2, 3};
        
        d = new D<Boolean>();
        d.a("test", true);
        flag = d.flag;
      }
      
    } do {
      accept (Start);
      this.test(i, j, h, r, u1, u2, s, list, flag);
      accept (Continue);
      
      AssertEqual("i", i, 1);
      AssertEqual("j", j, 1);
      AssertEqual("h.b.i", h.b.i, 1);
      
      AssertTrue("r", r);
      AssertEqual("u1", u1, h.b);
      AssertEqual("u2", u2, null);
      
      AssertList("s", s.toSequence(), 1);
      AssertList("list", list.toSequence(), Integer[]{1,2,3});
      
      AssertTrue("flag", flag);
      
      this.outer.done();
    }
}