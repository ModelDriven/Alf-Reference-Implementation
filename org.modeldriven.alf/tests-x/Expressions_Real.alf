private import Alf::Library::PrimitiveBehaviors::RealFunctions::*;
/**
 * Test real operator and function expressions.
 **/
class Expressions_Real specializes Test {

	@Create public Expressions_Real() {
		this.run(null);
	}
	
	@Create public run(in tester: Tester[0..1]) {
		super(tester);
		
		this.test(x, y, z, xx, r, s, f1, f2, f3, f4, f5, f6, g1, g2, a, b1, b2, c1, c2, d1, d2, m1, m2, z1, z2);
		
		AssertEqual("x", x, 2.5);
		AssertEqual("y", y, -20.0);
		AssertEqual("z", z, 2.14);
		AssertEqual("xx", xx, 10.1);
		AssertEqual("r", r, 4.0);
		AssertEqual("s", s, null);
		
		AssertFalse("f1", f1);
		AssertTrue("f2", f2);
		AssertFalse("f3", f3);
		AssertTrue("f4", f4);
		AssertTrue("f5", f5);
		AssertTrue("f6", f6);
		
		AssertTrue("g1", g1);
		AssertFalse("g2", g2);
		
		AssertEqual("a", a, 20.0);
		AssertEqual("b1", b1, 2);
		AssertEqual("b2", b2, -3);
		AssertEqual("c1", c1, 2);
		AssertEqual("c2", c2, -2);
		AssertEqual("d1", d1, 2);
		AssertEqual("d2", d2, -2);
		AssertEqual("m1", m1, 2.5);
		AssertEqual("m2", m2, -20.0);
		
		AssertEqual("z1", z1, 2);
		AssertEqual("z2", z1, 2.0);
		
	}
	
	public test( 
		out x: Real, out y: Real, out z: Real, out xx: Real,
		out r: Real, out s: Real[0..1],
		out f1: Boolean, out f2: Boolean, out f3: Boolean, out f4: Boolean, out f5: Boolean, out f6: Boolean,
		out g1: Boolean, out g2: Boolean,
		out a: Real, 
		out b1: Integer, out b2: Integer, out c1: Integer, out c2: Integer, out d1: Integer, out d2: Integer,
		out m1: Real, out m2: Real,
		out z1: Integer, out z2: Real) {
	
		x = 1.0;
		y = -.20E2; // 20.0
		z = 31.4e-1; // 3.14
		let t: Real = 4;
		
		i = 5;
		
		x = +x; // 1.0
		x = -x; // -1.0
		x = 2 * x; // -2.0;
		x = x * i; // -10.0;
		x = x / y; // 0.5
		x = x + z; // 3.64;
		x = x - 2.14; // 1.5
		
		x++; // 2.5
		--z; // 2.14

    xx = 1.1;
    xx += 4.1; // 5.2
    xx += 1; // 6.2
    xx -= .2; // 6.0
    xx *= 10.1; // 60.6
    xx /= 6; // 10.1
		
		r = t;
		s = r / 0; // null
		
		f1 = x < y;
		f2 = x > y;
		f3 = x <= y;
		f4 = x >= y;
		f5 = IntegerFunctions::ToReal(i) == i;
		f6 = y == ToInteger(y);		
		
		g1 = t < i;
		g2 = i < t;
		
		a = Abs(y);
		b1 = Floor(z);
		b2 = Floor(-z);
		c1 = Round(z);
		c2 = Round(-z);
		d1 = ToInteger(z);
		d2 = ToInteger(-z);
		m1 = Max(x, y);
		m2 = Min(x, y);
	
	  z1 = (Integer)z;
	  z2 = (Real)z1;
	  
	}
	
}