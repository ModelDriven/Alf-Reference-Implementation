/**
 * Test constructor and destructor expressions.
 **/
class Expressions_Constructor_Destructor specializes Test {

	@Create public Expressions_Constructor_Destructor() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);

	    this.test(employee0, employee1, employee2, employee3, employee4, init, init2, log, monitor1, monitor2, d);
	    
	    AssertEqual("employee0.id", employee0.id, -100);
	    AssertEqual("employee0.name", employee0.name, "Jane");
	    AssertFalse("employee0.transferred", employee0.transferred);
	    AssertFalse("employee0.relocated", employee0.relocated);
	    AssertEqual("employee0.supervisor", employee0.supervisor, null);
	    
	    AssertEqual("employee1.id", employee1.id, 100);
	    AssertEqual("employee1.name", employee1.name, "Fred");
	    AssertFalse("employee1.transferred", employee1.transferred);
	    AssertFalse("employee1.relocated", employee1.relocated);
	    AssertEqual("employee1.supervisor", employee1.supervisor, null);
	    
	    AssertEqual("employee2.id", employee2.id, 100);
	    AssertEqual("employee2.name", employee2.name, "Fred");
	    AssertTrue("employee2.transferred", employee2.transferred);
	    AssertFalse("employee2.relocated", employee2.relocated);
	    AssertEqual("employee2.supervisor", employee2.supervisor, null);
	    
	    AssertEqual("employee3.id", employee3.id, 100);
	    AssertEqual("employee3.name", employee3.name, "Fred");
	    AssertTrue("employee3.transferred", employee3.transferred);
	    AssertTrue("employee3.relocated", employee3.relocated);
	    AssertEqual("employee3.supervisor", employee3.supervisor, null);
	    
	    AssertEqual("employee4.id", employee4.id, 100);
	    AssertEqual("employee4.name", employee4.name, "Fred");
	    AssertTrue("employee4.transferred", employee4.transferred);
	    AssertTrue("employee4.relocated", employee4.relocated);
	    AssertEqual("employee4.supervisor", employee4.supervisor, employee1);
	    
	    AssertFalse("init instanceof Initialization", init instanceof Initialization);
	    
	    AssertEqual("init2.a", init2.a, 0);
	    AssertEqual("init2.b", init2.b, 1);
	    AssertEqual("init2.c", init2.c, 2);
	    AssertEqual("init2.d.x", init2.d.x, "init");
	    AssertList("init2.d.y", init2.d.y, Integer[]{0,1});
	    AssertEqual("init2.d.w", init2.d.w, true);
	    
	    AssertTrue("monitor1 instanceof Monitor", monitor1 instanceof Monitor);
	    AssertFalse("monitor2 instanceof Monitor", monitor2 instanceof Monitor);
	    AssertEqual("log.name", log.name, "Default");
	    AssertTrue("log.logged", log.logged);
	    
	    AssertEqual("d.x", d.x, "test");
	    AssertList("d.y", d.y, Integer[]{1,2});
	    AssertEqual("d.w", d.w, null);
	
	    this.done();
	}

    // Supporting declarations *************************************************
    
    class Initialization { 
  	    public a: Integer = this.b -> size();
  	    public b: Integer = 1;
    }
    class Initialization2 specializes Initialization {
  	    public c: Integer = this.a + 2;
  	    public d: D = new D(true, "init", Integer[]{0,1});
    }
    
    class Monitor { 
        @Destroy public destroy(in recoveryLog: Log) { 
            recoveryLog.logged = true; 
        }
    }
    class Log { 
    	  public name: String = "Default";
    	  public logged: Boolean = false;
    }
    class Employee { 
        public id: Integer;
     	  public name: String;
   	    public transferred: Boolean = false;
   	    public relocated: Boolean = false;
   	    
   	    public supervisor: Employee[0..1] = null; // (Added to verify "null" initializer bug fix.)
   		
        @Create public Employee(in id: Integer, in name: String) { 
            this.id = id;
   	        this.name = name;
   	    }
   	    @Create public Employee(in id: Natural, in name: String) {  // Check overload resolution.
   	    		this(-id, name);
   	    }
  	    @Create public transferred(in employeeInfo: Employee) { 
  	        this(employeeInfo.id, employeeInfo.name);
  	        this.transferred = true;
  	    }
        @Create public relocated(in employeeInfo: Employee) {
            this.transferred(employeeInfo);
            this.relocated = true;
        }
   	    @Create public assigned(in employeeInfo: Employee, in supervisor: Employee) {
  	        this(employeeInfo.id, employeeInfo.name);
  	        this.transferred = employeeInfo.transferred;
  	        this.relocated = employeeInfo.relocated;
  	        this.supervisor = supervisor;
   	    }
    }
    
    datatype D0 {
        public y: Integer[] sequence;
     }
   	
    datatype D specializes D0 {
        public w: Boolean[0..1];
        public x: String;
    }
  	
    //**************************************************************************

    test(
    	out employee0: Employee, out employee1: Employee, out employee2: Employee, out employee3: Employee, out employee4: Employee,
    	out init: Initialization, out init2: Initialization2,
    	out log: Log, out monitor1: Monitor, out monitor2: Monitor,
    	out d: D) {
	  
      i = 100;
      name = "Fred";

      employee0 = new Employee(i, "Jane");
      employee1 = new Employee(+i, name);
      employee2 = new Employee::transferred(employee1);
      employee3 = new Employee::relocated(employee2);
      employee4 = new Employee::assigned(employee3, employee1);
      init = new Initialization();
      init2 = new Initialization2();
      log = new Log();
      monitor1 = new Monitor();
	  
      init.destroy();
      
      (monitor2 = new Monitor()).destroy(log);
      
      d = new D(x=>"test", y=>Integer[]{1,2});
    }
}