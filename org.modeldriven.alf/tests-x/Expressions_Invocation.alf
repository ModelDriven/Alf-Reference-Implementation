private import Alf::Library::PrimitiveBehaviors::IntegerFunctions::ToString;
/**
 * Test behavior, operation and super invocation expressions.
 **/
active class Expressions_Invocation {

    // Supporting declarations *************************************************
    
  	activity A(in x: Integer, in y: Boolean[0..1]): Integer { 
  	  return x; 	  
  	}
  	activity ComputeInterest(in amount: Integer): Integer { return amount; }
  	activity B(out s: String) { s = "Hello"; }
  	activity C(in b: BitString, out c: Integer) { c = 5; }
  	
    class Super {
      public value: Integer = 0;
      public name: String = "";
      
      public run() { }
      public initialize(in value: Integer) { this.value = value; }
      public setName(in name: String) { this.name = name; }
    }
    
    class Super1 specializes Super {
      public 'do'(in i: Integer) {
        super.run();
        super.initialize(i);
        super.Super::setName("Fred");
      }
    }
    
	  //**************************************************************************

    test(
        out c: Integer, out b: BitString,
        inout status1: String, out status2: String, out statuses: String[*],
        out i: Integer, out j: Integer, out k: Integer, out l: Integer, out m: Integer,
        out n: Integer, out n1: Integer, 
        out obj: Super1, out list: Super[*] sequence, out ns: Integer) {
	
        c = +0;
        b = (BitString)c;
        C(b, c);
        C(c, b); // Bit string conversion
        
        B(status1);
        B(status2);
        B(statuses);
        B(s);  // Define local name "s" as an output argument.
        
        i = A(1, true);
        j = A(x=>2, y=>true);
        k = A(y=>true, x=>3);
        l = A(x=>4);
        m = A(5, null);
        
        n1 = ComputeInterest(n = 3);
        (obj = new Super1()).'do'(n);
        new Super();
        
        list = (Super)null;
        list = including(list, obj);
        ns = size(Super.allInstances());
	  }
} do {
    status1 = "Blah";
    this.test(c, b, status1, status2, statuses, i, j, k, l, m, n, n1, obj, list, ns);
    
    AssertEqual("b", b, 5);
    AssertEqual("c", c, 5);
    
    AssertEqual("status1", status1, "Hello");
    AssertEqual("status2", status2, "Hello");
    AssertList("statuses", statuses, "Hello");
    
    AssertEqual("i", i, 1);
    AssertEqual("j", j, 2);
    AssertEqual("k", k, 3);
    AssertEqual("l", l, 4);
    AssertEqual("m", m, 5);
    
    AssertEqual("n", n, 3);
    AssertEqual("n1", n1, 3);
    
    AssertEqual("obj.value", obj.value, 3);
    AssertEqual("obj.name", obj.name, "Fred");
    
    AssertEqual("list->size()", list->size(), 1);
    AssertTrue("list[1]==obj", list[1]==obj);
    
    AssertEqual("ns", ns, 2);

    WriteLine("Done");
}