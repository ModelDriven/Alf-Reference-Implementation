/**
 * Test sequence operation expressions.
 **/
class Expressions_Sequence_Operation specializes Test {

	@Create public Expressions_Sequence_Operation() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);

	    this.test(notEmpty, includes, m, n, customers, list);
	    
	    AssertFalse("notEmpty", notEmpty);
	    AssertFalse("includes", includes);
	    AssertEqual("m", m, 3);
	    AssertEqual("n", n, 3);
	    
	    AssertList("customers.name", customers.name, "C");
	    AssertList("list", list, any[]{"Blah", 1});
	
	    this.done();
	}

    // Supporting declarations *************************************************
    
  	class Customer { 
  		public name: String;
  		@Create public Customer(in name: String) { this.name = name; }
	}
  	
	//**************************************************************************

	test(
		out notEmpty: Boolean, out includes: Boolean, out m: Integer, out n: Integer,
		out customers: Customer[*], out list: any[*]) {
	
	  customer = new Customer("A");
	  customers = Customer[]{};
	  
	  notEmpty = customers->notEmpty();
	  includes = customers->includes(customer);
	  customers = customers->including(customer);
	  customers->add(new Customer("B"));
	  customers->add(new Customer("C"));
	  customers->add(customer);
	  customers->removeAt(2);
	  customers->remove(customer);
	  
	  m = Customer->size();
	  n = Customer.allInstances()->size();
	  
	  list = any[]{"x"};
	  list->clear();
	  list = list->including(customer);
	  list->add(customer);
	  list->add("Blah");
	  list->add(1);
	  list->removeAll(customer);
	}
}