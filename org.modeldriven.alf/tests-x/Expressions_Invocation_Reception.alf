/**
 * Test reception invocation expressions.
 */
class Expressions_Invocation_Reception specializes Test {

	@Create public Expressions_Invocation_Reception() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
  		new TestRunner(this).Start();
	}

  public active class Receiver {
  
    public a: Integer = 0;
    public x: Integer[*] sequence;
    public y: Integer[*] sequence;
    
    public tester: TestRunner;
    
    @Create
    public Receiver(in tester: TestRunner) {
      this.tester = tester;
    }
  
    public receive signal A {
    }
    
    public receive signal B {
      x: Integer;
    }
    
    public receive signal C {
      x: Integer [0..1];
      y: Integer [0..1];
    }
    
  } do {
  
    do {
      accept (A) {
        this.a++;
      } or accept (b: B) {
        this.x->add(b.x);
      } or accept (c: C) {
        this.x->add(c.x);
        this.y->add(c.y);
      }
      this.tester.SignalLoop();
    } while (true);
    
  }
  
  public active class TestRunner {
  	
  	private outer: Test;
  	
  	@Create public TestRunner(in outer: Test) {
  		this.outer = outer;
  	}
  
    public receive signal Start { }
    public receive signal SignalLoop { }
  
    public test(out receiver: Receiver, out n: Integer) {
    
      receiver = new Receiver(this);
      
      receiver.A();
      receiver.B(1);
      receiver.C(2,3);
      receiver.C(x => 3);
      receiver.C(y => 4);
      n = 5;
    }
    
  } do {  
    accept (Start);
  
    this.test(receiver, n);
    
    for (i in 1..n) {
      accept (SignalLoop);
    }
    
    AssertEqual("receiver.a", receiver.a, 1);
    AssertList("receiver.x", receiver.x, Integer[]{1,2,3});
    AssertList("receiver.y", receiver.y, Integer[]{3,4});
  
    this.outer.done();
  }
}