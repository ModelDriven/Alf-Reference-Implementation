#**
*class.java template for Alf project
@projectPath /src/org/modeldriven/${object.owner.qualifiedName.toLowerCase().replace("::","/")}/${object.name}.java 
@artifactContext GenClass 
*#
#parse( "uml.fragment" )
${copyrightBoilerPlate}
${packageDeclaration};
#imports()
import #qualifiedPackageName(${object.owner}).impl.${object.name}Impl;
#comments(${object})

#macro( class $object )
## #classJavaDoc(${object}) 

#visibility(${object}) #abstract(${object}) class #name(${object.name})
#foreach ( $superclass in ${object.superClasses} )
    extends #name(${superclass.name}) 
#end 
#if( ${object.superClasses.size()}==0 )
	implements ParsedElement
#end
{
## #foreach( $behavior in ${object.ownedBehaviors} )
## #if( ${behavior.eClass().name}=="Activity" )
## #class(${behavior})
## #end
## #end
    
#if( ${object.superClasses.size()}==0 )
  protected ${object.name}Impl impl;
  
  private String fileName = "";
  private int line = 0;
  private int column = 0;
#end

public #name(${object.name})() {
#if( !${object.isAbstract()} )
  this.impl = new ${object.name}Impl(this);
#end
}

public #name(${object.name})(AlfParser parser) {
  this();
  Token token = parser.getToken(0);
  if (token.next != null) {
    token = token.next;
  }
  this.setParserInfo(parser.getFileName(), token.beginLine, token.beginColumn);
}

public #name(${object.name})(ParsedElement element) {
  this();
  this.setParserInfo(element.getFileName(), element.getLine(), element.getColumn());
}

public ${object.name}Impl getImpl() {
  return (${object.name}Impl)this.impl;
}

#if( ${object.superClasses.size()}==0 )
public String getFileName() {
  return this.fileName;
}

public int getLine() {
  return this.line;
}

public int getColumn() {
  return this.column;
}

public void setParserInfo(String fileName, int line, int column) {
  this.fileName = fileName;
  this.line = line;
  this.column = column;
}
#end

#foreach ( $attribute in ${object.ownedAttributes} )
  #if( !${attribute.isStatic()} )
  #getter(${attribute})
  #setter(${attribute})
  #end  
#end

#foreach ( $rule in ${object.ownedRules} )
  #comments(${rule})
  public boolean ${rule.name}() { return this.getImpl().${rule.name}(); }
#end
    
#foreach ( $operation in ${object.ownedOperations} )
  ## #featureJavaDoc("operation ${operation.name}" ${operation})
  #comments(${operation})
  #visibility(${operation}) #static(${operation}) #operationType(${operation.returnResult} ${operation} ${object}) #name(${operation.name})(#operationParameters(${operation})) #throws(${operation}) {
    return #if(${operation.returnResult})this.getImpl().#name(${operation.name})(#operationParameterNames(${operation}))#end;
  }
#end

#deriveAllOperation(${object})
#checkOperations(${object})
#printOperations(${object})
} //${object.name}
#end

#class(${object})