private import Alf::Library::PrimitiveBehaviors::IntegerFunctions::ToString;
private import Alf::Library::PrimitiveBehaviors::StringFunctions::*;

private import 'Property Management'::'Basic Types'::*;
private import 'Property Management'::'Data Model'::Properties::*;
private import 'Property Management'::'Message Model'::*;

package Utility {

  public activity FixedPointNumberToString(in value: FixedPointNumber): String {
    scaledValue = value.scaledValue;
    decimalPlaces = value.decimalPlaces;
    
    image = ToString(scaledValue);
    len = Size(image);
    
    if (decimalPlaces <= 0) {
      return image;
    } else {
      for (i in len..decimalPlaces + 1) {
        image = "0" + image;
      }    
      return (Substring(image, 1, len - decimalPlaces)??) + "." + 
             (Substring(image, len - decimalPlaces + 1, len)??);
    }
  }
  
  public activity CurrencyAmountToString(in currencyAmount: 'Currency Amount'[0..1]): String {
    return currencyAmount == null? "n/a":
      (currencyAmount.currencyCode??) + " " + FixedPointNumberToString(currencyAmount.amount??);
  }
  
  public activity AreaToString(in area: Area[0..1]): String {
    return area == null? "n/a":
      FixedPointNumberToString(area.value??) + " " + (area.units??);
  }
  
  public activity DateToString(in date: Date[0..1]): String {
    return date == null? "n/a": ToString(date.month??) + "/" + ToString(date.day??) + "/" + ToString(date.year??);
  }
  
  public activity PropertyTypeToString(in type: 'Property Type'[0..1]): String {
  
    return type == 'Property Type'::personal? "Personal":
           type == 'Property Type'::real? "Real":
           "n/a";
  
  }
  
  public activity PropertyStatusToString(in status: 'Property Status'[0..1]): String {
  
    return status == 'Property Status'::pending? "Pending":
           status == 'Property Status'::acquired? "Acquired":
           status == 'Property Status'::disposed? "Disposed":
           "n/a";
  
  }
  
  public activity DispositionTypeToString(in type: 'Property Disposition Type'[0..1]): String {
  
    return type == 'Property Disposition Type'::transferred? "Transferred":
           type == 'Property Disposition Type'::sold? "Sold":
           type == 'Property Disposition Type'::destroyed? "Destroyed":
           "n/a";
  
  }
  
  public activity OptionalString(in string: String[0..1]): String {
    return string ?? "n/a";
  }
  
  public activity WriteReply(in reply: 'Property Management Success Reply') {
  
    property = reply.property;
    acquisitionData = property.'property acquisition data';
    dispositionData = property.'property disposition data';
    location = property.'property location';
  
    WriteLine("Reply: " + reply.identifier);
    WriteLine("Identifier: " + property.'property identifier');
    WriteLine("Name: " + property.'property name');
    WriteLine("Status: " + PropertyStatusToString(property.'property status'));
    WriteLine("Value: " + CurrencyAmountToString(property.'property value'));
    WriteLine("Type: " + PropertyTypeToString(property.'property type'));
    WriteLine("Serial Number: " + OptionalString(property.'property serial number'));
    WriteLine("Size: " + AreaToString(property.'property size'));
    WriteLine("Acquisition Date: " + DateToString(acquisitionData.'acquisition date'));
    WriteLine("Acquisition Cost: " + CurrencyAmountToString(acquisitionData.'acquisition cost'));
    WriteLine("Disposition Date: " + DateToString(dispositionData.'disposition date'));
    WriteLine("Disposition Revenue: " + CurrencyAmountToString(dispositionData.'disposition revenue'));
    WriteLine("Disposition Type: " + DispositionTypeToString(dispositionData.'disposition type'));
    WriteLine("Location: " + OptionalString(location.'location identifier'));
    
    if (location->notEmpty()) {
      WriteLine("Address: ");
      WriteLine(location.'location address'??);
    }
    
  }
  
  public activity WriteError(in error: 'Error Reply') {
    WriteLine("Reply: " + error.identifier);
    WriteLine("Error Code: " + error.'error code');
    WriteLine("Error Message: " + error.'error message');
  }

  public activity USD(in dollars: Integer, in cents: Integer): 'Currency Amount' {
    return new 'Currency Amount'(
      new FixedPointNumber(dollars * 100 + cents, 2), 
      "USD");
  }
  
  public activity Acres(in acres: Integer): Area {
    return new Area(new FixedPointNumber(acres, 0), "acre");
  }

}