namespace Alf::Library::CollectionClasses::Impl;
private import Alf::Library::CollectionFunctions::*;
/**
The concrete implementation of the standard library template Bag class.
*/
class Bag<T> specializes CollectionImpl<T>, CollectionClasses::Bag<T> {

  private content: T[0..*] nonunique;

  @Create public Bag (in seq: T[0..*] sequence) { 
    super.CollectionImpl(seq);
  }

  @Destroy public destroy () { }
  
  private setContent(in seq: T[0..*] sequence) {
    this.content = seq;
  }

  public add (in element: T): Boolean {
    return super.CollectionImpl<T>::add(element);
  }
  
  public addAll (in seq: T[0..*] sequence): Boolean {
    return super.CollectionImpl<T>::addAll(seq);
  }
  
  public clear () {
    super.CollectionImpl<T>::clear();
  }
  
  public count (in element: T): Integer  {
    return super.CollectionImpl<T>::count(element);
  }

  public equals (in seq: T[0..*] sequence): Boolean { 
    return this.size() == seq->size() && this.includesAll(seq);
  }
 
  public excludes (in element: T): Boolean {
    return super.CollectionImpl<T>::excludes (element);
  }
  
  public excludesAll (in seq: T[0..*] sequence): Boolean {
    return super.CollectionImpl<T>::excludesAll(seq);
  }
  
  public includes (in element: T): Boolean {
    return super.CollectionImpl<T>::includes(element);
  }
  
  public includesAll (in seq: T[0..*] sequence): Boolean {
    return super.CollectionImpl<T>::includesAll(seq);
  }
  
  public isEmpty (): Boolean {
    return super.CollectionImpl<T>::isEmpty();
  }
  
  public notEmpty (): Boolean {
    return super.CollectionImpl<T>::notEmpty();
  }
  
  public remove (in element: T): Integer {
    return super.CollectionImpl<T>::remove(element);
  }
  
  public removeAll (in seq: T[0..*] sequence): Boolean {
    return super.CollectionImpl<T>::removeAll(seq);
  }
  
  public removeOne (in element: T): Boolean {
    return super.CollectionImpl<T>::removeOne(element);
  }
  
  public replace (in element: T, in newElement: T): Integer  {
    return super.CollectionImpl<T>::replace(element, newElement);
  }
  
  public replaceOne (in element: T, in newElement: T): Boolean {
    return super.CollectionImpl<T>::replaceOne(element, newElement);
  }
  
  public retainAll (in seq: T[0..*] sequence): Boolean {
    return super.CollectionImpl<T>::retainAll(seq);
  }

  public size(): Integer {
    return super.CollectionImpl<T>::size();
  }
  
  public toSequence(): T[0..*] sequence {
    return this.content;
  }
}
