namespace Ordering;

/**
From Executable UML, Figure B.2, with statechart from Figure B.3
*/
active class Order
{
  public orderID:         arbitrary_id;
  public dateOrderPlaced: date;
  public totalValue:      Money; // Note: fUML does not allow derived values
  public recipient:       PersonalName;
  public deliveryAddress: MailingAddress;
  public contactPhone:    TelephoneNumber;

  public receive signal CheckOut                           // See Note 1
  {
    public cart:               ShoppingCart;
    public accountNumber:      BankCardAccountNumber;
    public billingAddress:     MailingAddress;
    public cardExpirationDate: MonthYear;
    public cardholderName:     PersonalName;
    public customerEmail:      InternetEmailAddress;
    public customerName:       PersonalName;
    public customerPhone:      TelephoneNumber;
    public shippingAddress:    MailingAddress;
  }

  public receive signal SubmitCharge
  {
    public accountNumber:      BankCardAccountNumber;
    public billingAddress:     MailingAddress;
    public cardExpirationDate: MonthYear;
    public cardholderName:     PersonalName;
  }

  public receive signal PaymentDeclined{}
  public receive signal PaymentApproved{}
  public receive signal OrderDelivered{}

  private establishCustomer(in rcvd_evt: CheckOut);        // See Note 2
  private processCharge(in rcvd_evt: SubmitCharge);
  private declineCharge();
  private packAndShip();
  private notifyOfDelivery();

} 
do                                                         // See Note 3
{

  /** 1. Establishing Customer and Verifying Payment */
  accept (checkOut: CheckOut);
  this.EstablishCustomer(checkOut);

  do {

    /** 2. Submitting Charge */
    accept (chargeSubmission: SubmitCharge);
    this.ProcessCharge(chargeSubmission);

    accept (PaymentDeclined) {
      declined = true;

      /** 3. Payment Not Approved */
      this.DeclineCharge();

    } or accept (PaymentApproved) {
      declined = false;
    }

  } while (declined);

  /** 4. Being Packed and Shipped */
  this.PackAndShip();
  
  /** 5. Delivered to Customer */
  accept(OrderDelivery);
  this.NotifyOfDelivery();

}
