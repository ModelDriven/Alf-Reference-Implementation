namespace Alf::Library::CollectionClasses::Impl;
private import Alf::Library::CollectionFunctions::*;
/**
The concrete implementation of the standard library template Deque class.
*/
class Deque<T> specializes Queue<T>, CollectionClasses::Deque<T> {

  @Create public Deque (in seq: T[0..*] sequence) { 
    super.Queue<T>::Queue(seq);
  }

  @Destroy public destroy () { 
    super.Queue<T>::destroy();
  }
  
  private Queue (in seq: T[0..*] sequence) {
    this.Deque(seq);
  }

  public add (in element: T): Boolean {
    return super.Queue<T>::add(element);
  }
  
  public addAll (in seq: T[0..*] sequence): Boolean {
    return super.Queue<T>::addAll(seq);
  }
  
  public addFirst (in element: T): Boolean {
    this.setContent(this.toSequence()->includeAt(1, element));
    return true;
  }
  
  public addLast (in element : T): Boolean {
    return this.add(element);
  }
  
  public clear () {
    super.Queue<T>::clear();
  }
  
  public count (in element: T): Integer  {
    return super.Queue<T>::count(element);
  }

  public equals (in seq: T[0..*] sequence): Boolean { 
    return this.size() == seq->size() && this.includesAll(seq);
  }
 
  public excludes (in element: T): Boolean {
    return super.Queue<T>::excludes (element);
  }
  
  public excludesAll (in seq: T[0..*] sequence): Boolean {
    return super.Queue<T>::excludesAll(seq);
  }
  
  public first(): T[0..1] {
    return this.toSequence()->first();
  }
  
  public includes (in element: T): Boolean {
    return super.Queue<T>::includes(element);
  }
  
  public includesAll (in seq: T[0..*] sequence): Boolean {
    return super.Queue<T>::includesAll(seq);
  }
  
  public isEmpty (): Boolean {
    return super.Queue<T>::isEmpty();
  }
  
  public last (): T[0..1] {
    return this.toSequence()->last();
  }
  
  public notEmpty (): Boolean {
    return super.Queue<T>::notEmpty();
  }
  
  public remove (in element: T): Integer {
    return super.Queue<T>::remove(element);
  }
  
  public removeAll (in seq: T[0..*] sequence): Boolean {
    return super.Queue<T>::removeAll(seq);
  }
  
  public removeFirst (): T[0..1] {
    result = this.toSequence()->first();
    this.setContent(this.toSequence()->subsequence(2,this.size()));
    return result;
  }
  
  public removeFirstOne (in element: T): T[0..1] {
    return this.removeOne(element)? element: null;
  }                      

  public removeLast (): T[0..1] {
    result = this.last();
    this.setContent(this.toSequence()->subsequence(1,this.size()-1));
    return result;
  }
  
  public removeLastOne (in element: T): T[0..1] {
    n = this.size();
    for (i in 1..n) {
      e = this.toSequence()->at(n - i + 1);
      if (e == element) {
        this.setContent(this.toSequence()->excludeAt(i));
        return e;
      }
    }
    return null;
  }
                                                                                                                                                                                                                                                                                                                                                 
  public removeOne (in element: T): Boolean {
    return super.Queue<T>::removeOne(element);
  }
  
  public replace (in element: T, in newElement: T): Integer  {
    return super.Queue<T>::replace(element, newElement);
  }
  
  public replaceOne (in element: T, in newElement: T): Boolean {
    return super.Queue<T>::replaceOne(element, newElement);
  }
  
  public retainAll (in seq: T[0..*] sequence): Boolean {
    return super.Queue<T>::retainAll(seq);
  }

  public size(): Integer {
    return super.Queue<T>::size();
  }
  
  public toSequence (): T[0..*] sequence {
    return super.Queue<T>::toSequence();
  }

}
