<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xmi:id="_REq3wCcoEeSLVrU2ifxtpw" name="Model" visibility="package">
  <packagedElement xmi:type="uml:Activity" xmi:id="_REq3wScoEeSLVrU2ifxtpw" name="AssertFalse" node="_REq30icoEeSLVrU2ifxtpw _REq30ycoEeSLVrU2ifxtpw _REq31CcoEeSLVrU2ifxtpw _REq31ScoEeSLVrU2ifxtpw _REq31icoEeSLVrU2ifxtpw" group="_REq31icoEeSLVrU2ifxtpw">
    <elementImport xmi:id="_REq3wicoEeSLVrU2ifxtpw" alias="" visibility="private">
      <importedElement xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-BooleanFunctions-ToString"/>
    </elementImport>
    <packageImport xmi:id="_REq3wycoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes"/>
    </packageImport>
    <packageImport xmi:id="_REq3xCcoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors"/>
    </packageImport>
    <packageImport xmi:id="_REq3xScoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-BasicInputOutput"/>
    </packageImport>
    <packageImport xmi:id="_REq3xicoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-CollectionFunctions"/>
    </packageImport>
    <packageImport xmi:id="_REq3xycoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-CollectionClasses"/>
    </packageImport>
    <ownedParameter xmi:id="_REq3yCcoEeSLVrU2ifxtpw" name="label" visibility="package">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq3yScoEeSLVrU2ifxtpw" value="1"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq3yicoEeSLVrU2ifxtpw" value="1"/>
    </ownedParameter>
    <ownedParameter xmi:id="_REq3yycoEeSLVrU2ifxtpw" name="condition" visibility="package">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq3zCcoEeSLVrU2ifxtpw"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq3zScoEeSLVrU2ifxtpw" value="1"/>
    </ownedParameter>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REq3zicoEeSLVrU2ifxtpw" target="_REq30ycoEeSLVrU2ifxtpw" source="_REq30icoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REq3zycoEeSLVrU2ifxtpw" target="_REq31ScoEeSLVrU2ifxtpw" source="_REq31CcoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REq30CcoEeSLVrU2ifxtpw" target="_REq39icoEeSLVrU2ifxtpw" source="_REq30ycoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REq30ScoEeSLVrU2ifxtpw" target="_REq4CycoEeSLVrU2ifxtpw" source="_REq31ScoEeSLVrU2ifxtpw"/>
    <structuredNode xmi:id="_REq31icoEeSLVrU2ifxtpw" name="Body(AssertFalse)">
      <node xmi:type="uml:StructuredActivityNode" xmi:id="_REq31ycoEeSLVrU2ifxtpw" name="ExpressionStatement@4b38c3f8">
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REq32CcoEeSLVrU2ifxtpw" target="_REq33CcoEeSLVrU2ifxtpw" source="_REq3-ScoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REq32ScoEeSLVrU2ifxtpw" target="_REq33ycoEeSLVrU2ifxtpw" source="_REq4FCcoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_REq32icoEeSLVrU2ifxtpw" target="_REq32ycoEeSLVrU2ifxtpw" source="_REq34icoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_REq32ycoEeSLVrU2ifxtpw" name="Call(AssertTrue)" incoming="_REq32icoEeSLVrU2ifxtpw" behavior="_REre0ScoEeSLVrU2ifxtpw">
          <argument xmi:id="_REq33CcoEeSLVrU2ifxtpw" name="Call(AssertTrue).argument(label)" incoming="_REq32CcoEeSLVrU2ifxtpw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq33ScoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq33icoEeSLVrU2ifxtpw" value="1"/>
          </argument>
          <argument xmi:id="_REq33ycoEeSLVrU2ifxtpw" name="Call(AssertTrue).argument(condition)" incoming="_REq32ScoEeSLVrU2ifxtpw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq34CcoEeSLVrU2ifxtpw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq34ScoEeSLVrU2ifxtpw" value="1"/>
          </argument>
        </node>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_REq34icoEeSLVrU2ifxtpw" name="Tuple@3a67d807" outgoing="_REq32icoEeSLVrU2ifxtpw">
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq34ycoEeSLVrU2ifxtpw" target="_REq38ycoEeSLVrU2ifxtpw" source="_REq37icoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq35CcoEeSLVrU2ifxtpw" target="_REq4AicoEeSLVrU2ifxtpw" source="_REq4CycoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq35ScoEeSLVrU2ifxtpw" target="_REq4DScoEeSLVrU2ifxtpw" source="_REq4CycoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq35icoEeSLVrU2ifxtpw" target="_REq4EycoEeSLVrU2ifxtpw" source="_REq4ECcoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq35ycoEeSLVrU2ifxtpw" target="_REq4FCcoEeSLVrU2ifxtpw" source="_REq4BScoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq36CcoEeSLVrU2ifxtpw" target="_REre0CcoEeSLVrU2ifxtpw" source="_REq4EycoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq36ScoEeSLVrU2ifxtpw" target="_REre0CcoEeSLVrU2ifxtpw" source="_REq4EycoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq36icoEeSLVrU2ifxtpw" target="_REq4FCcoEeSLVrU2ifxtpw" source="_REre0CcoEeSLVrU2ifxtpw">
            <guard xmi:type="uml:LiteralBoolean" xmi:id="_REq36ycoEeSLVrU2ifxtpw" name="Value(false)"/>
          </edge>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_REq37CcoEeSLVrU2ifxtpw" target="_REq4CCcoEeSLVrU2ifxtpw" source="_REq3_ScoEeSLVrU2ifxtpw"/>
          <node xmi:type="uml:ValueSpecificationAction" xmi:id="_REq37ScoEeSLVrU2ifxtpw" name="Value(&quot;! &quot;)">
            <result xmi:id="_REq37icoEeSLVrU2ifxtpw" name="Value(&quot;! &quot;).result" outgoing="_REq34ycoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq37ycoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq38CcoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <value xmi:type="uml:LiteralString" xmi:id="_REq38ScoEeSLVrU2ifxtpw" value="! ">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </value>
          </node>
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_REq38icoEeSLVrU2ifxtpw" name="Call(Concat)">
            <argument xmi:id="_REq38ycoEeSLVrU2ifxtpw" name="Call(Concat).argument(x)" incoming="_REq34ycoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq39CcoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq39ScoEeSLVrU2ifxtpw" value="1"/>
            </argument>
            <argument xmi:id="_REq39icoEeSLVrU2ifxtpw" name="Call(Concat).argument(y)" incoming="_REq30CcoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq39ycoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq3-CcoEeSLVrU2ifxtpw" value="1"/>
            </argument>
            <result xmi:id="_REq3-ScoEeSLVrU2ifxtpw" name="Call(Concat).result(result)" outgoing="_REq32CcoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq3-icoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq3-ycoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
          </node>
          <node xmi:type="uml:ValueSpecificationAction" xmi:id="_REq3_CcoEeSLVrU2ifxtpw" name="Value(false)">
            <result xmi:id="_REq3_ScoEeSLVrU2ifxtpw" name="Value(false).result" outgoing="_REq37CcoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq3_icoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq3_ycoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <value xmi:type="uml:LiteralBoolean" xmi:id="_REq4ACcoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            </value>
          </node>
          <node xmi:type="uml:TestIdentityAction" xmi:id="_REq4AScoEeSLVrU2ifxtpw" name="Test(==)">
            <first xmi:id="_REq4AicoEeSLVrU2ifxtpw" name="Test(==).first" incoming="_REq35CcoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq4AycoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq4BCcoEeSLVrU2ifxtpw" value="1"/>
            </first>
            <result xmi:id="_REq4BScoEeSLVrU2ifxtpw" name="Test(==).result" outgoing="_REq35ycoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq4BicoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq4BycoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <second xmi:id="_REq4CCcoEeSLVrU2ifxtpw" name="Test(==).second" incoming="_REq37CcoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq4CScoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq4CicoEeSLVrU2ifxtpw" value="1"/>
            </second>
          </node>
          <node xmi:type="uml:ForkNode" xmi:id="_REq4CycoEeSLVrU2ifxtpw" name="Fork(Fork(condition))" incoming="_REq30ScoEeSLVrU2ifxtpw" outgoing="_REq35CcoEeSLVrU2ifxtpw _REq35ScoEeSLVrU2ifxtpw"/>
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_REq4DCcoEeSLVrU2ifxtpw" name="Call(NotEmpty)">
            <argument xmi:id="_REq4DScoEeSLVrU2ifxtpw" name="Call(NotEmpty).argument(seq)" incoming="_REq35ScoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq4DicoEeSLVrU2ifxtpw"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq4DycoEeSLVrU2ifxtpw" value="*"/>
            </argument>
            <result xmi:id="_REq4ECcoEeSLVrU2ifxtpw" name="Call(NotEmpty).result()" outgoing="_REq35icoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REq4EScoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REq4EicoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-NotEmpty"/>
          </node>
          <node xmi:type="uml:ForkNode" xmi:id="_REq4EycoEeSLVrU2ifxtpw" name="Fork(Call(NotEmpty).result())" incoming="_REq35icoEeSLVrU2ifxtpw" outgoing="_REq36CcoEeSLVrU2ifxtpw _REq36ScoEeSLVrU2ifxtpw"/>
          <node xmi:type="uml:MergeNode" xmi:id="_REq4FCcoEeSLVrU2ifxtpw" name="Merge(Test(==).result, Call(NotEmpty).result())" incoming="_REq35ycoEeSLVrU2ifxtpw _REq36icoEeSLVrU2ifxtpw" outgoing="_REq32ScoEeSLVrU2ifxtpw"/>
          <node xmi:type="uml:DecisionNode" xmi:id="_REre0CcoEeSLVrU2ifxtpw" name="Decision(Call(NotEmpty).result())" incoming="_REq36CcoEeSLVrU2ifxtpw _REq36ScoEeSLVrU2ifxtpw" outgoing="_REq36icoEeSLVrU2ifxtpw" decisionInputFlow="_REq36ScoEeSLVrU2ifxtpw"/>
        </node>
      </node>
    </structuredNode>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_REq30icoEeSLVrU2ifxtpw" name="Input(label)" outgoing="_REq3zicoEeSLVrU2ifxtpw" parameter="_REq3yCcoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ForkNode" xmi:id="_REq30ycoEeSLVrU2ifxtpw" name="Fork(label)" incoming="_REq3zicoEeSLVrU2ifxtpw" outgoing="_REq30CcoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_REq31CcoEeSLVrU2ifxtpw" name="Input(condition)" outgoing="_REq3zycoEeSLVrU2ifxtpw" parameter="_REq3yycoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ForkNode" xmi:id="_REq31ScoEeSLVrU2ifxtpw" name="Fork(condition)" incoming="_REq3zycoEeSLVrU2ifxtpw" outgoing="_REq30ScoEeSLVrU2ifxtpw"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Activity" xmi:id="_REre0ScoEeSLVrU2ifxtpw" name="AssertTrue" node="_REre4ScoEeSLVrU2ifxtpw _REre4icoEeSLVrU2ifxtpw _REre4ycoEeSLVrU2ifxtpw _REre5CcoEeSLVrU2ifxtpw _REre5ScoEeSLVrU2ifxtpw" group="_REre5ScoEeSLVrU2ifxtpw">
    <packageImport xmi:id="_REre0icoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes"/>
    </packageImport>
    <packageImport xmi:id="_REre0ycoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors"/>
    </packageImport>
    <packageImport xmi:id="_REre1CcoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-BasicInputOutput"/>
    </packageImport>
    <packageImport xmi:id="_REre1ScoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-CollectionFunctions"/>
    </packageImport>
    <packageImport xmi:id="_REre1icoEeSLVrU2ifxtpw" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-CollectionClasses"/>
    </packageImport>
    <ownedParameter xmi:id="_REre1ycoEeSLVrU2ifxtpw" name="label" visibility="package">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre2CcoEeSLVrU2ifxtpw" value="1"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre2ScoEeSLVrU2ifxtpw" value="1"/>
    </ownedParameter>
    <ownedParameter xmi:id="_REre2icoEeSLVrU2ifxtpw" name="condition" visibility="package">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre2ycoEeSLVrU2ifxtpw"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre3CcoEeSLVrU2ifxtpw" value="1"/>
    </ownedParameter>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REre3ScoEeSLVrU2ifxtpw" target="_REre4icoEeSLVrU2ifxtpw" source="_REre4ScoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REre3icoEeSLVrU2ifxtpw" target="_REre5CcoEeSLVrU2ifxtpw" source="_REre4ycoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REre3ycoEeSLVrU2ifxtpw" target="_RErfACcoEeSLVrU2ifxtpw" source="_REre5CcoEeSLVrU2ifxtpw"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_REre4CcoEeSLVrU2ifxtpw" target="_RErfJycoEeSLVrU2ifxtpw" source="_REre4icoEeSLVrU2ifxtpw"/>
    <structuredNode xmi:id="_REre5ScoEeSLVrU2ifxtpw" name="Body(AssertTrue)">
      <node xmi:type="uml:ConditionalNode" xmi:id="_REre5icoEeSLVrU2ifxtpw" name="IfStatement@4d04dd5d">
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre5ycoEeSLVrU2ifxtpw" target="_REre9ycoEeSLVrU2ifxtpw" source="_RErfACcoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre6CcoEeSLVrU2ifxtpw" target="_RErfAicoEeSLVrU2ifxtpw" source="_RErfACcoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre6ScoEeSLVrU2ifxtpw" target="_RErfCCcoEeSLVrU2ifxtpw" source="_RErfBScoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre6icoEeSLVrU2ifxtpw" target="_RErfCScoEeSLVrU2ifxtpw" source="_REre-icoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre6ycoEeSLVrU2ifxtpw" target="_RErfCicoEeSLVrU2ifxtpw" source="_RErfCCcoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre7CcoEeSLVrU2ifxtpw" target="_RErfCicoEeSLVrU2ifxtpw" source="_RErfCCcoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre7ScoEeSLVrU2ifxtpw" target="_RErfCScoEeSLVrU2ifxtpw" source="_RErfCicoEeSLVrU2ifxtpw">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_REre7icoEeSLVrU2ifxtpw" name="Value(false)"/>
        </edge>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre7ycoEeSLVrU2ifxtpw" target="_REre_ScoEeSLVrU2ifxtpw" source="_REre8icoEeSLVrU2ifxtpw"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_REre8CcoEeSLVrU2ifxtpw" target="_RErfDCcoEeSLVrU2ifxtpw" source="_RErfCScoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:ValueSpecificationAction" xmi:id="_REre8ScoEeSLVrU2ifxtpw" name="Value(true)">
          <result xmi:id="_REre8icoEeSLVrU2ifxtpw" name="Value(true).result" outgoing="_REre7ycoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre8ycoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre9CcoEeSLVrU2ifxtpw" value="1"/>
          </result>
          <value xmi:type="uml:LiteralBoolean" xmi:id="_REre9ScoEeSLVrU2ifxtpw" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </value>
        </node>
        <node xmi:type="uml:TestIdentityAction" xmi:id="_REre9icoEeSLVrU2ifxtpw" name="Test(==)">
          <first xmi:id="_REre9ycoEeSLVrU2ifxtpw" name="Test(==).first" incoming="_REre5ycoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre-CcoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre-ScoEeSLVrU2ifxtpw" value="1"/>
          </first>
          <result xmi:id="_REre-icoEeSLVrU2ifxtpw" name="Test(==).result" outgoing="_REre6icoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre-ycoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre_CcoEeSLVrU2ifxtpw" value="1"/>
          </result>
          <second xmi:id="_REre_ScoEeSLVrU2ifxtpw" name="Test(==).second" incoming="_REre7ycoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REre_icoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_REre_ycoEeSLVrU2ifxtpw" value="1"/>
          </second>
        </node>
        <node xmi:type="uml:ForkNode" xmi:id="_RErfACcoEeSLVrU2ifxtpw" name="Fork(Fork(condition))" incoming="_REre3ycoEeSLVrU2ifxtpw" outgoing="_REre5ycoEeSLVrU2ifxtpw _REre6CcoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_RErfAScoEeSLVrU2ifxtpw" name="Call(NotEmpty)">
          <argument xmi:id="_RErfAicoEeSLVrU2ifxtpw" name="Call(NotEmpty).argument(seq)" incoming="_REre6CcoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfAycoEeSLVrU2ifxtpw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfBCcoEeSLVrU2ifxtpw" value="*"/>
          </argument>
          <result xmi:id="_RErfBScoEeSLVrU2ifxtpw" name="Call(NotEmpty).result()" outgoing="_REre6ScoEeSLVrU2ifxtpw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfBicoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfBycoEeSLVrU2ifxtpw" value="1"/>
          </result>
          <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-NotEmpty"/>
        </node>
        <node xmi:type="uml:ForkNode" xmi:id="_RErfCCcoEeSLVrU2ifxtpw" name="Fork(Call(NotEmpty).result())" incoming="_REre6ScoEeSLVrU2ifxtpw" outgoing="_REre6ycoEeSLVrU2ifxtpw _REre7CcoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:MergeNode" xmi:id="_RErfCScoEeSLVrU2ifxtpw" name="Merge(Test(==).result, Call(NotEmpty).result())" incoming="_REre6icoEeSLVrU2ifxtpw _REre7ScoEeSLVrU2ifxtpw" outgoing="_REre8CcoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:DecisionNode" xmi:id="_RErfCicoEeSLVrU2ifxtpw" name="Decision(Call(NotEmpty).result())" incoming="_REre6ycoEeSLVrU2ifxtpw _REre7CcoEeSLVrU2ifxtpw" outgoing="_REre7ScoEeSLVrU2ifxtpw" decisionInputFlow="_REre7CcoEeSLVrU2ifxtpw"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_RErfCycoEeSLVrU2ifxtpw" name="Call(Not)">
          <argument xmi:id="_RErfDCcoEeSLVrU2ifxtpw" name="Call(Not).argument(x)" incoming="_REre8CcoEeSLVrU2ifxtpw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfDScoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfDicoEeSLVrU2ifxtpw" value="1"/>
          </argument>
          <result xmi:id="_RErfDycoEeSLVrU2ifxtpw" name="Call(Not).result(result)">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfECcoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfEScoEeSLVrU2ifxtpw" value="1"/>
          </result>
          <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-BooleanFunctions-Not"/>
        </node>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_RErfEicoEeSLVrU2ifxtpw" name="ExpressionStatement@7f37500e">
          <edge xmi:type="uml:ObjectFlow" xmi:id="_RErfEycoEeSLVrU2ifxtpw" target="_RErfFicoEeSLVrU2ifxtpw" source="_RErfKicoEeSLVrU2ifxtpw"/>
          <edge xmi:type="uml:ControlFlow" xmi:id="_RErfFCcoEeSLVrU2ifxtpw" target="_RErfFScoEeSLVrU2ifxtpw" source="_RErfHCcoEeSLVrU2ifxtpw"/>
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_RErfFScoEeSLVrU2ifxtpw" name="Call(WriteLine)" incoming="_RErfFCcoEeSLVrU2ifxtpw">
            <argument xmi:id="_RErfFicoEeSLVrU2ifxtpw" name="Call(WriteLine).argument(value)" incoming="_RErfEycoEeSLVrU2ifxtpw">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfFycoEeSLVrU2ifxtpw" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfGCcoEeSLVrU2ifxtpw" value="1"/>
            </argument>
            <result xmi:id="_RErfGScoEeSLVrU2ifxtpw" name="Call(WriteLine).result(errorStatus)">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfGicoEeSLVrU2ifxtpw"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfGycoEeSLVrU2ifxtpw" value="1"/>
            </result>
            <behavior xmi:type="uml:Activity" href="Libraries/fUML.library.uml#BasicInputOutput-WriteLine"/>
          </node>
          <node xmi:type="uml:StructuredActivityNode" xmi:id="_RErfHCcoEeSLVrU2ifxtpw" name="Tuple@643f21d6" outgoing="_RErfFCcoEeSLVrU2ifxtpw">
            <edge xmi:type="uml:ObjectFlow" xmi:id="_RErfHScoEeSLVrU2ifxtpw" target="_RErfJCcoEeSLVrU2ifxtpw" source="_RErfHycoEeSLVrU2ifxtpw"/>
            <node xmi:type="uml:ValueSpecificationAction" xmi:id="_RErfHicoEeSLVrU2ifxtpw" name="Value(&quot;FAILED: &quot;)">
              <result xmi:id="_RErfHycoEeSLVrU2ifxtpw" name="Value(&quot;FAILED: &quot;).result" outgoing="_RErfHScoEeSLVrU2ifxtpw" isOrdered="true" isUnique="false">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfICcoEeSLVrU2ifxtpw" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfIScoEeSLVrU2ifxtpw" value="1"/>
              </result>
              <value xmi:type="uml:LiteralString" xmi:id="_RErfIicoEeSLVrU2ifxtpw" value="FAILED: ">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </value>
            </node>
            <node xmi:type="uml:CallBehaviorAction" xmi:id="_RErfIycoEeSLVrU2ifxtpw" name="Call(Concat)">
              <argument xmi:id="_RErfJCcoEeSLVrU2ifxtpw" name="Call(Concat).argument(x)" incoming="_RErfHScoEeSLVrU2ifxtpw">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfJScoEeSLVrU2ifxtpw" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfJicoEeSLVrU2ifxtpw" value="1"/>
              </argument>
              <argument xmi:id="_RErfJycoEeSLVrU2ifxtpw" name="Call(Concat).argument(y)" incoming="_REre4CcoEeSLVrU2ifxtpw">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfKCcoEeSLVrU2ifxtpw" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfKScoEeSLVrU2ifxtpw" value="1"/>
              </argument>
              <result xmi:id="_RErfKicoEeSLVrU2ifxtpw" name="Call(Concat).result(result)" outgoing="_RErfEycoEeSLVrU2ifxtpw">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfKycoEeSLVrU2ifxtpw" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfLCcoEeSLVrU2ifxtpw" value="1"/>
              </result>
              <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
            </node>
          </node>
        </node>
        <node xmi:type="uml:ValueSpecificationAction" xmi:id="_RErfLScoEeSLVrU2ifxtpw" name="Value(true)">
          <result xmi:id="_RErfLicoEeSLVrU2ifxtpw" name="Value(true).result" isOrdered="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RErfLycoEeSLVrU2ifxtpw" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RErfMCcoEeSLVrU2ifxtpw" value="1"/>
          </result>
          <value xmi:type="uml:LiteralBoolean" xmi:id="_RErfMScoEeSLVrU2ifxtpw" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </value>
        </node>
        <clause xmi:id="_RErfMicoEeSLVrU2ifxtpw" body="_RErfEicoEeSLVrU2ifxtpw" decider="_RErfDycoEeSLVrU2ifxtpw" successorClause="_RErfMycoEeSLVrU2ifxtpw" test="_REre8ScoEeSLVrU2ifxtpw _REre9icoEeSLVrU2ifxtpw _RErfAScoEeSLVrU2ifxtpw _RErfCycoEeSLVrU2ifxtpw"/>
        <clause xmi:id="_RErfMycoEeSLVrU2ifxtpw" decider="_RErfLicoEeSLVrU2ifxtpw" predecessorClause="_RErfMicoEeSLVrU2ifxtpw" test="_RErfLScoEeSLVrU2ifxtpw"/>
      </node>
    </structuredNode>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_REre4ScoEeSLVrU2ifxtpw" name="Input(label)" outgoing="_REre3ScoEeSLVrU2ifxtpw" parameter="_REre1ycoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ForkNode" xmi:id="_REre4icoEeSLVrU2ifxtpw" name="Fork(label)" incoming="_REre3ScoEeSLVrU2ifxtpw" outgoing="_REre4CcoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_REre4ycoEeSLVrU2ifxtpw" name="Input(condition)" outgoing="_REre3icoEeSLVrU2ifxtpw" parameter="_REre2icoEeSLVrU2ifxtpw"/>
    <node xmi:type="uml:ForkNode" xmi:id="_REre5CcoEeSLVrU2ifxtpw" name="Fork(condition)" incoming="_REre3icoEeSLVrU2ifxtpw" outgoing="_REre3ycoEeSLVrU2ifxtpw"/>
  </packagedElement>
  <profileApplication xmi:id="_RErfNCcoEeSLVrU2ifxtpw">
    <eAnnotations xmi:id="_RErfNScoEeSLVrU2ifxtpw" source="http://www.eclipse.org/uml2/2.0.0/UML">
      <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_QLYqEHJLEeKLR_U6HVChUg"/>
    </eAnnotations>
    <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
  </profileApplication>
</uml:Model>
