<?xml version="1.0" encoding="utf-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cmof="http://schema.omg.org/spec/MOF/2.0/cmof.xml">
  <cmof:Package xmi:id="_0" name="Alf">
    <ownedMember xmi:type="cmof:Class" xmi:id="InternalElementReference"
      name="InternalElementReference" superClass="ElementReference">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InternalElementReference-_ownedComment.0"
        annotatedElement="InternalElementReference">
        <body>A direct reference to a UML model element. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InternalElementReference-element"
        name="element" visibility="public" type="SyntaxElement" association="_packagedElement.152">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InternalElementReference-element-_ownedComment.0"
          annotatedElement="InternalElementReference-element">
          <body>The Alf syntax element that represents the referenced model element. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SyntaxElement" name="SyntaxElement" isAbstract="true">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SyntaxElement-_ownedComment.0"
        annotatedElement="SyntaxElement">
        <body>A syntax element synthesized in an abstract syntax tree, along with any additional
          information determined during static semantic analysis. </body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExternalElementReference"
      name="ExternalElementReference" superClass="ElementReference">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExternalElementReference-_ownedComment.0"
        annotatedElement="ExternalElementReference">
        <body>A direct reference to a UML model element. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExternalElementReference-element"
        name="element" visibility="public" association="_packagedElement.153">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExternalElementReference-element-_ownedComment.0"
          annotatedElement="ExternalElementReference-element">
          <body>The referenced model element. </body>
        </ownedComment>
        <type xmi:type="cmof:Class" href="http://www.omg.org/spec/UML/2.4/uml.xmi#Element"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ElementReference" name="ElementReference"
      isAbstract="true">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ElementReference-_ownedComment.0"
        annotatedElement="ElementReference">
        <body>A reference to a model element, either directly or via its Alf abstract syntax
          representation. (NOTE: The definitions of all the helper operations of ElementReference
          are specific to its subclasses.) </body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DocumentedElement" name="DocumentedElement"
      isAbstract="true" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DocumentedElement-_ownedComment.0"
        annotatedElement="DocumentedElement">
        <body>A syntax element that has documentation comments associated with it. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DocumentedElement-documentation"
        name="documentation" visibility="public" upper="*">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DocumentedElement-documentation-_ownedComment.0"
          annotatedElement="DocumentedElement-documentation">
          <body>The documentation text to be associated with a syntax element. Each string is
            intended to be mapped to the body of a comment element in the target UML model. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AssignedSource" name="AssignedSource">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-_ownedComment.0"
        annotatedElement="AssignedSource">
        <body>An assignment of a source element that gives the value of a local name, along with a
          record of the defined type (if any) and multiplicity of the local name. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignedSource-name" name="name"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-name-_ownedComment.0"
          annotatedElement="AssignedSource-name">
          <body>The local name for which this is the assigned source. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignedSource-source" name="source"
        visibility="public" type="SyntaxElement" association="_packagedElement.151">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-source-_ownedComment.0"
          annotatedElement="AssignedSource-source">
          <body>The syntax element that is to be the source for the assigned value of the given
            local name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignedSource-upper" name="upper"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-upper-_ownedComment.0"
          annotatedElement="AssignedSource-upper">
          <body>The multiplicity upper bound for the local name. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-UnlimitedNatural"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignedSource-lower" name="lower"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-lower-_ownedComment.0"
          annotatedElement="AssignedSource-lower">
          <body>The multiplicity lower bound for the name. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignedSource-type" name="type"
        visibility="public" type="ElementReference" lower="0" isComposite="true"
        association="_packagedElement.8">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignedSource-type-_ownedComment.0"
          annotatedElement="AssignedSource-type">
          <body>A reference to the element that gives the type for the local name (if any). </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.8" name=""
      visibility="private" memberEnd="_packagedElement.8-_ownedEnd.0 AssignedSource-type">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.8-_ownedEnd.0" name=""
        visibility="private" type="AssignedSource" lower="0" owningAssociation="_packagedElement.8"
        association="_packagedElement.8"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="UnaryExpression" name="UnaryExpression"
      isAbstract="true" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="UnaryExpression-_ownedComment.0"
        annotatedElement="UnaryExpression">
        <body>An expression consisting of an operator acting on a single operand expression. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="UnaryExpression-unaryExpressionAssignmentsBefore"
        name="unaryExpressionAssignmentsBefore" constrainedElement="UnaryExpression"
        namespace="UnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnaryExpression-unaryExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="UnaryExpression-unaryExpressionAssignmentsBefore">
          <body>The assignments before the operand of a unary expression are the same as those
            before the unary expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnaryExpression-unaryExpressionAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnaryExpression-operator" name="operator"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnaryExpression-operator-_ownedComment.0"
          annotatedElement="UnaryExpression-operator">
          <body>The symbol representing the operator. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnaryExpression-operand" name="operand"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.144">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnaryExpression-operand-_ownedComment.0"
          annotatedElement="UnaryExpression-operand">
          <body>The expression giving the operand. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="UnaryExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="UnaryExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnaryExpression-updateAssignments-_ownedComment.0"
          annotatedElement="UnaryExpression-updateAssignments">
          <body>By default, the assignments after a unary expression are the same as those after its
            operand expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="UnaryExpression-updateAssignments-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TemplateParameterSubstitution"
      name="TemplateParameterSubstitution" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TemplateParameterSubstitution-_ownedComment.0"
        annotatedElement="TemplateParameterSubstitution">
        <body>A specification of the substitution of an argument type name for a template parameter.
        </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TemplateParameterSubstitution-parameterName"
        name="parameterName" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TemplateParameterSubstitution-parameterName-_ownedComment.0"
          annotatedElement="TemplateParameterSubstitution-parameterName">
          <body>The name of the template parameter. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TemplateParameterSubstitution-argumentName"
        name="argumentName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.104">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TemplateParameterSubstitution-argumentName-_ownedComment.0"
          annotatedElement="TemplateParameterSubstitution-argumentName">
          <body>The name of the argument type. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CastExpression" name="CastExpression"
      superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CastExpression-_ownedComment.0"
        annotatedElement="CastExpression">
        <body>An expression used to filter values by type. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CastExpression-castExpressionTypeDerivation"
        name="castExpressionTypeDerivation" constrainedElement="CastExpression"
        namespace="CastExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-castExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="CastExpression-castExpressionTypeDerivation">
          <body>The type of a cast expression is the referent of the given type name (if there is
            one). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CastExpression-castExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CastExpression-castExpressionLowerDerivation"
        name="castExpressionLowerDerivation" constrainedElement="CastExpression"
        namespace="CastExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-castExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="CastExpression-castExpressionLowerDerivation">
          <body>A cast expression has a multiplicity lower bound of 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CastExpression-castExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CastExpression-castExpressionUpperDerivation"
        name="castExpressionUpperDerivation" constrainedElement="CastExpression"
        namespace="CastExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-castExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="CastExpression-castExpressionUpperDerivation">
          <body>A cast expression has a multiplicity upper bound that is the same as the upper bound
            of its operand expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CastExpression-castExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CastExpression-castExpressionTypeResolution"
        name="castExpressionTypeResolution" constrainedElement="CastExpression"
        namespace="CastExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-castExpressionTypeResolution-_ownedComment.0"
          annotatedElement="CastExpression-castExpressionTypeResolution">
          <body>If the cast expression has a type name, then it must resolve to a classifier.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CastExpression-castExpressionTypeResolution-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CastExpression-castExpressionAssignmentsBefore"
        name="castExpressionAssignmentsBefore" constrainedElement="CastExpression"
        namespace="CastExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-castExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="CastExpression-castExpressionAssignmentsBefore">
          <body>The assignments before the operand of a cast expression are the same as those before
            the cast expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CastExpression-castExpressionAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CastExpression-operand" name="operand"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.116">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CastExpression-operand-_ownedComment.0"
          annotatedElement="CastExpression-operand">
          <body>The operand expression of the cast expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CastExpression-typeName" name="typeName"
        visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.96">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CastExpression-typeName-_ownedComment.0"
          annotatedElement="CastExpression-typeName">
          <body>The named type of the cast expression (if any) </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="CastExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="CastExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CastExpression-updateAssignments-_ownedComment.0"
          annotatedElement="CastExpression-updateAssignments">
          <body>The assignments after a cast expression are the same as those after its operand
            expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="CastExpression-updateAssignments-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralExpression" name="LiteralExpression"
      isAbstract="true" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralExpression-_ownedComment.0"
        annotatedElement="LiteralExpression">
        <body>An expression that comprises a primitive literal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LiteralExpression-literalExpressionTypeDerivation"
        name="literalExpressionTypeDerivation" constrainedElement="LiteralExpression"
        namespace="LiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LiteralExpression-literalExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="LiteralExpression-literalExpressionTypeDerivation">
          <body>The type of a literal expression is given by the type of the literal, as defined for
            each subclass below. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LiteralExpression-literalExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LiteralExpression-literalExpressionUpperDerivation"
        name="literalExpressionUpperDerivation" constrainedElement="LiteralExpression"
        namespace="LiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LiteralExpression-literalExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="LiteralExpression-literalExpressionUpperDerivation">
          <body>The multiplicity upper bound of a literal expression is always 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LiteralExpression-literalExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LiteralExpression-literalExpressionLowerDerivation"
        name="literalExpressionLowerDerivation" constrainedElement="LiteralExpression"
        namespace="LiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LiteralExpression-literalExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="LiteralExpression-literalExpressionLowerDerivation">
          <body>The multiplicity lower bound of a literal expression is always 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LiteralExpression-literalExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceExpressionList" name="SequenceExpressionList"
      superClass="SequenceElements">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceExpressionList-_ownedComment.0"
        annotatedElement="SequenceExpressionList">
        <body>A specification of the elements of a sequence using a list of expressions. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpressionList-sequenceExpressionListLowerDerivation"
        name="sequenceExpressionListLowerDerivation" constrainedElement="SequenceExpressionList"
        namespace="SequenceExpressionList">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpressionList-sequenceExpressionListLowerDerivation-_ownedComment.0"
          annotatedElement="SequenceExpressionList-sequenceExpressionListLowerDerivation">
          <body>The multiplicity lower bound of the elements of a sequence expression list is given
            by the sum of the lower bounds of each of the expressions in the list. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpressionList-sequenceExpressionListLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpressionList-sequenceExpressionListUpperDerivation"
        name="sequenceExpressionListUpperDerivation" constrainedElement="SequenceExpressionList"
        namespace="SequenceExpressionList">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpressionList-sequenceExpressionListUpperDerivation-_ownedComment.0"
          annotatedElement="SequenceExpressionList-sequenceExpressionListUpperDerivation">
          <body>The multiplicity lower bound of the elements of a sequence expression list is given
            by the sum of the lower bounds of each of the expressions in the list. If any of the
            expressions in the list have an unbounded upper bound, then the sequence expression list
            also has an unbounded upper bound. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpressionList-sequenceExpressionListUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpressionList-element"
        name="element" visibility="public" type="Expression" upper="*" isComposite="true"
        association="_packagedElement.131">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpressionList-element-_ownedComment.0"
          annotatedElement="SequenceExpressionList-element">
          <body>The list of expressions whose values determine the elements of the sequence. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceRange" name="SequenceRange"
      superClass="SequenceElements">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceRange-_ownedComment.0"
        annotatedElement="SequenceRange">
        <body>A specification of the elements of a sequence as a range of integers. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SequenceRange-sequenceRangeLowerDerivation"
        name="sequenceRangeLowerDerivation" constrainedElement="SequenceRange"
        namespace="SequenceRange">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceRange-sequenceRangeLowerDerivation-_ownedComment.0"
          annotatedElement="SequenceRange-sequenceRangeLowerDerivation">
          <body>The multiplicity lower bound of a sequence range is 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceRange-sequenceRangeLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SequenceRange-sequenceRangeUpperDerivation"
        name="sequenceRangeUpperDerivation" constrainedElement="SequenceRange"
        namespace="SequenceRange">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceRange-sequenceRangeUpperDerivation-_ownedComment.0"
          annotatedElement="SequenceRange-sequenceRangeUpperDerivation">
          <body>The multiplicity uper bound of a sequence range is * (since it is not possible, in
            general, to statically determine a more constrained upper bound). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceRange-sequenceRangeUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceRange-rangeLower" name="rangeLower"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.89">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceRange-rangeLower-_ownedComment.0"
          annotatedElement="SequenceRange-rangeLower">
          <body>The expression whose value gives the lower bound for the range. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceRange-rangeUpper" name="rangeUpper"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.142">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceRange-rangeUpper-_ownedComment.0"
          annotatedElement="SequenceRange-rangeUpper">
          <body>The expression whose value gives the upper bound for the range. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BinaryExpression" name="BinaryExpression"
      isAbstract="true" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BinaryExpression-_ownedComment.0"
        annotatedElement="BinaryExpression">
        <body>An expression consisting of an operator acting on two operand expressions. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BinaryExpression-binaryExpressionOperandMultiplicity"
        name="binaryExpressionOperandMultiplicity" constrainedElement="BinaryExpression"
        namespace="BinaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BinaryExpression-binaryExpressionOperandMultiplicity-_ownedComment.0"
          annotatedElement="BinaryExpression-binaryExpressionOperandMultiplicity">
          <body>The operands of a binary expression must both have a multiplicity upper bound of 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BinaryExpression-binaryExpressionOperandMultiplicity-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BinaryExpression-binaryExpressionOperandAssignments"
        name="binaryExpressionOperandAssignments" constrainedElement="BinaryExpression"
        namespace="BinaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BinaryExpression-binaryExpressionOperandAssignments-_ownedComment.0"
          annotatedElement="BinaryExpression-binaryExpressionOperandAssignments">
          <body>The assignments in the operand expressions of a binary expression must be valid (as
            determined by the validateAssignments helper operation). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BinaryExpression-binaryExpressionOperandAssignments-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BinaryExpression-operand1" name="operand1"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.147">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BinaryExpression-operand1-_ownedComment.0"
          annotatedElement="BinaryExpression-operand1">
          <body>The expression giving the first operand. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BinaryExpression-operand2" name="operand2"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.112">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BinaryExpression-operand2-_ownedComment.0"
          annotatedElement="BinaryExpression-operand2">
          <body>The expression giving the second operand. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BinaryExpression-operator" name="operator"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BinaryExpression-operator-_ownedComment.0"
          annotatedElement="BinaryExpression-operator">
          <body>The symbol representing the operator. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="BinaryExpression-validateAssignments"
        name="validateAssignments" visibility="public" class="BinaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BinaryExpression-validateAssignments-_ownedComment.0"
          annotatedElement="BinaryExpression-validateAssignments">
          <body>In general the assignments before the operand expressions of a binary expression are
            the same as those before the binary expression and, if an assignment for a name is
            changed in one operand expression, then the assignment for that name may not change in
            the other operand expression. (This is overridden for conditional logical expressions.)
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BinaryExpression-validateAssignments-_ownedParameter.0" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="BinaryExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="BinaryExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BinaryExpression-updateAssignments-_ownedComment.0"
          annotatedElement="BinaryExpression-updateAssignments">
          <body>The assignments after a binary expression include all the assignments before the
            expression that are not reassigned in either operand expression, plus the new
            assignments from each of the operand expressions. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BinaryExpression-updateAssignments-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LeftHandSide" name="LeftHandSide" isAbstract="true"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LeftHandSide-_ownedComment.0"
        annotatedElement="LeftHandSide">
        <body>The left-hand side of an assignment expression. NOTE: The derivations for the derived
          properties of LeftHandSide are specific to its various subclasses. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="LeftHandSide-leftHandSideIndexExpression"
        name="leftHandSideIndexExpression" constrainedElement="LeftHandSide"
        namespace="LeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LeftHandSide-leftHandSideIndexExpression-_ownedComment.0"
          annotatedElement="LeftHandSide-leftHandSideIndexExpression">
          <body>If a left-hand side has an index, then the index expression must have a multiplicity
            upper bound no greater than 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LeftHandSide-leftHandSideIndexExpression-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LeftHandSide-assignmentBefore"
        name="assignmentBefore" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.111">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LeftHandSide-assignmentBefore-_ownedComment.0"
          annotatedElement="LeftHandSide-assignmentBefore">
          <body/>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LeftHandSide-assignmentAfter"
        name="assignmentAfter" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.126">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LeftHandSide-assignmentAfter-_ownedComment.0"
          annotatedElement="LeftHandSide-assignmentAfter">
          <body>The assignments after the left-hand side. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LeftHandSide-index" name="index"
        visibility="public" type="Expression" lower="0" isComposite="true"
        association="_packagedElement.127">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LeftHandSide-index-_ownedComment.0"
          annotatedElement="LeftHandSide-index">
          <body>An optional expression that evaluates to an index into the values of an ordered
            sequence. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Expression" name="Expression" isAbstract="true"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-_ownedComment.0"
        annotatedElement="Expression">
        <body>A model of the common properties derived for any Alf expression. NOTE: The derivations
          for all properties of Expression except AssignmentsAfter are specific to its various
          subclasses. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Expression-expressionAssignmentsAfterDerivation"
        name="expressionAssignmentsAfterDerivation" constrainedElement="Expression"
        namespace="Expression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Expression-expressionAssignmentsAfterDerivation-_ownedComment.0"
          annotatedElement="Expression-expressionAssignmentsAfterDerivation">
          <body>The assignments after an expression are given by the result of the updateAssignments
            helper operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Expression-expressionAssignmentsAfterDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Expression-expressionUniqueAssignments"
        name="expressionUniqueAssignments" constrainedElement="Expression" namespace="Expression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Expression-expressionUniqueAssignments-_ownedComment.0"
          annotatedElement="Expression-expressionUniqueAssignments">
          <body>No name may be assigned more than once before or after an expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Expression-expressionUniqueAssignments-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-assignmentBefore"
        name="assignmentBefore" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.149">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-assignmentBefore-_ownedComment.0"
          annotatedElement="Expression-assignmentBefore">
          <body>The assigned sources for local names available lexically before this expression.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-assignmentAfter"
        name="assignmentAfter" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.74">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-assignmentAfter-_ownedComment.0"
          annotatedElement="Expression-assignmentAfter">
          <body>The assigned sources for local names available lexically after this expression. This
            includes not only any assignments made within the expression, but also any assignments
            that are unchanged from before the expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-upper" name="upper"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-upper-_ownedComment.0"
          annotatedElement="Expression-upper">
          <body>The statically determined upper bound of the multiplicity of this expression.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-UnlimitedNatural"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-lower" name="lower"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-lower-_ownedComment.0"
          annotatedElement="Expression-lower">
          <body>The statically determined lower bound of the multiplicity of this expression.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-type" name="type"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.94">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-type-_ownedComment.0"
          annotatedElement="Expression-type">
          <body>A reference to the element that specifies the statically determined type for this
            expression (if any). </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Expression-updateAssignments"
        name="updateAssignments" visibility="public" class="Expression">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-updateAssignments-_ownedComment.0"
          annotatedElement="Expression-updateAssignments">
          <body>Returns the assignments from before this expression updated for any assignments made
            in the expression. By default, this is the same set as the assignments before the
            expression. This operation is redefined only in subclasses of Expression for kinds of
            expressions that make assignments. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="Expression-updateAssignments-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OutputNamedExpression" name="OutputNamedExpression"
      superClass="NamedExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OutputNamedExpression-_ownedComment.0"
        annotatedElement="OutputNamedExpression">
        <body>A named argument expression for an output parameter. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OutputNamedExpression-outputNamedExpressionLeftHandSideDerivation"
        name="outputNamedExpressionLeftHandSideDerivation"
        constrainedElement="OutputNamedExpression" namespace="OutputNamedExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OutputNamedExpression-outputNamedExpressionLeftHandSideDerivation-_ownedComment.0"
          annotatedElement="OutputNamedExpression-outputNamedExpressionLeftHandSideDerivation">
          <body>The equivalent left-hand side for an output named expression depends on the kind of
            expression. If the expression is a name expression with no disambiguation, then the
            left-hand side is a name left-hand side with the name from the name expression. If the
            expression is a name expression that disambiguates to a feature reference, then the
            left-hand side is a feature left-hand side for that feature reference. If the expression
            is a property access expression, then the left-hand side is a feature left-hand side for
            the feature reference of the property access expression. If the expression is a sequence
            access expression, then the left-hand side is a name left-hand side or feature left-hand
            side, as above, depending on whether the primary expression of the sequence access
            expression is a name expression or property access expression, and an index given by the
            index expression of the sequence access expression. Otherwise the left-hand side is
            empty. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OutputNamedExpression-outputNamedExpressionLeftHandSideDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="OutputNamedExpression-outputNamedExpressionForm"
        name="outputNamedExpressionForm" constrainedElement="OutputNamedExpression"
        namespace="OutputNamedExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OutputNamedExpression-outputNamedExpressionForm-_ownedComment.0"
          annotatedElement="OutputNamedExpression-outputNamedExpressionForm">
          <body>The argument for an output parameter must be either be null, a name expression, a
            property access expression, or a sequence access expression whose primary expression is
            a name expression or a property access expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OutputNamedExpression-outputNamedExpressionForm-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OutputNamedExpression-leftHandSide"
        name="leftHandSide" visibility="public" type="LeftHandSide" isDerived="true"
        association="_packagedElement.134">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OutputNamedExpression-leftHandSide-_ownedComment.0"
          annotatedElement="OutputNamedExpression-leftHandSide">
          <body>The argument expression considered as an assignment left-hand side. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ConditionalTestExpression"
      name="ConditionalTestExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ConditionalTestExpression-_ownedComment.0"
        annotatedElement="ConditionalTestExpression">
        <body>An expression that uses the value of one operand expression to condition the
          evaluation of one of two other operand expressions. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionTypeDerivation"
        name="conditionalTestExpressionTypeDerivation"
        constrainedElement="ConditionalTestExpression" namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionTypeDerivation">
          <body>The type of a conditional-test operator expression is the effective common ancestor
            (if one exists) of the types of its second and third operand expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionLowerDerivation"
        name="conditionalTestExpressionLowerDerivation"
        constrainedElement="ConditionalTestExpression" namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionLowerDerivation">
          <body>The multiplicity lower bound of a conditional-test operator expression is the
            minimum of the multiplicity lower bounds of its second and third operand expressions.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionUpperDerivation"
        name="conditionalTestExpressionUpperDerivation"
        constrainedElement="ConditionalTestExpression" namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionUpperDerivation">
          <body>The multiplicity upper bound of a conditional-test operator expression is the
            maximum of the multiplicity upper bounds of its second and third operand expressions.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionCondition"
        name="conditionalTestExpressionCondition" constrainedElement="ConditionalTestExpression"
        namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionCondition-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionCondition">
          <body>The first operand expression of a conditional-test expression must be of type
            Boolean and have a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionCondition-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsBefore"
        name="conditionalTestExpressionAssignmentsBefore"
        constrainedElement="ConditionalTestExpression" namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionAssignmentsBefore">
          <body>The assignments before the first operand expression of a conditional-test expression
            are the same as those before the conditional-test expression. The assignments before the
            second and third operand expressions are the same as those after the first operand
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsAfter"
        name="conditionalTestExpressionAssignmentsAfter"
        constrainedElement="ConditionalTestExpression" namespace="ConditionalTestExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsAfter-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-conditionalTestExpressionAssignmentsAfter">
          <body>If a name is unassigned after the first operand expression and has an assigned
            source after one of the other operand expression, then it must have an assigned source
            after both of those expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalTestExpression-conditionalTestExpressionAssignmentsAfter-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConditionalTestExpression-operand1"
        name="operand1" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.119">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-operand1-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-operand1">
          <body>The first operand expression, which provides the condition to be tested. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConditionalTestExpression-operand2"
        name="operand2" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.143">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-operand2-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-operand2">
          <body>The second operand expression, to be evaluated if the condition is true. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConditionalTestExpression-operand3"
        name="operand3" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.140">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-operand3-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-operand3">
          <body>The third operand expression, to be evaluated if the condition is false. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ConditionalTestExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="ConditionalTestExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalTestExpression-updateAssignments-_ownedComment.0"
          annotatedElement="ConditionalTestExpression-updateAssignments">
          <body>Returns unchanged all assignments for local names that are not reassigned in either
            the second or third operand expressions. Any local names that have different assignments
            after the second and third operand expressions are adjusted to have the conditional-test
            expression as their assigned source. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ConditionalTestExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="UnboundedLiteralExpression"
      name="UnboundedLiteralExpression" superClass="LiteralExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="UnboundedLiteralExpression-_ownedComment.0"
        annotatedElement="UnboundedLiteralExpression">
        <body>An expression that comprises an unbounded value literal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="UnboundedLiteralExpression-unboundedLiteralExpressionDerivation"
        name="unboundedLiteralExpressionDerivation" constrainedElement="UnboundedLiteralExpression"
        namespace="UnboundedLiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnboundedLiteralExpression-unboundedLiteralExpressionDerivation-_ownedComment.0"
          annotatedElement="UnboundedLiteralExpression-unboundedLiteralExpressionDerivation">
          <body>The type of an unbounded literal expression is UnlimitedNatural. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnboundedLiteralExpression-unboundedLiteralExpressionDerivation-_specification"
          name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LogicalExpression" name="LogicalExpression"
      superClass="BinaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LogicalExpression-_ownedComment.0"
        annotatedElement="LogicalExpression">
        <body>A binary expression with a logical operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionTypeDerivation"
        name="logicalExpressionTypeDerivation" constrainedElement="LogicalExpression"
        namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionTypeDerivation">
          <body>A logical expression has type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionLowerDerivation"
        name="logicalExpressionLowerDerivation" constrainedElement="LogicalExpression"
        namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionLowerDerivation">
          <body>A logical expression has a multiplicity lower bound of 0 if the lower bound if
            either operand expression is 0 and 1 otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionUpperDerivation"
        name="logicalExpressionUpperDerivation" constrainedElement="LogicalExpression"
        namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionUpperDerivation">
          <body>A logical expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="LogicalExpression-logicalExpressionOperands"
        name="logicalExpressionOperands" constrainedElement="LogicalExpression"
        namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionOperands-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionOperands">
          <body>The operands of a logical expression must have type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionOperands-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion1Derivation"
        name="logicalExpressionIsBitStringConversion1Derivation" namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion1Derivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionIsBitStringConversion1Derivation">
          <body>BitString conversion is required if the first operand expression of a shift
            expression has type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion1Derivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion2Derivation"
        name="logicalExpressionIsBitStringConversion2Derivation" namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion2Derivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionIsBitStringConversion2Derivation">
          <body>BitString conversion is required if the second operand expression of a shift
            expression has type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionIsBitStringConversion2Derivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LogicalExpression-logicalExpressionIsBitWiseDerivation"
        name="logicalExpressionIsBitWiseDerivation" namespace="LogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-logicalExpressionIsBitWiseDerivation-_ownedComment.0"
          annotatedElement="LogicalExpression-logicalExpressionIsBitWiseDerivation">
          <body>A logical expression is bit-wise if the type of its first operand is not Boolean.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LogicalExpression-logicalExpressionIsBitWiseDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LogicalExpression-isBitWise" name="isBitWise"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LogicalExpression-isBitWise-_ownedComment.0"
          annotatedElement="LogicalExpression-isBitWise">
          <body>Whether this is a bit-wise logical operation on bit strings. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LogicalExpression-isBitStringConversion1"
        name="isBitStringConversion1" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-isBitStringConversion1-_ownedComment.0"
          annotatedElement="LogicalExpression-isBitStringConversion1">
          <body>Whether the first operand expression requires BitString conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LogicalExpression-isBitStringConversion2"
        name="isBitStringConversion2" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LogicalExpression-isBitStringConversion2-_ownedComment.0"
          annotatedElement="LogicalExpression-isBitStringConversion2">
          <body>Whether the second operand expression requires BitString conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="FeatureReference" name="FeatureReference"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureReference-_ownedComment.0"
        annotatedElement="FeatureReference">
        <body>A reference to a structural or behavioral feature of the type of its target expression
          or a binary association end the opposite end of which is typed by the type of its target
          expression. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureReference-featureReferenceReferentDerivation"
        name="featureReferenceReferentDerivation" constrainedElement="FeatureReference"
        namespace="FeatureReference">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureReference-featureReferenceReferentDerivation-_ownedComment.0"
          annotatedElement="FeatureReference-featureReferenceReferentDerivation">
          <body>The features referenced by a feature reference include the features of the type of
            the target expression and the association ends of any binary associations whose opposite
            ends are typed by the type of the target expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureReference-featureReferenceReferentDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="FeatureReference-featureReferenceTargetType"
        name="featureReferenceTargetType" constrainedElement="FeatureReference"
        namespace="FeatureReference">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureReference-featureReferenceTargetType-_ownedComment.0"
          annotatedElement="FeatureReference-featureReferenceTargetType">
          <body>The target expression of the feature reference may not be untyped, nor may it have a
            primitive or enumeration type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureReference-featureReferenceTargetType-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FeatureReference-expression"
        name="expression" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.129">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureReference-expression-_ownedComment.0"
          annotatedElement="FeatureReference-expression">
          <body>The target expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FeatureReference-referent" name="referent"
        visibility="public" type="ElementReference" upper="*" isDerived="true"
        association="_packagedElement.87">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureReference-referent-_ownedComment.0"
          annotatedElement="FeatureReference-referent">
          <body>The features referenced by this feature reference. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FeatureReference-nameBinding"
        name="nameBinding" visibility="public" type="NameBinding" isComposite="true"
        association="_packagedElement.141">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureReference-nameBinding-_ownedComment.0"
          annotatedElement="FeatureReference-nameBinding">
          <body>The name of the feature. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExtentOrExpression" name="ExtentOrExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExtentOrExpression-_ownedComment.0"
        annotatedElement="ExtentOrExpression">
        <body>The target of a sequence operation, reduction or expansion expression, which may be
          either a primary expression or a class name denoting the class extent. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ExtentOrExpression-extentOrExpressionExpressionDerivation"
        name="extentOrExpressionExpressionDerivation" constrainedElement="ExtentOrExpression"
        namespace="ExtentOrExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExtentOrExpression-extentOrExpressionExpressionDerivation-_ownedComment.0"
          annotatedElement="ExtentOrExpression-extentOrExpressionExpressionDerivation">
          <body>The effective expression for the target is the parsed primary expression, if the
            target is not a qualified name, a name expression, if the target is a qualified name
            other than a class name, or a class extent expression, if the target is the qualified
            name of a class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ExtentOrExpression-extentOrExpressionExpressionDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExtentOrExpression-name" name="name"
        visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.133">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExtentOrExpression-name-_ownedComment.0"
          annotatedElement="ExtentOrExpression-name">
          <body>If the target is a qualified name, then that name, before it is disambiguated into
            either a name expression or a class name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExtentOrExpression-expression"
        name="expression" visibility="public" type="Expression" isDerived="true"
        association="_packagedElement.135">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExtentOrExpression-expression-_ownedComment.0"
          annotatedElement="ExtentOrExpression-expression">
          <body>The effective expression for the target. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExtentOrExpression-nonNameExpression"
        name="nonNameExpression" visibility="public" type="Expression" lower="0" isComposite="true"
        association="_packagedElement.99">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExtentOrExpression-nonNameExpression-_ownedComment.0"
          annotatedElement="ExtentOrExpression-nonNameExpression">
          <body>The target primary expression, if it is not a qualified name. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ConditionalLogicalExpression"
      name="ConditionalLogicalExpression" superClass="BinaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ConditionalLogicalExpression-_ownedComment.0"
        annotatedElement="ConditionalLogicalExpression">
        <body>A binary expression with a conditional logical expression, for which the evaluation of
          the second operand expression is conditioned on the result of evaluating the first operand
          expression. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionTypeDerivation"
        name="conditionalLogicalExpressionTypeDerivation"
        constrainedElement="ConditionalLogicalExpression" namespace="ConditionalLogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-conditionalLogicalExpressionTypeDerivation">
          <body>A conditional logical expression has type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionLower"
        name="conditionalLogicalExpressionLower" constrainedElement="ConditionalLogicalExpression"
        namespace="ConditionalLogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionLower-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-conditionalLogicalExpressionLower">
          <body>A conditional logical expression has a multiplicity lower bound of 0 if the lower
            bound if either operand expression is 0 and 1 otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionLower-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionUpper"
        name="conditionalLogicalExpressionUpper" constrainedElement="ConditionalLogicalExpression"
        namespace="ConditionalLogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionUpper-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-conditionalLogicalExpressionUpper">
          <body>A conditional logical expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionUpper-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionOperands"
        name="conditionalLogicalExpressionOperands"
        constrainedElement="ConditionalLogicalExpression" namespace="ConditionalLogicalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionOperands-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-conditionalLogicalExpressionOperands">
          <body>The operands of a conditional logical expression must have type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConditionalLogicalExpression-conditionalLogicalExpressionOperands-_specification"
          name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="ConditionalLogicalExpression-validateAssignments" name="validateAssignments"
        visibility="public" class="ConditionalLogicalExpression"
        redefinedOperation="BinaryExpression-validateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-validateAssignments-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-validateAssignments">
          <body>The assignments before the first operand expression of a conditional logical
            expression are the same as those before the conditional logical expression. The
            assignments before the second operand expression are the same as those after the first
            operand expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ConditionalLogicalExpression-validateAssignments-_ownedParameter.0" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="ConditionalLogicalExpression-updateAssignments" name="updateAssignments"
        visibility="public" class="ConditionalLogicalExpression"
        redefinedOperation="BinaryExpression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConditionalLogicalExpression-updateAssignments-_ownedComment.0"
          annotatedElement="ConditionalLogicalExpression-updateAssignments">
          <body>If a name has the same assigned source after the second operand expression as before
            it, then that is its assigned source after the conditional logical expression. If a name
            is unassigned before the second operand expression, then it is considered unassigned
            after the conditional logical expression, even if it has an assigned source after the
            second operand expression. Otherwise its assigned source after the conditional logical
            expression is the conditional logical expression itself. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ConditionalLogicalExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LinkOperationExpression"
      name="LinkOperationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LinkOperationExpression-_ownedComment.0"
        annotatedElement="LinkOperationExpression">
        <body>An expression used to create or destroy the links of an association. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionIsCreationDerivation"
        name="linkOperationExpressionIsCreationDerivation"
        constrainedElement="LinkOperationExpression" namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionIsCreationDerivation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionIsCreationDerivation">
          <body>A link operation expression is for link creation if its operation is "createLink".
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionIsCreationDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionIsClearDerivation"
        name="linkOperationExpressionIsClearDerivation" constrainedElement="LinkOperationExpression"
        namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionIsClearDerivation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionIsClearDerivation">
          <body>A link operation expression is for clearing an association if the operation is
            "clearAssoc". </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionIsClearDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionReferentDerivation"
        name="linkOperationExpressionReferentDerivation"
        constrainedElement="LinkOperationExpression" namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionReferentDerivation">
          <body>The referent for a link operation expression is the named association. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionFeatureDerivation"
        name="linkOperationExpressionFeatureDerivation" constrainedElement="LinkOperationExpression"
        namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionFeatureDerivation">
          <body>There is no feature for a link operation expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionAssociationReference"
        name="linkOperationExpressionAssociationReference"
        constrainedElement="LinkOperationExpression" namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionAssociationReference-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionAssociationReference">
          <body>The qualified name of a link operation expression must resolve to a single
            association. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionAssociationReference-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LinkOperationExpression-linkOperationExpressionArgumentCompatibility"
        name="linkOperationExpressionArgumentCompatibility"
        constrainedElement="LinkOperationExpression" namespace="LinkOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-linkOperationExpressionArgumentCompatibility-_ownedComment.0"
          annotatedElement="LinkOperationExpression-linkOperationExpressionArgumentCompatibility">
          <body>Each argument expression must be assignable to its corresponding expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LinkOperationExpression-linkOperationExpressionArgumentCompatibility-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LinkOperationExpression-operation"
        name="operation" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-operation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-operation">
          <body>The name of the link operation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LinkOperationExpression-isCreation"
        name="isCreation" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-isCreation-_ownedComment.0"
          annotatedElement="LinkOperationExpression-isCreation">
          <body>Whether the operation is for link creation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LinkOperationExpression-isClear"
        name="isClear" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-isClear-_ownedComment.0"
          annotatedElement="LinkOperationExpression-isClear">
          <body>Whether the operation is clearing the association. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LinkOperationExpression-associationName"
        name="associationName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.113">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-associationName-_ownedComment.0"
          annotatedElement="LinkOperationExpression-associationName">
          <body>The qualified name of the association whose links are being acted on. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LinkOperationExpression-parameterElements"
        name="parameterElements" visibility="public" class="LinkOperationExpression"
        redefinedOperation="InvocationExpression-parameterElements">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LinkOperationExpression-parameterElements-_ownedComment.0"
          annotatedElement="LinkOperationExpression-parameterElements">
          <body>For a clear association operation, returns a single, typeless parameter. Otherwise,
            returns the ends of the named association. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="LinkOperationExpression-parameterElements-_ownedParameter.0" name=""
          visibility="public" type="ElementReference" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceElements" name="SequenceElements"
      isAbstract="true" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceElements-_ownedComment.0"
        annotatedElement="SequenceElements">
        <body>A specification of the elements of a sequence. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceElements-upper" name="upper"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceElements-upper-_ownedComment.0"
          annotatedElement="SequenceElements-upper">
          <body>The multiplicity upper bound of the elements of the sequence. The derivation for
            this property is given in the subclasses of SequenceElements. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-UnlimitedNatural"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceElements-lower" name="lower"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceElements-lower-_ownedComment.0"
          annotatedElement="SequenceElements-lower">
          <body>The multiplicity lower bound of the elements of the sequence. The derivation for
            this property is given in the subclasses of SequenceElements. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Integer"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SuperInvocationExpression"
      name="SuperInvocationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SuperInvocationExpression-_ownedComment.0"
        annotatedElement="SuperInvocationExpression">
        <body>An invocation expression used to invoke an operation of a superclass. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionReferentDerivation"
        name="superInvocationExpressionReferentDerivation"
        constrainedElement="SuperInvocationExpression" namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionReferentDerivation">
          <body>The referent of a super invocation expression is the method behavior of the
            operation identified using the overloading resolution rules. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionFeatureDerivation"
        name="superInvocationExpressionFeatureDerivation"
        constrainedElement="SuperInvocationExpression" namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionFeatureDerivation">
          <body>There is no feature for a super invocation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionQualification"
        name="superInvocationExpressionQualification" constrainedElement="SuperInvocationExpression"
        namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionQualification-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionQualification">
          <body>If the target has a qualification, then this must resolve to one of the superclasses
            of the current context class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionQualification-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionImplicitTarget"
        name="superInvocationExpressionImplicitTarget"
        constrainedElement="SuperInvocationExpression" namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionImplicitTarget-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionImplicitTarget">
          <body>If the target is empty, the referent must be the method for a constructor operation.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionImplicitTarget-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionConstructorCall"
        name="superInvocationExpressionConstructorCall"
        constrainedElement="SuperInvocationExpression" namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionConstructorCall-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionConstructorCall">
          <body>If the referent is the method of a constructor operation, the super invocation
            expression must occur in an expression statement at the start of the definition for the
            method of a constructor operation, such that any statements preceding it are also super
            constructor invocations. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionConstructorCall-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionDestructorCall"
        name="superInvocationExpressionDestructorCall"
        constrainedElement="SuperInvocationExpression" namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionDestructorCall-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionDestructorCall">
          <body>If the referent is the method of a destructor operation, the super invocation
            expression must occur in an within the method of a destructor operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionDestructorCall-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SuperInvocationExpression-superInvocationExpressionOperation"
        name="superInvocationExpressionOperation" constrainedElement="SuperInvocationExpression"
        namespace="SuperInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-superInvocationExpressionOperation-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-superInvocationExpressionOperation">
          <body>It must be possible to identify a single valid operation denoted by the target of a
            super invocation expression that satisfies the overloading resolution rules. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SuperInvocationExpression-superInvocationExpressionOperation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SuperInvocationExpression-target"
        name="target" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.86">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SuperInvocationExpression-target-_ownedComment.0"
          annotatedElement="SuperInvocationExpression-target">
          <body>The name of the operation to be invoked, optionally qualified with the name of the
            appropriate superclass. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ShiftExpression" name="ShiftExpression"
      superClass="BinaryExpression">
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ShiftExpression-shiftExpressionTypeDerivation"
        name="shiftExpressionTypeDerivation" constrainedElement="LogicalExpression"
        namespace="ShiftExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-shiftExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ShiftExpression-shiftExpressionTypeDerivation">
          <body>A shift expression has type BitString. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ShiftExpression-shiftExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ShiftExpression-shiftExpressionLowerDerivation"
        name="shiftExpressionLowerDerivation" constrainedElement="LogicalExpression"
        namespace="ShiftExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-shiftExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ShiftExpression-shiftExpressionLowerDerivation">
          <body>A shift expression has a multiplicity lower bound of 0 if the lower bound if either
            operand expression is 0 and 1 otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ShiftExpression-shiftExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ShiftExpression-shiftExpressionUpperDerivation"
        name="shiftExpressionUpperDerivation" constrainedElement="LogicalExpression"
        namespace="ShiftExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-shiftExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ShiftExpression-shiftExpressionUpperDerivation">
          <body>A shift expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ShiftExpression-shiftExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ShiftExpression-shiftExpressionOperands"
        name="shiftExpressionOperands" constrainedElement="LogicalExpression"
        namespace="ShiftExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-shiftExpressionOperands-_ownedComment.0"
          annotatedElement="ShiftExpression-shiftExpressionOperands">
          <body>The operands of a shift expression must have type BitString or Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ShiftExpression-shiftExpressionOperands-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ShiftExpression-shiftExpressionIsBitStringConversionDerivation"
        name="shiftExpressionIsBitStringConversionDerivation" namespace="ShiftExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-shiftExpressionIsBitStringConversionDerivation-_ownedComment.0"
          annotatedElement="ShiftExpression-shiftExpressionIsBitStringConversionDerivation">
          <body>BitString conversion is required if the first operand expression of a shift
            expression has type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ShiftExpression-shiftExpressionIsBitStringConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ShiftExpression-isBitStringConversion"
        name="isBitStringConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ShiftExpression-isBitStringConversion-_ownedComment.0"
          annotatedElement="ShiftExpression-isBitStringConversion">
          <body>Whether the first operand expression requires BitString conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NamedTuple" name="NamedTuple" superClass="Tuple">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NamedTuple-_ownedComment.0"
        annotatedElement="NamedTuple">
        <body>A tuple in which the arguments are matched to parameters by name. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedTuple-namedExpression"
        name="namedExpression" visibility="public" type="NamedExpression" isOrdered="true" upper="*"
        isComposite="true" association="_packagedElement.106">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedTuple-namedExpression-_ownedComment.0"
          annotatedElement="NamedTuple-namedExpression">
          <body>The argument expressions for this tuple paired with the corresponding parameter
            names. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="IsolationExpression" name="IsolationExpression"
      superClass="UnaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="IsolationExpression-_ownedComment.0"
        annotatedElement="IsolationExpression">
        <body>An expression used to evaluate its operand expression in isolation. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsolationExpression-isolationExpressionTypeDerivation"
        name="isolationExpressionTypeDerivation" constrainedElement="IsolationExpression"
        namespace="IsolationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsolationExpression-isolationExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="IsolationExpression-isolationExpressionTypeDerivation">
          <body>An isolation expression has the type of its operand expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsolationExpression-isolationExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsolationExpression-isolationExpressionLowerDerivation"
        name="isolationExpressionLowerDerivation" constrainedElement="IsolationExpression"
        namespace="IsolationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsolationExpression-isolationExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="IsolationExpression-isolationExpressionLowerDerivation">
          <body>An isolation expression has the multiplicity lower bound of its operand expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsolationExpression-isolationExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsolationExpression-isolationExpressionUpperDerivation"
        name="isolationExpressionUpperDerivation" constrainedElement="IsolationExpression"
        namespace="IsolationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsolationExpression-isolationExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="IsolationExpression-isolationExpressionUpperDerivation">
          <body>An isolation expression has the multiplicity upper bound of its operand expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsolationExpression-isolationExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InstanceCreationExpression"
      name="InstanceCreationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceCreationExpression-_ownedComment.0"
        annotatedElement="InstanceCreationExpression">
        <body>An expression used to create a new instance of a class or data type. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionIsObjectCreationDerivation"
        name="instanceCreationExpressionIsObjectCreationDerivation"
        constrainedElement="InstanceCreationExpression" namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionIsObjectCreationDerivation-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionIsObjectCreationDerivation">
          <body>An instance creation expression is an object creation if its referent is not a data
            type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionIsObjectCreationDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionIsConstructorlessDerivation"
        name="instanceCreationExpressionIsConstructorlessDerivation"
        constrainedElement="InstanceCreationExpression" namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionIsConstructorlessDerivation-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionIsConstructorlessDerivation">
          <body>An instance creation expression is constructorless if its referent is a class.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionIsConstructorlessDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionReferentDerivation"
        name="instanceCreationExpressionReferentDerivation"
        constrainedElement="InstanceCreationExpression" namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionReferentDerivation">
          <body>The referent of an instance creation expression is the constructor operation, class
            or data type to which the constructor name resolves. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionFeatureDerivation"
        name="instanceCreationExpressionFeatureDerivation"
        constrainedElement="InstanceCreationExpression" namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionFeatureDerivation">
          <body>There is no feature for an instance creation expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionConstructor"
        name="instanceCreationExpressionConstructor" constrainedElement="InstanceCreationExpression"
        namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionConstructor-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionConstructor">
          <body>The constructor name must resolve to a constructor operation (that is compatible
            with the tuple argument expressions), a class or a data type, but not both a class and a
            data type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionConstructor-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionTuple"
        name="instanceCreationExpressionTuple" constrainedElement="InstanceCreationExpression"
        namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionTuple-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionTuple">
          <body>If the expression is constructorless, then its tuple must be empty. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionTuple-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InstanceCreationExpression-instanceCreationExpressionDataTypeCompatibility"
        name="instanceCreationExpressionDataTypeCompatibility"
        constrainedElement="InstanceCreationExpression" namespace="InstanceCreationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionDataTypeCompatibility-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-instanceCreationExpressionDataTypeCompatibility">
          <body>If an instance creation expression is a data value creation (not an object
            creation), then the tuple argument expressions are matched with the attributes of the
            named type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InstanceCreationExpression-instanceCreationExpressionDataTypeCompatibility-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceCreationExpression-isConstructorless"
        name="isConstructorless" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-isConstructorless-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-isConstructorless">
          <body>Whether this is a constructorless object creation expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceCreationExpression-isObjectCreation"
        name="isObjectCreation" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-isObjectCreation-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-isObjectCreation">
          <body>Whether this is an object creation expression or a data value creation expression.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceCreationExpression-constructor"
        name="constructor" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.122">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-constructor-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-constructor">
          <body>The name of the class constructor operation to be invoked or the name of a class or
            data type. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="InstanceCreationExpression-parameterElements" name="parameterElements"
        visibility="public" class="InstanceCreationExpression"
        redefinedOperation="InvocationExpression-parameterElements">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InstanceCreationExpression-parameterElements-_ownedComment.0"
          annotatedElement="InstanceCreationExpression-parameterElements">
          <body>Returns the parameters of a constructor operation or the attributes of a data type,
            or an empty set for a constructorless instance creation. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="InstanceCreationExpression-parameterElements-_ownedParameter.0" name=""
          visibility="public" type="ElementReference" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BooleanLiteralExpression"
      name="BooleanLiteralExpression" superClass="LiteralExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BooleanLiteralExpression-_ownedComment.0"
        annotatedElement="BooleanLiteralExpression">
        <body>An expression that comprises a Boolean literal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BooleanLiteralExpression-booleanLiteralExpressionTypeDerivation"
        name="booleanLiteralExpressionTypeDerivation" constrainedElement="BooleanLiteralExpression"
        namespace="BooleanLiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanLiteralExpression-booleanLiteralExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="BooleanLiteralExpression-booleanLiteralExpressionTypeDerivation">
          <body>The type of a boolean literal expression is Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BooleanLiteralExpression-booleanLiteralExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BooleanLiteralExpression-image" name="image"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanLiteralExpression-image-_ownedComment.0"
          annotatedElement="BooleanLiteralExpression-image">
          <body>The textual image of the literal token for this expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="FeatureLeftHandSide" name="FeatureLeftHandSide"
      superClass="LeftHandSide">
      <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureLeftHandSide-_ownedComment.0"
        annotatedElement="FeatureLeftHandSide">
        <body>A left-hand side that is a property reference. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentBeforeDerivation"
        name="featureLeftHandSideAssignmentBeforeDerivation"
        constrainedElement="FeatureLeftHandSide" namespace="FeatureLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentBeforeDerivation-_ownedComment.0"
          annotatedElement="FeatureLeftHandSide-featureLeftHandSideAssignmentBeforeDerivation">
          <body>The assignments before the expression of the feature reference of a feature
            left-hand side are the assignments before the feature left-hand side. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentBeforeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentAfterDerivation"
        name="featureLeftHandSideAssignmentAfterDerivation" constrainedElement="FeatureLeftHandSide"
        namespace="FeatureLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentAfterDerivation-_ownedComment.0"
          annotatedElement="FeatureLeftHandSide-featureLeftHandSideAssignmentAfterDerivation">
          <body>The assignments after a feature left-hand side are the assignments after the
            expression of the feature reference or, if there is an index, those after the index
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentAfterDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureLeftHandSide-featureLeftHandSideFeatureExpression"
        name="featureLeftHandSideFeatureExpression" constrainedElement="FeatureLeftHandSide"
        namespace="FeatureLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideFeatureExpression-_ownedComment.0"
          annotatedElement="FeatureLeftHandSide-featureLeftHandSideFeatureExpression">
          <body>The expression of the feature reference of a feature left-hand side must have a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideFeatureExpression-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentsBefore"
        name="featureLeftHandSideAssignmentsBefore" constrainedElement="FeatureLeftHandSide"
        namespace="FeatureLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentsBefore-_ownedComment.0"
          annotatedElement="FeatureLeftHandSide-featureLeftHandSideAssignmentsBefore">
          <body>If a feature left-hand side has an index, then the assignments before the index
            expression are the assignments after the expression of the feature reference. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureLeftHandSide-featureLeftHandSideAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FeatureLeftHandSide-feature" name="feature"
        visibility="public" type="FeatureReference" isComposite="true"
        association="_packagedElement.145">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureLeftHandSide-feature-_ownedComment.0"
          annotatedElement="FeatureLeftHandSide-feature">
          <body>The structural feature being assigned. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NamedExpression" name="NamedExpression"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NamedExpression-_ownedComment.0"
        annotatedElement="NamedExpression">
        <body>A pairing of a parameter name and an argument expression in a tuple. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NamedExpression-namedExpressionIsCollectionConversionDerivation"
        name="namedExpressionIsCollectionConversionDerivation" namespace="NamedExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamedExpression-namedExpressionIsCollectionConversionDerivation-_ownedComment.0"
          annotatedElement="NamedExpression-namedExpressionIsCollectionConversionDerivation">
          <body>Collection conversion is required if the type of the corresponding parameter is a
            collection class and the type of the argument expression is not. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NamedExpression-namedExpressionIsCollectionConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NamedExpression-namedExpressionIsBitStringConversionDerivation"
        name="namedExpressionIsBitStringConversionDerivation" namespace="NamedExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamedExpression-namedExpressionIsBitStringConversionDerivation-_ownedComment.0"
          annotatedElement="NamedExpression-namedExpressionIsBitStringConversionDerivation">
          <body>Bit string conversion is required if the type of the type of the corresponding
            parameter is BitString, or a collection class instantiated with a BitString type, and
            the type of the argument expression is not BitString. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NamedExpression-namedExpressionIsBitStringConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedExpression-name" name="name"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedExpression-name-_ownedComment.0"
          annotatedElement="NamedExpression-name">
          <body>The parameter name. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedExpression-expression" name="expression"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.101">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedExpression-expression-_ownedComment.0"
          annotatedElement="NamedExpression-expression">
          <body>The argument expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedExpression-index" name="index"
        visibility="public" type="Expression" lower="0" isComposite="true"
        association="_packagedElement.148">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedExpression-index-_ownedComment.0"
          annotatedElement="NamedExpression-index">
          <body>An expression whose value gives an index into an ordered parameter. (This is only
            used in link operation expressions.) </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedExpression-isCollectionConversion"
        name="isCollectionConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamedExpression-isCollectionConversion-_ownedComment.0"
          annotatedElement="NamedExpression-isCollectionConversion">
          <body>Whether the argument expression requires collection conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedExpression-isBitStringConverstion"
        name="isBitStringConverstion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamedExpression-isBitStringConverstion-_ownedComment.0"
          annotatedElement="NamedExpression-isBitStringConverstion">
          <body>Whether the argument expression requires bit string conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NameLeftHandSide" name="NameLeftHandSide"
      superClass="LeftHandSide">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NameLeftHandSide-_ownedComment.0"
        annotatedElement="NameLeftHandSide">
        <body>A left-hand side that is a name. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentAfterDerivation"
        name="nameLeftHandSideAssignmentAfterDerivation" constrainedElement="NameLeftHandSide"
        namespace="NameLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentAfterDerivation-_ownedComment.0"
          annotatedElement="NameLeftHandSide-nameLeftHandSideAssignmentAfterDerivation">
          <body>The assignments after a name left-hand side are the same as the assignments before.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentAfterDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameLeftHandSide-nameLeftHandSideTargetAssignment"
        name="nameLeftHandSideTargetAssignment" constrainedElement="NameLeftHandSide"
        namespace="NameLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameLeftHandSide-nameLeftHandSideTargetAssignment-_ownedComment.0"
          annotatedElement="NameLeftHandSide-nameLeftHandSideTargetAssignment">
          <body>The target of a name left hand side may not already have an assigned source that is
            a loop variable definition, an annotation, a sequence expansion expression or a
            parameter that is an in parameter. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameLeftHandSide-nameLeftHandSideTargetAssignment-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentsBefore"
        name="nameLeftHandSideAssignmentsBefore" constrainedElement="NameLeftHandSide"
        namespace="NameLeftHandSide">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentsBefore-_ownedComment.0"
          annotatedElement="NameLeftHandSide-nameLeftHandSideAssignmentsBefore">
          <body>If a name left-hand side has an index, then the target name must already have an
            assigned source and the assignments before the index expression are the assignments
            before the left-hand side. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameLeftHandSide-nameLeftHandSideAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameLeftHandSide-target" name="target"
        visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.78">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameLeftHandSide-target-_ownedComment.0"
          annotatedElement="NameLeftHandSide-target">
          <body>The name that is the target of the assignment. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SelectOrRejectExpression"
      name="SelectOrRejectExpression" superClass="SequenceExpansionExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SelectOrRejectExpression-_ownedComment.0"
        annotatedElement="SelectOrRejectExpression">
        <body>A sequence expansion expression with a select or reject operation. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SelectOrRejectExpression-selectOrRejectExpressionTypeDerivation"
        name="selectOrRejectExpressionTypeDerivation" constrainedElement="SelectOrRejectExpression"
        namespace="SelectOrRejectExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="SelectOrRejectExpression-selectOrRejectExpressionTypeDerivation">
          <body>A select or reject expression has the same type as its primary expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SelectOrRejectExpression-selectOrRejectExpressionLowerDerivation"
        name="selectOrRejectExpressionLowerDerivation" constrainedElement="SelectOrRejectExpression"
        namespace="SelectOrRejectExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="SelectOrRejectExpression-selectOrRejectExpressionLowerDerivation">
          <body>A select or reject expression has a multiplicity lower bound of 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SelectOrRejectExpression-selectOrRejectExpressionUpperDerivation"
        name="selectOrRejectExpressionUpperDerivation" constrainedElement="SelectOrRejectExpression"
        namespace="SelectOrRejectExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="SelectOrRejectExpression-selectOrRejectExpressionUpperDerivation">
          <body>A select or reject expression has a multiplicity upper bound of *. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SelectOrRejectExpression-selectOrRejectExpressionArgument"
        name="selectOrRejectExpressionArgument" constrainedElement="SelectOrRejectExpression"
        namespace="SelectOrRejectExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionArgument-_ownedComment.0"
          annotatedElement="SelectOrRejectExpression-selectOrRejectExpressionArgument">
          <body>The argument of a select or reject expression must have type Boolean and a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SelectOrRejectExpression-selectOrRejectExpressionArgument-_specification" name=""
        />
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceExpansionExpression"
      name="SequenceExpansionExpression" isAbstract="true" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceExpansionExpression-_ownedComment.0"
        annotatedElement="SequenceExpansionExpression">
        <body>An expression used to carry out one of a predefined set of operations over each of the
          elements in a sequence. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableSourceDerivation"
        name="sequenceExpansionExpressionVariableSourceDerivation"
        constrainedElement="SequenceExpansionExpression" namespace="SequenceExpansionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableSourceDerivation-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-sequenceExpansionExpressionVariableSourceDerivation">
          <body>The assigned source for the expansion variable of a sequence expansion expression is
            the expression itself. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableSourceDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforePrimary"
        name="sequenceExpansionExpressionAssignmentsBeforePrimary"
        constrainedElement="SequenceExpansionExpression" namespace="SequenceExpansionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforePrimary-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforePrimary">
          <body>The assignments before the primary expression of a sequence expansion expression are
            the same as the assignments before the sequence expansion expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforePrimary-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforeArgument"
        name="sequenceExpansionExpressionAssignmentsBeforeArgument"
        constrainedElement="SequenceExpansionExpression" namespace="SequenceExpansionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforeArgument-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforeArgument">
          <body>The assignments before the argument expression of a sequence expansion expression
            include those after the primary expression plus one for the expansion variable. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionAssignmentsBeforeArgument-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableName"
        name="sequenceExpansionExpressionVariableName"
        constrainedElement="SequenceExpansionExpression" namespace="SequenceExpansionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableName-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-sequenceExpansionExpressionVariableName">
          <body>The expansion variable name may not conflict with any name already assigned after
            the primary expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableName-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableAssignment"
        name="sequenceExpansionExpressionVariableAssignment"
        constrainedElement="SequenceExpansionExpression" namespace="SequenceExpansionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableAssignment-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-sequenceExpansionExpressionVariableAssignment">
          <body>The expansion variable may not be assigned within the argument expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceExpansionExpression-sequenceExpansionExpressionVariableAssignment-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpansionExpression-operation"
        name="operation" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-operation-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-operation">
          <body>The name of the operation to be carried out. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpansionExpression-variable"
        name="variable" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-variable-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-variable">
          <body>The name of the expansion variable available as a local name within the argument
            expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpansionExpression-variableSource"
        name="variableSource" visibility="public" type="AssignedSource" isDerived="true"
        association="_packagedElement.109">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-variableSource-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-variableSource">
          <body>The assigned source for the expansion variable within the argument expression. The
            source is actually the sequence expansion expression itself. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpansionExpression-argument"
        name="argument" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.95">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-argument-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-argument">
          <body>The argument expression. The exact form required for this expression depends on
            which expansion operation is being carried out. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceExpansionExpression-primary"
        name="primary" visibility="public" type="ExtentOrExpression" isComposite="true"
        association="_packagedElement.125">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-primary-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-primary">
          <body>The class name or primary expression that evaluates to the sequence to be acted on.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="SequenceExpansionExpression-updateAssignments" name="updateAssignments"
        visibility="public" class="SequenceExpansionExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceExpansionExpression-updateAssignments-_ownedComment.0"
          annotatedElement="SequenceExpansionExpression-updateAssignments">
          <body>The assignments after a sequence expansion expression are the same as after its
            primary expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SequenceExpansionExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BooleanUnaryExpression" name="BooleanUnaryExpression"
      superClass="UnaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BooleanUnaryExpression-_ownedComment.0"
        annotatedElement="BooleanUnaryExpression">
        <body>A unary expression with a Boolean operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BooleanUnaryExpression-booleanUnaryExpressionTypeDerivation"
        name="booleanUnaryExpressionTypeDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BooleanUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="BooleanUnaryExpression-booleanUnaryExpressionTypeDerivation">
          <body>A Boolean unary expression has type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BooleanUnaryExpression-booleanUnaryExpressionLowerDerivation"
        name="booleanUnaryExpressionLowerDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BooleanUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="BooleanUnaryExpression-booleanUnaryExpressionLowerDerivation">
          <body>A Boolean unary expression has the same multiplicity lower bound as its operand
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BooleanUnaryExpression-booleanUnaryExpressionUpperDerivation"
        name="booleanUnaryExpressionUpperDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BooleanUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="BooleanUnaryExpression-booleanUnaryExpressionUpperDerivation">
          <body>A Boolean unary expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BooleanUnaryExpression-booleanUnaryExpressionOperand"
        name="booleanUnaryExpressionOperand" constrainedElement="BooleanUnaryExpression"
        namespace="BooleanUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionOperand-_ownedComment.0"
          annotatedElement="BooleanUnaryExpression-booleanUnaryExpressionOperand">
          <body>The operand expression of a Boolean unary expression must have type Boolean and a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BooleanUnaryExpression-booleanUnaryExpressionOperand-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="IsUniqueExpression" name="IsUniqueExpression"
      superClass="SequenceExpansionExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="IsUniqueExpression-_ownedComment.0"
        annotatedElement="IsUniqueExpression">
        <body>A sequence expansion expression with a isUnique. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsUniqueExpression-isUniqueExpressionTypeDerivation"
        name="isUniqueExpressionTypeDerivation" constrainedElement="IsUniqueExpression"
        namespace="IsUniqueExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsUniqueExpression-isUniqueExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="IsUniqueExpression-isUniqueExpressionTypeDerivation">
          <body>An isUnique expression has the type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsUniqueExpression-isUniqueExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsUniqueExpression-isUniqueExpressionLowerDerivation"
        name="isUniqueExpressionLowerDerivation" constrainedElement="IsUniqueExpression"
        namespace="IsUniqueExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsUniqueExpression-isUniqueExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="IsUniqueExpression-isUniqueExpressionLowerDerivation">
          <body>An isUnique expression has a multiplicity lower bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsUniqueExpression-isUniqueExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsUniqueExpression-isUniqueExpressionUpperDerivation"
        name="isUniqueExpressionUpperDerivation" constrainedElement="IsUniqueExpression"
        namespace="IsUniqueExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsUniqueExpression-isUniqueExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="IsUniqueExpression-isUniqueExpressionUpperDerivation">
          <body>An isUnique expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsUniqueExpression-isUniqueExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IsUniqueExpression-isUniqueExpressionExpressionArgument"
        name="isUniqueExpressionExpressionArgument" constrainedElement="IsUniqueExpression"
        namespace="IsUniqueExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IsUniqueExpression-isUniqueExpressionExpressionArgument-_ownedComment.0"
          annotatedElement="IsUniqueExpression-isUniqueExpressionExpressionArgument">
          <body>The argument of an isUnique expression must have a multiplicity upper bound of 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IsUniqueExpression-isUniqueExpressionExpressionArgument-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceOperationExpression"
      name="SequenceOperationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceOperationExpression-_ownedComment.0"
        annotatedElement="SequenceOperationExpression">
        <body>An expression used to invoke a behavior as if it was an operation on a target sequence
          as a whole. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionReferentDerivation"
        name="sequenceOperationExpressionReferentDerivation"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionReferentDerivation">
          <body>The referent for a sequence operation expression is the behavior named by the
            operation for the expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionFeatureDerivation"
        name="sequenceOperationExpressionFeatureDerivation"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionFeatureDerivation">
          <body>There is no feature for a sequence operation expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionOperationReferent"
        name="sequenceOperationExpressionOperationReferent"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionOperationReferent-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionOperationReferent">
          <body>There must be a single behavior that is a resolution of the operation qualified name
            of a sequence operation expression with a least one parameter, whose first parameter has
            direction in or inout, has multiplicity [0..*] and to which the target primary
            expression is assignable. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionOperationReferent-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionTargetCompatibility"
        name="sequenceOperationExpressionTargetCompatibility"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionTargetCompatibility-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionTargetCompatibility">
          <body>If the first parameter of the referent has direction inout, then the parameter type
            must have the same type as the primary expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionTargetCompatibility-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionArgumentCompatibility"
        name="sequenceOperationExpressionArgumentCompatibility"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionArgumentCompatibility-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionArgumentCompatibility">
          <body>The type of an input argument expression of a sequence operation parameter must be
            assignable to its corresponding parameter. The type of an output parameter must be
            assignable to its corresponding argument expression. (Note that this implies that the
            type of an argument expression for an inout parameter must be the same as the type of
            that parameter.) </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionArgumentCompatibility-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionAssignmentsBefore"
        name="sequenceOperationExpressionAssignmentsBefore"
        constrainedElement="SequenceOperationExpression" namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionAssignmentsBefore">
          <body>The assignments before the primary expression of a sequence operation expression are
            the same as the assignments before the sequence operation expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsCollectionConversionDerivation"
        name="sequenceOperationExpressionIsCollectionConversionDerivation"
        namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsCollectionConversionDerivation-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionIsCollectionConversionDerivation">
          <body>Collection conversion is required if the type of the primary expression of a
            sequence operation expression is a collection class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsCollectionConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsBitStringConversionDerivation"
        name="sequenceOperationExpressionIsBitStringConversionDerivation"
        namespace="SequenceOperationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsBitStringConversionDerivation-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-sequenceOperationExpressionIsBitStringConversionDerivation">
          <body>BitString conversion is required if type of the first parameter of the referent of a
            sequence operation expression is BitString and either the type of its primary expression
            is Integer or collection conversion is required and the type of its primary expression
            is a collection class whose argument type is Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceOperationExpression-sequenceOperationExpressionIsBitStringConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceOperationExpression-primary"
        name="primary" visibility="public" type="ExtentOrExpression" isComposite="true"
        association="_packagedElement.83">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-primary-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-primary">
          <body>The expression or class name whose value is gives the sequence to be operated on.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceOperationExpression-operation"
        name="operation" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.82">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-operation-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-operation">
          <body>The qualified name of the behavior being invoked. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="SequenceOperationExpression-isCollectionConversion" name="isCollectionConversion"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-isCollectionConversion-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-isCollectionConversion">
          <body>Whether the primary expression requires collection conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="SequenceOperationExpression-isBitStringConversion" name="isBitStringConversion"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-isBitStringConversion-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-isBitStringConversion">
          <body>Whether type primary expression requires BitString conversion. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="SequenceOperationExpression-updateAssignments" name="updateAssignments"
        visibility="public" class="SequenceOperationExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceOperationExpression-updateAssignments-_ownedComment.0"
          annotatedElement="SequenceOperationExpression-updateAssignments">
          <body>The assignments after a sequence operation expression include those made in the
            primary expression and those made in the tuple and, for an "in place" operation (one
            whose first parameter is inout), that made by the sequence operation expression itself.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SequenceOperationExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BitStringUnaryExpression"
      name="BitStringUnaryExpression" superClass="UnaryExpression">
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionTypeDerivation"
        name="bitStringUnaryExpressionTypeDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BitStringUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-bitStringUnaryExpressionTypeDerivation">
          <body>A BitString unary expression has type BitString. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionLowerDerivation"
        name="bitStringUnaryExpressionLowerDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BitStringUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-bitStringUnaryExpressionLowerDerivation">
          <body>A BitString unary expression has the same multiplicity lower bound as its operand
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionUpperDerivation"
        name="bitStringUnaryExpressionUpperDerivation" constrainedElement="BooleanUnaryExpression"
        namespace="BitStringUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-bitStringUnaryExpressionUpperDerivation">
          <body>A BitString unary expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionOperand"
        name="bitStringUnaryExpressionOperand" constrainedElement="BooleanUnaryExpression"
        namespace="BitStringUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionOperand-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-bitStringUnaryExpressionOperand">
          <body>The operand expression of a BitString unary expression must have type BitString or
            Integer and a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpressionOperand-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BitStringUnaryExpression-bitStringUnaryExpresionIsBitStringConversionDerivation"
        name="bitStringUnaryExpresionIsBitStringConversionDerivation"
        namespace="BitStringUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpresionIsBitStringConversionDerivation-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-bitStringUnaryExpresionIsBitStringConversionDerivation">
          <body>BitString conversion is required if the operand expression of a BitString unary
            expression has type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BitStringUnaryExpression-bitStringUnaryExpresionIsBitStringConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="BitStringUnaryExpression-isBitStringConversion" name="isBitStringConversion"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BitStringUnaryExpression-isBitStringConversion-_ownedComment.0"
          annotatedElement="BitStringUnaryExpression-isBitStringConversion">
          <body>Whether BitString conversion is required on the operand expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PositionalTemplateBinding"
      name="PositionalTemplateBinding" superClass="TemplateBinding">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PositionalTemplateBinding-_ownedComment.0"
        annotatedElement="PositionalTemplateBinding">
        <body>A template binding in which the arguments are matched to formal template parameters in
          order by position. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PositionalTemplateBinding-argumentName"
        name="argumentName" visibility="public" type="QualifiedName" upper="*" isComposite="true"
        association="_packagedElement.100">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PositionalTemplateBinding-argumentName-_ownedComment.0"
          annotatedElement="PositionalTemplateBinding-argumentName">
          <body>The arguments for this template binding, to be matched by position to the template
            parameters. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="EqualityExpression" name="EqualityExpression"
      superClass="BinaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="EqualityExpression-_ownedComment.0"
        annotatedElement="EqualityExpression">
        <body>A binary expression that tests the equality of its operands. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="EqualityExpression-equalityExpressionIsNegatedDerivation"
        name="equalityExpressionIsNegatedDerivation" constrainedElement="EqualityExpression"
        namespace="EqualityExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EqualityExpression-equalityExpressionIsNegatedDerivation-_ownedComment.0"
          annotatedElement="EqualityExpression-equalityExpressionIsNegatedDerivation">
          <body>An equality expression is negated if its operator is "!=". </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EqualityExpression-equalityExpressionIsNegatedDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="EqualityExpression-equalityExpressionTypeDerivation"
        name="equalityExpressionTypeDerivation" constrainedElement="EqualityExpression"
        namespace="EqualityExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EqualityExpression-equalityExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="EqualityExpression-equalityExpressionTypeDerivation">
          <body>An equality expression has type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EqualityExpression-equalityExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="EqualityExpression-equalityExpressionLowerDerivation"
        name="equalityExpressionLowerDerivation" constrainedElement="EqualityExpression"
        namespace="EqualityExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EqualityExpression-equalityExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="EqualityExpression-equalityExpressionLowerDerivation">
          <body>An equality expression has a multiplicity lower bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EqualityExpression-equalityExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="EqualityExpression-equalityExpressionUpperDerivation"
        name="equalityExpressionUpperDerivation" constrainedElement="EqualityExpression"
        namespace="EqualityExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EqualityExpression-equalityExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="EqualityExpression-equalityExpressionUpperDerivation">
          <body>An equality expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EqualityExpression-equalityExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="EqualityExpression-isNegated"
        name="isNegated" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="EqualityExpression-isNegated-_ownedComment.0"
          annotatedElement="EqualityExpression-isNegated">
          <body>Whether the test is for being not equal. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceConstructionExpression"
      name="SequenceConstructionExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceConstructionExpression-_ownedComment.0"
        annotatedElement="SequenceConstructionExpression">
        <body>An expression used to construct a sequence of values. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionTypeDerivation"
        name="sequenceConstructionExpressionTypeDerivation"
        constrainedElement="SequenceConstructionExpression"
        namespace="SequenceConstructionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-sequenceConstructionExpressionTypeDerivation">
          <body>The type of a sequence construction expression is the named type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionUpperDerivation"
        name="sequenceConstructionExpressionUpperDerivation"
        constrainedElement="SequenceConstructionExpression"
        namespace="SequenceConstructionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-sequenceConstructionExpressionUpperDerivation">
          <body>If a sequence construction expression has multiplicity, then its multiplicity upper
            bound is given by its elements, if this is not empty, and zero otherwise. If a sequence
            construction expression does not have multiplicity, then its multiplicity upper bound is
            one. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionLowerDerivation"
        name="sequenceConstructionExpressionLowerDerivation"
        constrainedElement="SequenceConstructionExpression"
        namespace="SequenceConstructionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-sequenceConstructionExpressionLowerDerivation">
          <body>If a sequence construction expression has multiplicity, then its multiplicity lower
            bound is given by its elements, if this is not empty, and zero otherwise. If a sequence
            construction expression does not have multiplicity, then its multiplicity lower bound is
            one. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionType"
        name="sequenceConstructionExpressionType"
        constrainedElement="SequenceConstructionExpression"
        namespace="SequenceConstructionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionType-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-sequenceConstructionExpressionType">
          <body>The type name of a sequence construction expression must resolve to a non-template
            classifier. If the expression does not have multiplicity, then this classifier must be
            the instantiation of a collection class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceConstructionExpression-sequenceConstructionExpressionType-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceConstructionExpression-elements"
        name="elements" visibility="public" type="SequenceElements" lower="0" isComposite="true"
        association="_packagedElement.139">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-elements-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-elements">
          <body>The specification of the elements in the sequence. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="SequenceConstructionExpression-hasMultiplicity" name="hasMultiplicity"
        visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-hasMultiplicity-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-hasMultiplicity">
          <body>Whether the sequence construction expression has a multiplicity indicator. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceConstructionExpression-typeName"
        name="typeName" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.281">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceConstructionExpression-typeName-_ownedComment.0"
          annotatedElement="SequenceConstructionExpression-typeName">
          <body>The name of the type of the elements in the sequence. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InvocationExpression" name="InvocationExpression"
      isAbstract="true" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationExpression-_ownedComment.0"
        annotatedElement="InvocationExpression">
        <body>An expression denoting the invocation of a behavior or operation, or the sending of a
          signal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsBehaviorDerivation"
        name="invocationExpressionIsBehaviorDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsBehaviorDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsBehaviorDerivation">
          <body>An invocation expression is a behavior invocation if its referent is a behavior.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsBehaviorDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsAssociationEndDerivation"
        name="invocationExpressionIsAssociationEndDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsAssociationEndDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsAssociationEndDerivation">
          <body>An invocation expression is an association end read if its referent is an
            association end. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsAssociationEndDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsOperationDerivation"
        name="invocationExpressionIsOperationDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsOperationDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsOperationDerivation">
          <body>An invocation expression is an operation call if its referent is an operation.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsOperationDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsDestructorDerivation"
        name="invocationExpressionIsDestructorDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsDestructorDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsDestructorDerivation">
          <body>An invocation expression is a destructor call either implicitly or if it is an
            explicit operation call to a destructor operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsDestructorDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsImplicitDerivation"
        name="invocationExpressionIsImplicitDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsImplicitDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsImplicitDerivation">
          <body>An invocation expression is an implicit object destruction if it has a feature with
            the name "destroy" and no explicit referents. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsImplicitDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionIsSignalDerivation"
        name="invocationExpressionIsSignalDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionIsSignalDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionIsSignalDerivation">
          <body>An invocation expression is a signal send if its referent is a signal. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionIsSignalDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionParameterDerivation"
        name="invocationExpressionParameterDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionParameterDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionParameterDerivation">
          <body>The parameters of an invocation expression are given by the result of the
            parameterElements helper operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionParameterDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionTypeDerivation"
        name="invocationExpressionTypeDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionTypeDerivation">
          <body>The type of an invocation expression is determined by the return parameter (if any)
            of the referent. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionUpperDerivation"
        name="invocationExpressionUpperDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionUpperDerivation">
          <body>The multiplicity upper bound of an invocation expression is determined by the return
            parameter (if any) of the referent. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionLowerDerivation"
        name="invocationExpressionLowerDerivation" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionLowerDerivation">
          <body>The multiplicity lower bound of an invocation expression is determined by the return
            parameter (if any) of the referent. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="InvocationExpression-invocationExpressionAssignmentsBefore"
        name="invocationExpressionAssignmentsBefore" namespace="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-invocationExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="InvocationExpression-invocationExpressionAssignmentsBefore">
          <body>The assignments before the target expression of the feature reference of an
            invocation expression (if any) are the same as the assignments before the invocation
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InvocationExpression-invocationExpressionAssignmentsBefore-_specification" name=""
        />
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isBehavior"
        name="isBehavior" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-isBehavior-_ownedComment.0"
          annotatedElement="InvocationExpression-isBehavior">
          <body>Whether this is a behavior invocation or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isAssociationEnd"
        name="isAssociationEnd" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-isAssociationEnd-_ownedComment.0"
          annotatedElement="InvocationExpression-isAssociationEnd">
          <body>Whether this is an association read or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-feature" name="feature"
        visibility="public" type="FeatureReference" lower="0" isDerived="true"
        association="_packagedElement.70">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationExpression-feature-_ownedComment.0"
          annotatedElement="InvocationExpression-feature">
          <body>For an invocation of a feature, the reference to that feature. This property is set
            for a feature invocation expression or for an expression initially parsed as a behavior
            invocation expression that disambiguates to a feature invocation expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-tuple" name="tuple"
        visibility="public" type="Tuple" isComposite="true" association="_packagedElement.108">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationExpression-tuple-_ownedComment.0"
          annotatedElement="InvocationExpression-tuple">
          <body>The tuple for the invocation expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isOperation"
        name="isOperation" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-isOperation-_ownedComment.0"
          annotatedElement="InvocationExpression-isOperation">
          <body>Whether this is an operation call or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isDestructor"
        name="isDestructor" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-isDestructor-_ownedComment.0"
          annotatedElement="InvocationExpression-isDestructor">
          <body>If this is an operation call, whether the operation is a destructor. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isImplicit"
        name="isImplicit" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-isImplicit-_ownedComment.0"
          annotatedElement="InvocationExpression-isImplicit">
          <body>Whether this is an implicit object destruction. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-referent"
        name="referent" visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.137">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationExpression-referent-_ownedComment.0"
          annotatedElement="InvocationExpression-referent">
          <body>The behavior, operation or signal being invoked. The derivation of this property is
            specific to each kind of invocation expression. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-parameter"
        name="parameter" visibility="public" type="ElementReference" isOrdered="true" upper="*"
        isDerived="true" association="_packagedElement.97">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-parameter-_ownedComment.0"
          annotatedElement="InvocationExpression-parameter">
          <body>Element references to the parameters of the referent, in order. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationExpression-isSignal"
        name="isSignal" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationExpression-isSignal-_ownedComment.0"
          annotatedElement="InvocationExpression-isSignal">
          <body>Whether this is a signal send or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="InvocationExpression-parameterElements"
        name="parameterElements" visibility="public" class="InvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-parameterElements-_ownedComment.0"
          annotatedElement="InvocationExpression-parameterElements">
          <body>Returns references to the elements that act as the parameters of the referent. For a
            behavior or operation, these are the owned parameters, in order. Otherwise (by default),
            they are actually any properties of the referent (e.g., signal attributes), which are
            treated as if they were in parameters. (This is defined as a helper operation, so that
            it can be overridden by subclasses of InvocationExpression, if necessary.) </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="InvocationExpression-parameterElements-_ownedParameter.0" name=""
          visibility="public" type="ElementReference" upper="*" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="InvocationExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="InvocationExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InvocationExpression-updateAssignments-_ownedComment.0"
          annotatedElement="InvocationExpression-updateAssignments">
          <body>The assignments after an invocation expression are the same as those after the tuple
            of the expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="InvocationExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NameExpression" name="NameExpression"
      superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NameExpression-_ownedComment.0"
        annotatedElement="NameExpression">
        <body>An expression that comprises a name reference. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameExpression-nameExpressionAssignmentDerivation"
        name="nameExpressionAssignmentDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionAssignmentDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionAssignmentDerivation">
          <body>If the name in a name expression is a local or parameter name, then its assignment
            is its assigned source before the expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionAssignmentDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameExpression-nameExpressionEnumerationLiteralDerivation"
        name="nameExpressionEnumerationLiteralDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionEnumerationLiteralDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionEnumerationLiteralDerivation">
          <body>If the name in a name expression resolves to an enumeration literal name, then that
            is the enumeration literal for the expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionEnumerationLiteralDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NameExpression-nameExpressionPropertyAccessDerivation"
        name="nameExpressionPropertyAccessDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionPropertyAccessDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionPropertyAccessDerivation">
          <body>If the name in a name expression disambiguates to a feature reference, then the
            equivalent property access expression has the disambiguation of the name as its feature.
            The assignments before the property access expression are the same as those before the
            name expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionPropertyAccessDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NameExpression-nameExpressionTypeDerivation"
        name="nameExpressionTypeDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionTypeDerivation">
          <body>The type of a name expression is determined by its name. If the name is a local name
            or parameter with an assignment, then the type of the name expression is the type of
            that assignment. If the name is an enumeration literal, then the type of the name
            expression is the corresponding enumeration. If the name disambiguates to a feature
            reference, then the type of the name expression is the type of the equivalent property
            access expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NameExpression-nameExpressionUpperDerivation"
        name="nameExpressionUpperDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionUpperDerivation">
          <body>The multiplicity upper bound of a name expression is determined by its name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NameExpression-nameExpressionLowerDerivation"
        name="nameExpressionLowerDerivation" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionLowerDerivation">
          <body>The multiplicity lower bound of a name expression is determined by its name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NameExpression-nameExpressionResolution"
        name="nameExpressionResolution" constrainedElement="NameExpression"
        namespace="NameExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-nameExpressionResolution-_ownedComment.0"
          annotatedElement="NameExpression-nameExpressionResolution">
          <body>If the name referenced by this expression is not a disambiguated feature reference
            or a local or parameter name, then it must resolve to exactly one enumeration literal.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NameExpression-nameExpressionResolution-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameExpression-enumerationLiteral"
        name="enumerationLiteral" visibility="public" type="ElementReference" lower="0"
        isDerived="true" association="_packagedElement.77">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NameExpression-enumerationLiteral-_ownedComment.0"
          annotatedElement="NameExpression-enumerationLiteral">
          <body>The identified enumeration literal, if the referenced name is for an enumeration
            literal. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameExpression-assignment" name="assignment"
        visibility="public" type="AssignedSource" lower="0" isDerived="true"
        association="_packagedElement.138">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameExpression-assignment-_ownedComment.0"
          annotatedElement="NameExpression-assignment">
          <body>The assigned source for the referenced name, if the name is a local or parameter
            name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameExpression-propertyAccess"
        name="propertyAccess" visibility="public" type="PropertyAccessExpression" lower="0"
        isDerived="true" association="_packagedElement.90">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameExpression-propertyAccess-_ownedComment.0"
          annotatedElement="NameExpression-propertyAccess">
          <body>The equivalent property access expression, if the referenced name disambiguates to a
            feature reference. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameExpression-name" name="name"
        visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.128">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameExpression-name-_ownedComment.0"
          annotatedElement="NameExpression-name">
          <body>The qualified name referenced in this expression. (For a local name, this will
            actually have no qualification.) </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassExtentExpression" name="ClassExtentExpression"
      superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassExtentExpression-_ownedComment.0"
        annotatedElement="ClassExtentExpression">
        <body>An expression used to obtain the objects in the extent of a class. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassExtentExpression-classExtentExpressionTypeDerivation"
        name="classExtentExpressionTypeDerivation" constrainedElement="ClassExtentExpression"
        namespace="ClassExtentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassExtentExpression-classExtentExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ClassExtentExpression-classExtentExpressionTypeDerivation">
          <body>The type of a class extent expression is the given class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassExtentExpression-classExtentExpressionTypeDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassExtentExpression-classExtentExpressionUpperDerivation"
        name="classExtentExpressionUpperDerivation" constrainedElement="ClassExtentExpression"
        namespace="ClassExtentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassExtentExpression-classExtentExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ClassExtentExpression-classExtentExpressionUpperDerivation">
          <body>The multiplicity upper bound of a class expression is *. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassExtentExpression-classExtentExpressionUpperDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassExtentExpression-classExtentExpressionLowerDerivation"
        name="classExtentExpressionLowerDerivation" constrainedElement="ClassExtentExpression"
        namespace="ClassExtentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassExtentExpression-classExtentExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ClassExtentExpression-classExtentExpressionLowerDerivation">
          <body>The multiplicity lower bound of a class extent expression is 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassExtentExpression-classExtentExpressionLowerDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassExtentExpression-classExtentExpressionExtentType"
        name="classExtentExpressionExtentType" constrainedElement="ClassExtentExpression"
        namespace="ClassExtentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassExtentExpression-classExtentExpressionExtentType-_ownedComment.0"
          annotatedElement="ClassExtentExpression-classExtentExpressionExtentType">
          <body>The given type name must resolve to a non-template class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassExtentExpression-classExtentExpressionExtentType-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassExtentExpression-className"
        name="className" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.81">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassExtentExpression-className-_ownedComment.0"
          annotatedElement="ClassExtentExpression-className">
          <body>The name of the class whose extent is to be obtained.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceAccessExpression"
      name="SequenceAccessExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceAccessExpression-_ownedComment.0"
        annotatedElement="SequenceAccessExpression">
        <body>An expression used to access a specific element of a sequence. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceAccessExpression-sequenceAccessExpressionTypeDerivation"
        name="sequenceAccessExpressionTypeDerivation" constrainedElement="SequenceAccessExpression"
        namespace="SequenceAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-sequenceAccessExpressionTypeDerivation">
          <body>The type of a sequence access expression is the same as the type of its primary
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceAccessExpression-sequenceAccessExpressionLowerDerivation"
        name="sequenceAccessExpressionLowerDerivation" constrainedElement="SequenceAccessExpression"
        namespace="SequenceAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-sequenceAccessExpressionLowerDerivation">
          <body>The multiplicity lower bound of a sequence access expression is 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceAccessExpression-sequenceAccessExpressionUpperDerivation"
        name="sequenceAccessExpressionUpperDerivation" constrainedElement="SequenceAccessExpression"
        namespace="SequenceAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-sequenceAccessExpressionUpperDerivation">
          <body>The multiplicity upper bound of a sequence access expression is 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexType"
        name="sequenceAccessExpressionIndexType" constrainedElement="SequenceAccessExpression"
        namespace="SequenceAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexType-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-sequenceAccessExpressionIndexType">
          <body>The type of the index of a sequence access expression must be Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexType-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexMultiplicity"
        name="sequenceAccessExpressionIndexMultiplicity"
        constrainedElement="SequenceAccessExpression" namespace="SequenceAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexMultiplicity-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-sequenceAccessExpressionIndexMultiplicity">
          <body>The multiplicity upper bound of the index of a sequence access expression must be 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceAccessExpression-sequenceAccessExpressionIndexMultiplicity-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceAccessExpression-primary"
        name="primary" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.92">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-primary-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-primary">
          <body>The expression whose value is the sequence being accessed. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceAccessExpression-index" name="index"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.85">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceAccessExpression-index-_ownedComment.0"
          annotatedElement="SequenceAccessExpression-index">
          <body>The expression whose value is the index of the element being accessed in the
            sequence. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="StringLiteralExpression"
      name="StringLiteralExpression" superClass="LiteralExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="StringLiteralExpression-_ownedComment.0"
        annotatedElement="StringLiteralExpression">
        <body>An expression that comprises a String literal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StringLiteralExpression-stringLiteralExpressionTypeDerivation"
        name="stringLiteralExpressionTypeDerivation" constrainedElement="StringLiteralExpression"
        namespace="StringLiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StringLiteralExpression-stringLiteralExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="StringLiteralExpression-stringLiteralExpressionTypeDerivation">
          <body>The type of a string literal expression is String. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StringLiteralExpression-stringLiteralExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StringLiteralExpression-image" name="image"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StringLiteralExpression-image-_ownedComment.0"
          annotatedElement="StringLiteralExpression-image">
          <body>The textual image of the literal token for this expression, with quote characters
            removed and escaped sequences resolved to the denoted special character. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ArithmeticExpression" name="ArithmeticExpression"
      superClass="BinaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ArithmeticExpression-_ownedComment.0"
        annotatedElement="ArithmeticExpression">
        <body>A binary expression with an arithmetic operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ArithmeticExpression-arithmeticExpressionIsConcatenationDerivation"
        name="arithmeticExpressionIsConcatenationDerivation"
        constrainedElement="ArithmeticExpression" namespace="ArithmeticExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-arithmeticExpressionIsConcatenationDerivation-_ownedComment.0"
          annotatedElement="ArithmeticExpression-arithmeticExpressionIsConcatenationDerivation">
          <body>An arithmetic expression is a string concatenation expression if its type is String.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ArithmeticExpression-arithmeticExpressionIsConcatenationDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ArithmeticExpression-arithmeticExpressionTypeDerivation"
        name="arithmeticExpressionTypeDerivation" constrainedElement="ArithmeticExpression"
        namespace="ArithmeticExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-arithmeticExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ArithmeticExpression-arithmeticExpressionTypeDerivation">
          <body>The type of an arithmetic expression is the same as the type of its operands.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ArithmeticExpression-arithmeticExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ArithmeticExpression-arithmeticExpressionLowerDerivation"
        name="arithmeticExpressionLowerDerivation" constrainedElement="ArithmeticExpression"
        namespace="ArithmeticExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-arithmeticExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ArithmeticExpression-arithmeticExpressionLowerDerivation">
          <body>An arithmetic expression has a multiplicity lower bound of 0 if the lower bound if
            either operand expression is 0 and 1 otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ArithmeticExpression-arithmeticExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ArithmeticExpression-arithmeticExpressionUpperDerivation"
        name="arithmeticExpressionUpperDerivation" constrainedElement="ArithmeticExpression"
        namespace="ArithmeticExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-arithmeticExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ArithmeticExpression-arithmeticExpressionUpperDerivation">
          <body>An arithmetic expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ArithmeticExpression-arithmeticExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ArithmeticExpression-arithmeticExpressionOperandTypes"
        name="arithmeticExpressionOperandTypes" constrainedElement="ArithmeticExpression"
        namespace="ArithmeticExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-arithmeticExpressionOperandTypes-_ownedComment.0"
          annotatedElement="ArithmeticExpression-arithmeticExpressionOperandTypes">
          <body>The operands of an arithmetic expression must both have type Integer, unless the
            operator is +, in which case they may also both have type String. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ArithmeticExpression-arithmeticExpressionOperandTypes-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ArithmeticExpression-isConcatenation"
        name="isConcatenation" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ArithmeticExpression-isConcatenation-_ownedComment.0"
          annotatedElement="ArithmeticExpression-isConcatenation">
          <body>Whether this is a string concatenation expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PositionalTuple" name="PositionalTuple"
      superClass="Tuple">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PositionalTuple-_ownedComment.0"
        annotatedElement="PositionalTuple">
        <body>A tuple in which the arguments are matched to parameters in order by position. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PositionalTuple-expression" name="expression"
        visibility="public" type="Expression" isOrdered="true" upper="*" isComposite="true"
        association="_packagedElement.117">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PositionalTuple-expression-_ownedComment.0"
          annotatedElement="PositionalTuple-expression">
          <body>The argument expressions for this tuple, to be matched by position to the invocation
            parameters. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Tuple" name="Tuple" isAbstract="true"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-_ownedComment.0" annotatedElement="Tuple">
        <body>A list of expressions used to provide the arguments for an invocation. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleInputDerivation"
        name="tupleInputDerivation" constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleInputDerivation-_ownedComment.0"
          annotatedElement="Tuple-tupleInputDerivation">
          <body>A tuple has the same number of inputs as its invocation has input parameters. For
            each input parameter, the tuple has a corresponding input with the same name as the
            parameter and an expression that is the matching argument from the tuple, or an empty
            sequence construction expression if there is no matching argument. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Tuple-tupleInputDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleOutputDerivation"
        name="tupleOutputDerivation" constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleOutputDerivation-_ownedComment.0"
          annotatedElement="Tuple-tupleOutputDerivation">
          <body>A tuple has the same number of outputs as its invocation has output parameters. For
            each output parameter, the tuple has a corresponding output with the same name as the
            parameter and an expression that is the matching argument from the tuple, or an empty
            sequence construction expression if there is no matching argument. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Tuple-tupleOutputDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleNullInputs" name="tupleNullInputs"
        constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleNullInputs-_ownedComment.0"
          annotatedElement="Tuple-tupleNullInputs">
          <body>An input parameter may only have a null argument if it has a multiplicity lower
            bound of 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Tuple-tupleNullInputs-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleOutputs" name="tupleOutputs"
        constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleOutputs-_ownedComment.0"
          annotatedElement="Tuple-tupleOutputs">
          <body>An output parameter may only have a null argument if it is an out parameter. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Tuple-tupleOutputs-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleAssignmentsBefore"
        name="tupleAssignmentsBefore" constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleAssignmentsBefore-_ownedComment.0"
          annotatedElement="Tuple-tupleAssignmentsBefore">
          <body>The assignments before each expression in a tuple are the same as the assignments
            before the tuple, except in the case of a name expression that defines a new local name,
            in which case the assigned source for the new name is included in the assignments before
            the name expression. (Note that the assigned source for a new name is included before
            the name expression so that the nameExpressionResolution constraint is not violated.)
            The assignments before the tuple are the same as the assignments after the feature
            reference of the invocation of the tuple, if the invocation has one, or otherwise the
            assignments before the invocation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Tuple-tupleAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Tuple-tupleAssignmentsAfter"
        name="tupleAssignmentsAfter" constrainedElement="Tuple" namespace="Tuple">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-tupleAssignmentsAfter-_ownedComment.0"
          annotatedElement="Tuple-tupleAssignmentsAfter">
          <body>A name may be assigned in at most one argument expression of a tuple. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Tuple-tupleAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Tuple-input" name="input" visibility="public"
        type="NamedExpression" upper="*" isDerived="true" association="_packagedElement.114">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-input-_ownedComment.0"
          annotatedElement="Tuple-input">
          <body>The argument expressions from this tuple, matched to the input parameters (direction
            in and inout) of the invocation. An empty sequence construction expression is included
            for any input parameter that is not explicitly matched in the tuple. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Tuple-invocation" name="invocation"
        visibility="public" type="InvocationExpression" association="_packagedElement.108">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-invocation-_ownedComment.0"
          annotatedElement="Tuple-invocation">
          <body>The invocation expression of which this tuple is a part. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Tuple-output" name="output"
        visibility="public" type="OutputNamedExpression" upper="*" isDerived="true"
        association="_packagedElement.118">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Tuple-output-_ownedComment.0"
          annotatedElement="Tuple-output">
          <body>The argument expressions from this tuple, matched to the output parameters
            (direction inout and out) of the invocation. An empty sequence construction expression
            is included for any output parameter that is not explicitly matched in the tuple.
          </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SequenceReductionExpression"
      name="SequenceReductionExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SequenceReductionExpression-_ownedComment.0"
        annotatedElement="SequenceReductionExpression">
        <body>An expression used to reduce a sequence of values effectively by inserting a binary
          operation between the values. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionReferentDerivation"
        name="sequenceReductionExpressionReferentDerivation"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionReferentDerivation">
          <body>The referent for a sequence reduction expression is the behavior denoted by the
            behavior name of the expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionTypeDerivation"
        name="sequenceReductionExpressionTypeDerivation"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionTypeDerivation">
          <body>A sequence reduction expression has the same type as its primary expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionUpperDerivation"
        name="sequenceReductionExpressionUpperDerivation"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionUpperDerivation">
          <body>A sequence reduction expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionLowerDerivation"
        name="sequenceReductionExpressionLowerDerivation"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionLowerDerivation">
          <body>A sequence reduction expression has a multiplicity lower bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehavior"
        name="sequenceReductionExpressionBehavior" constrainedElement="SequenceReductionExpression"
        namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehavior-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionBehavior">
          <body>The behavior name in a sequence reduction expression must denote a behavior. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehavior-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehaviorParameters"
        name="sequenceReductionExpressionBehaviorParameters"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehaviorParameters-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionBehaviorParameters">
          <body>The referent behavior must have two in parameters, a return parameter and no other
            parameters. The parameters must all have the same type as the argument expression and
            multiplicity [1..1]. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionBehaviorParameters-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SequenceReductionExpression-sequenceReductionExpressionAssignmentsBefore"
        name="sequenceReductionExpressionAssignmentsBefore"
        constrainedElement="SequenceReductionExpression" namespace="SequenceReductionExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-sequenceReductionExpressionAssignmentsBefore">
          <body>The assignments before the target expression of a sequence reduction expression are
            the same as the assignments before the sequence reduction expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SequenceReductionExpression-sequenceReductionExpressionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceReductionExpression-referent"
        name="referent" visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.130">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-referent-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-referent">
          <body>A reference to the behavior to be used as the reducer. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceReductionExpression-isOrdered"
        name="isOrdered" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-isOrdered-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-isOrdered">
          <body>Whether this is an ordered reduction or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceReductionExpression-primary"
        name="primary" visibility="public" type="ExtentOrExpression" isComposite="true"
        association="_packagedElement.123">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-primary-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-primary">
          <body>The target class name or primary expression for the reduction. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SequenceReductionExpression-behaviorName"
        name="behaviorName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.80">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-behaviorName-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-behaviorName">
          <body>The name of the behavior to be used as the reducer. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="SequenceReductionExpression-updateAssignments" name="updateAssignments"
        visibility="public" class="SequenceReductionExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SequenceReductionExpression-updateAssignments-_ownedComment.0"
          annotatedElement="SequenceReductionExpression-updateAssignments">
          <body>The assignments after a sequence reduction expression are the same as after its
            primary expression. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SequenceReductionExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="IncrementOrDecrementExpression"
      name="IncrementOrDecrementExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="IncrementOrDecrementExpression-_ownedComment.0"
        annotatedElement="IncrementOrDecrementExpression">
        <body>A unary expression with either an increment or decrement operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignment"
        name="incrementOrDecrementExpressionAssignment"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignment-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignment">
          <body>If the operand of an increment or decrement expression is a name, then the
            assignment for the expression is a new assigned source for the name with the expression
            as the source. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignment-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsFeatureDerivation"
        name="incrementOrDecrementExpressionIsFeatureDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsFeatureDerivation">
          <body>An increment or decrement expression has a feature as its operand if the operand is
            a kind of FeatureLeftHandSide. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsIndexedDerivation"
        name="incrementOrDecrementExpressionIsIndexedDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsIndexedDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsIndexedDerivation">
          <body>An increment or decrement expression is indexed if its operand is indexed. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsIndexedDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsDataValueUpdate"
        name="incrementOrDecrementExpressionIsDataValueUpdate"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsDataValueUpdate-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsDataValueUpdate">
          <body>An increment or decrement expression is a data value update if its operand is an
            attribute of a data value held in a local name or parameter. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionIsDataValueUpdate-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionFeature"
        name="incrementOrDecrementExpressionFeature"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionFeature-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionFeature">
          <body>If the operand of an increment or decrement expression is a feature, then the
            referent for the operand. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionFeature-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionExpressionDerivation"
        name="incrementOrDecrementExpressionExpressionDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionExpressionDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionExpressionDerivation">
          <body>The effective expression for the operand of an increment or decrement expression is
            the operand treated as a name expression, property access expression or sequence access
            expression, as appropriate for evaluation to obtain the original value to be updated.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionExpressionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionTypeDerivation"
        name="incrementOrDecrementExpressionTypeDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionTypeDerivation">
          <body>An increment or decrement expression has type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionLowerDerivation"
        name="incrementOrDecrementExpressionLowerDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionLowerDerivation">
          <body>An increment or decrement expression has the same multiplicity lower bound as its
            operand expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionUpperDerivation"
        name="incrementOrDecrementExpressionUpperDerivation"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionUpperDerivation">
          <body>An increment or decrement expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionOperand"
        name="incrementOrDecrementExpressionOperand"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionOperand-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionOperand">
          <body>The operand expression must have type Integer and a multiplicity upper bound of 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionOperand-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignmentsBefore"
        name="incrementOrDecrementExpressionAssignmentsBefore"
        constrainedElement="IncrementOrDecrementExpression"
        namespace="IncrementOrDecrementExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignmentsBefore">
          <body>The assignments before the operand of an increment or decrement expression are the
            same as those before the increment or decrement expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IncrementOrDecrementExpression-incrementOrDecrementExpressionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-isPrefix"
        name="isPrefix" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-isPrefix-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-isPrefix">
          <body>Whether the operator is being used as a prefix or a postfix. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-assignment"
        name="assignment" visibility="public" type="AssignedSource" lower="0" isDerived="true"
        association="_packagedElement.115">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-assignment-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-assignment">
          <body>If the operand is a name, then the new assigned source for that name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-operand"
        name="operand" visibility="public" type="LeftHandSide" isComposite="true"
        association="_packagedElement.103">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-operand-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-operand">
          <body>The operand, which must have the form of an assignment left-hand side. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-expression"
        name="expression" visibility="public" type="Expression" isDerived="true"
        association="_packagedElement.93">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-expression-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-expression">
          <body>The effective expression used to obtain the original value of the operand to be
            updated. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-feature"
        name="feature" visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.98">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-feature-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-feature">
          <body>If the operand is a feature, then the referent for that feature. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-isFeature"
        name="isFeature" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-isFeature-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-isFeature">
          <body>Whether the operand is a feature or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IncrementOrDecrementExpression-isIndexed"
        name="isIndexed" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-isIndexed-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-isIndexed">
          <body>If the operand is a feature, whether it has an index or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="IncrementOrDecrementExpression-isDataValueUpdate" name="isDataValueUpdate"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-isDataValueUpdate-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-isDataValueUpdate">
          <body>Whether this expression updates an attribute of a data value held in a local name or
            parameter. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="IncrementOrDecrementExpression-updateAssignments" name="updateAssignments"
        visibility="public" class="IncrementOrDecrementExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IncrementOrDecrementExpression-updateAssignments-_ownedComment.0"
          annotatedElement="IncrementOrDecrementExpression-updateAssignments">
          <body>The assignments after an increment and decrement expression include all those after
            its operand expression. Further, if the operand expression, considered as a left hand
            side, is a local name, then this is reassigned. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="IncrementOrDecrementExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CollectOrIterateExpression"
      name="CollectOrIterateExpression" superClass="SequenceExpansionExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CollectOrIterateExpression-_ownedComment.0"
        annotatedElement="CollectOrIterateExpression">
        <body>A sequence expansion expression with a collect or iterate operation. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="CollectOrIterateExpression-collectOrIterateExpressionTypeDerivation"
        name="collectOrIterateExpressionTypeDerivation"
        constrainedElement="CollectOrIterateExpression" namespace="CollectOrIterateExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="CollectOrIterateExpression-collectOrIterateExpressionTypeDerivation">
          <body>A collect or iterate expression has the same type as its argument expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="CollectOrIterateExpression-collectOrIterateExpressionLowerDerivation"
        name="collectOrIterateExpressionLowerDerivation"
        constrainedElement="CollectOrIterateExpression" namespace="CollectOrIterateExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="CollectOrIterateExpression-collectOrIterateExpressionLowerDerivation">
          <body>A collect or iterate expression has a multiplicity lower bound that is the product
            of the bounds of its primary and argument expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="CollectOrIterateExpression-collectOrIterateExpressionUpperDerivation"
        name="collectOrIterateExpressionUpperDerivation"
        constrainedElement="CollectOrIterateExpression" namespace="CollectOrIterateExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="CollectOrIterateExpression-collectOrIterateExpressionUpperDerivation">
          <body>A collect or iterate expression has a multiplicity upper bound that is the product
            of the bounds of its primary and argument expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="CollectOrIterateExpression-collectOrIterateExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ForAllOrExistsOrOneExpression"
      name="ForAllOrExistsOrOneExpression" superClass="SequenceExpansionExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ForAllOrExistsOrOneExpression-_ownedComment.0"
        annotatedElement="ForAllOrExistsOrOneExpression">
        <body>A sequence expansion expression with a forAll, exists or one operation. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionTypeDerivation"
        name="forAllOrExistOrOneExpressionTypeDerivation"
        constrainedElement="ForAllOrExistsOrOneExpression" namespace="ForAllOrExistsOrOneExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionTypeDerivation">
          <body>A forAll, exists or one expression has the type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionLowerDerivation"
        name="forAllOrExistOrOneExpressionLowerDerivation"
        constrainedElement="ForAllOrExistsOrOneExpression" namespace="ForAllOrExistsOrOneExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionLowerDerivation">
          <body>A forAll, exists or one expression has a multiplicity lower bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionUpperDerivation"
        name="forAllOrExistOrOneExpressionUpperDerivation"
        constrainedElement="ForAllOrExistsOrOneExpression" namespace="ForAllOrExistsOrOneExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionUpperDerivation">
          <body>A forAll, exists or one expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionArgument"
        name="forAllOrExistOrOneExpressionArgument"
        constrainedElement="ForAllOrExistsOrOneExpression" namespace="ForAllOrExistsOrOneExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionArgument-_ownedComment.0"
          annotatedElement="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionArgument">
          <body>The argument of a forAll, exists or one expression must have type Boolean and a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForAllOrExistsOrOneExpression-forAllOrExistOrOneExpressionArgument-_specification"
          name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TemplateBinding" name="TemplateBinding"
      isAbstract="true" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TemplateBinding-_ownedComment.0"
        annotatedElement="TemplateBinding">
        <body>A list of type names used to provide arguments for the parameters of a template.
        </body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="FeatureInvocationExpression"
      name="FeatureInvocationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="FeatureInvocationExpression-_ownedComment.0"
        annotatedElement="FeatureInvocationExpression">
        <body>An invocation of a feature referenced on a sequence of instances. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentDerivation"
        name="featureInvocationExpressionReferentDerivation"
        constrainedElement="FeatureInvocationExpression" namespace="FeatureInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-featureInvocationExpressionReferentDerivation">
          <body>If a feature invocation expression is an implicit object destruction, it has no
            referent. Otherwise, its referent is the referent of its feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureInvocationExpression-featureInvocationExpressionFeatureDerivation"
        name="featureInvocationExpressionFeatureDerivation"
        constrainedElement="FeatureInvocationExpression" namespace="FeatureInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-featureInvocationExpressionFeatureDerivation">
          <body>If a feature invocation expression has an explicit target, then that is its feature.
            Otherwise, it is an alternative constructor call with its feature determined implicitly.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentExists"
        name="featureInvocationExpressionReferentExists"
        constrainedElement="FeatureInvocationExpression" namespace="FeatureInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentExists-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-featureInvocationExpressionReferentExists">
          <body>If a feature invocation expression is not an implicit destructor call, then it must
            be possible to determine a single valid referent for it according to the overloading
            resolution rules. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionReferentExists-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureInvocationExpression-featureInvocationExpressionAlternativeConstructor"
        name="featureInvocationExpressionAlternativeConstructor"
        constrainedElement="FeatureInvocationExpression" namespace="FeatureInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionAlternativeConstructor-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-featureInvocationExpressionAlternativeConstructor">
          <body>An alternative constructor invocation may only occur in an expression statement as
            the first statement in the definition for the method of a constructor operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionAlternativeConstructor-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="FeatureInvocationExpression-featureInvocationExpressionImplicitAlternativeConstructor"
        name="featureInvocationExpressionImplicitAlternativeConstructor"
        constrainedElement="FeatureInvocationExpression" namespace="FeatureInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionImplicitAlternativeConstructor-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-featureInvocationExpressionImplicitAlternativeConstructor">
          <body>If there is no target feature expression, then the implicit feature with the same
            name as the target type must be a constructor. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="FeatureInvocationExpression-featureInvocationExpressionImplicitAlternativeConstructor-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FeatureInvocationExpression-target"
        name="target" visibility="public" type="FeatureReference" lower="0" isComposite="true"
        association="_packagedElement.79">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FeatureInvocationExpression-target-_ownedComment.0"
          annotatedElement="FeatureInvocationExpression-target">
          <body>A feature reference to the target feature to be invoked. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PropertyAccessExpression"
      name="PropertyAccessExpression" superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PropertyAccessExpression-_ownedComment.0"
        annotatedElement="PropertyAccessExpression">
        <body>An expression comprising a reference to a structural feature. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureDerivation"
        name="propertyAccessExpressionFeatureDerivation"
        constrainedElement="PropertyAccessExpression" namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionFeatureDerivation">
          <body>The feature of a property access expression is the structural feature to which its
            feature reference resolves. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionTypeDerivation"
        name="propertyAccessExpressionTypeDerivation" constrainedElement="PropertyAccessExpression"
        namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionTypeDerivation">
          <body>The type of a property access expression is the type of the referenced feature.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionUpperDerivation"
        name="propertyAccessExpressionUpperDerivation" constrainedElement="PropertyAccessExpression"
        namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionUpperDerivation">
          <body>The multiplicity upper bound of a property access expression is given by the product
            of the multiplicity upper bounds of the referenced feature and the target expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionLowerDerivation"
        name="propertyAccessExpressionLowerDerivation" constrainedElement="PropertyAccessExpression"
        namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionLowerDerivation">
          <body>The multiplicity upper bound of a property access expression is given by the product
            of the multiplicity upper bounds of the referenced feature and the target expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureResolution"
        name="propertyAccessExpressionFeatureResolution"
        constrainedElement="PropertyAccessExpression" namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureResolution-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionFeatureResolution">
          <body>The feature reference for a property access expression must resolve to a single
            structural feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionFeatureResolution-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyAccessExpression-propertyAccessExpressionAssignmentsBefore"
        name="propertyAccessExpressionAssignmentsBefore"
        constrainedElement="PropertyAccessExpression" namespace="PropertyAccessExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-propertyAccessExpressionAssignmentsBefore">
          <body>The assignments before the expression of the feature reference of a property access
            expression are the same as before the property access expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyAccessExpression-propertyAccessExpressionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyAccessExpression-featureReference"
        name="featureReference" visibility="public" type="FeatureReference" isComposite="true"
        association="_packagedElement.132">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-featureReference-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-featureReference">
          <body>A reference to a structural feature. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyAccessExpression-feature"
        name="feature" visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.124">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-feature-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-feature">
          <body>The referenced structural feature. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PropertyAccessExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="PropertyAccessExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyAccessExpression-updateAssignments-_ownedComment.0"
          annotatedElement="PropertyAccessExpression-updateAssignments">
          <body>The assignments after a property access expression are the same as those after the
            target expression of its feature reference. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PropertyAccessExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NameBinding" name="NameBinding"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NameBinding-_ownedComment.0"
        annotatedElement="NameBinding">
        <body>An unqualified name, optionally with a template binding. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameBinding-binding" name="binding"
        visibility="public" type="TemplateBinding" lower="0" isComposite="true"
        association="_packagedElement.91">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameBinding-binding-_ownedComment.0"
          annotatedElement="NameBinding-binding">
          <body>The template binding to be used, if the name denotes a template. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NameBinding-name" name="name"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NameBinding-name-_ownedComment.0"
          annotatedElement="NameBinding-name">
          <body>An unqualified name. For names that appeared as unrestricted names in the input
            text, the string value here excludes the surrounding single quote characters and has any
            escape sequences resolved to the denoted special characters. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="RelationalExpression" name="RelationalExpression"
      superClass="BinaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="RelationalExpression-_ownedComment.0"
        annotatedElement="RelationalExpression">
        <body>A binary expression with a relational operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="RelationalExpression-relationalExpressionIsUnlimitedNaturalDerivation"
        name="relationalExpressionIsUnlimitedNaturalDerivation"
        constrainedElement="RelationalExpression" namespace="RelationalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-relationalExpressionIsUnlimitedNaturalDerivation-_ownedComment.0"
          annotatedElement="RelationalExpression-relationalExpressionIsUnlimitedNaturalDerivation">
          <body>A relational expression is an UnlimitedNatural comparison if either one of its
            operands has type UnlimitedNatural. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="RelationalExpression-relationalExpressionIsUnlimitedNaturalDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="RelationalExpression-relationalExpressionIsTypeDerivation"
        name="relationalExpressionIsTypeDerivation" constrainedElement="RelationalExpression"
        namespace="RelationalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-relationalExpressionIsTypeDerivation-_ownedComment.0"
          annotatedElement="RelationalExpression-relationalExpressionIsTypeDerivation">
          <body>The type of a relational expression is Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="RelationalExpression-relationalExpressionIsTypeDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="RelationalExpression-relationalExpressionIsLowerDerivation"
        name="relationalExpressionIsLowerDerivation" constrainedElement="RelationalExpression"
        namespace="RelationalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-relationalExpressionIsLowerDerivation-_ownedComment.0"
          annotatedElement="RelationalExpression-relationalExpressionIsLowerDerivation">
          <body>A relational expression has a multiplicity lower bound of 0 if the lower bound if
            either operand expression is 0 and 1 otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="RelationalExpression-relationalExpressionIsLowerDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="RelationalExpression-relationalExpressionIsUpperDerivation"
        name="relationalExpressionIsUpperDerivation" constrainedElement="RelationalExpression"
        namespace="RelationalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-relationalExpressionIsUpperDerivation-_ownedComment.0"
          annotatedElement="RelationalExpression-relationalExpressionIsUpperDerivation">
          <body>A relational expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="RelationalExpression-relationalExpressionIsUpperDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="RelationalExpression-relationalExpressionOperandTypes"
        name="relationalExpressionOperandTypes" constrainedElement="RelationalExpression"
        namespace="RelationalExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-relationalExpressionOperandTypes-_ownedComment.0"
          annotatedElement="RelationalExpression-relationalExpressionOperandTypes">
          <body>The operand expressions for a comparison operator must have type Integer,
            UnlimitedNatural or Natural. However, it is not allowed to have one operand expression
            be Integer and the other be UnlimitedNatural. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="RelationalExpression-relationalExpressionOperandTypes-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="RelationalExpression-isUnlimitedNatural"
        name="isUnlimitedNatural" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="RelationalExpression-isUnlimitedNatural-_ownedComment.0"
          annotatedElement="RelationalExpression-isUnlimitedNatural">
          <body>Whether this is an UnlimitedNatural comparison. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NumericUnaryExpression" name="NumericUnaryExpression"
      superClass="UnaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NumericUnaryExpression-_ownedComment.0"
        annotatedElement="NumericUnaryExpression">
        <body>A unary expression with a numeric operator. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NumericUnaryExpression-numericUnaryExpressionTypeDerivation"
        name="numericUnaryExpressionTypeDerivation" constrainedElement="NumericUnaryExpression"
        namespace="NumericUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="NumericUnaryExpression-numericUnaryExpressionTypeDerivation">
          <body>A numeric unary expression must have type Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NumericUnaryExpression-numericUnaryExpressionLowerDerivation"
        name="numericUnaryExpressionLowerDerivation" constrainedElement="NumericUnaryExpression"
        namespace="NumericUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="NumericUnaryExpression-numericUnaryExpressionLowerDerivation">
          <body>A numeric unary expression has the same multiplicity lower bound as its operand
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NumericUnaryExpression-numericUnaryExpressionUpperDerivation"
        name="numericUnaryExpressionUpperDerivation" constrainedElement="NumericUnaryExpression"
        namespace="NumericUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="NumericUnaryExpression-numericUnaryExpressionUpperDerivation">
          <body>A numeric unary expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NumericUnaryExpression-numericUnaryExpressionOperand"
        name="numericUnaryExpressionOperand" constrainedElement="NumericUnaryExpression"
        namespace="NumericUnaryExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionOperand-_ownedComment.0"
          annotatedElement="NumericUnaryExpression-numericUnaryExpressionOperand">
          <body>The operand expression must have type Integer and a multiplicity upper bound of 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NumericUnaryExpression-numericUnaryExpressionOperand-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NaturalLiteralExpression"
      name="NaturalLiteralExpression" superClass="LiteralExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NaturalLiteralExpression-_ownedComment.0"
        annotatedElement="NaturalLiteralExpression">
        <body>An expression that comprises a natural literal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NaturalLiteralExpression-naturalLiteralExpressionTypeDerivation"
        name="naturalLiteralExpressionTypeDerivation" constrainedElement="NaturalLiteralExpression"
        namespace="NaturalLiteralExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NaturalLiteralExpression-naturalLiteralExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="NaturalLiteralExpression-naturalLiteralExpressionTypeDerivation">
          <body>The type of a natural literal is the Alf library type Natural. NOTE: If the context
            of a natural literal expression unambiguously requires either an Integer or an
            UnlimitedNatural value, then the result of the literal expression is implicitly downcast
            to the required type. If the context is ambiguous, however, than an explicit cast to
            Integer or UnlimitedNatural must be used. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NaturalLiteralExpression-naturalLiteralExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NaturalLiteralExpression-image" name="image"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NaturalLiteralExpression-image-_ownedComment.0"
          annotatedElement="NaturalLiteralExpression-image">
          <body>The textual image of the literal token for this expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassificationExpression"
      name="ClassificationExpression" superClass="UnaryExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassificationExpression-_ownedComment.0"
        annotatedElement="ClassificationExpression">
        <body>An expression used to test the dynamic type of its operand. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionIsDirectDerivation"
        name="classificationExpressionIsDirectDerivation"
        constrainedElement="ClassificationExpression" namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionIsDirectDerivation-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionIsDirectDerivation">
          <body>A classification expression is direct if its operator is "hastype". </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionIsDirectDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionReferentDerivation"
        name="classificationExpressionReferentDerivation"
        constrainedElement="ClassificationExpression" namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionReferentDerivation">
          <body>The referent of a classification expression is the classifier to which the type name
            resolves. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionTypeDerivation"
        name="classificationExpressionTypeDerivation" constrainedElement="ClassificationExpression"
        namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionTypeDerivation">
          <body>A classification expression has type Boolean. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionLowerDerivation"
        name="classificationExpressionLowerDerivation" constrainedElement="ClassificationExpression"
        namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionLowerDerivation">
          <body>A classification expression has a multiplicity lower bound that is the same as the
            lower bound of its operand expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionUpperDerivation"
        name="classificationExpressionUpperDerivation" constrainedElement="ClassificationExpression"
        namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionUpperDerivation">
          <body>A classification expression has a multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionTypeName"
        name="classificationExpressionTypeName" constrainedElement="ClassificationExpression"
        namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionTypeName-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionTypeName">
          <body>The type name in a classification expression must resolve to a classifier. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionTypeName-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassificationExpression-classificationExpressionOperand"
        name="classificationExpressionOperand" constrainedElement="ClassificationExpression"
        namespace="ClassificationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-classificationExpressionOperand-_ownedComment.0"
          annotatedElement="ClassificationExpression-classificationExpressionOperand">
          <body>The operand expression of a classification expression must have a multiplicity upper
            bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassificationExpression-classificationExpressionOperand-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassificationExpression-referent"
        name="referent" visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.110">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-referent-_ownedComment.0"
          annotatedElement="ClassificationExpression-referent">
          <body>Whether the test is for the operand to have the given type directly or to only
            conform to the given type. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassificationExpression-isDirect"
        name="isDirect" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-isDirect-_ownedComment.0"
          annotatedElement="ClassificationExpression-isDirect">
          <body>Whether the test is for the operand to have the given type directly or to only
            conform to the given type. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassificationExpression-typeName"
        name="typeName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.107">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassificationExpression-typeName-_ownedComment.0"
          annotatedElement="ClassificationExpression-typeName">
          <body>The name of the type that the operand is to be tested against. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NamedTemplateBinding" name="NamedTemplateBinding"
      superClass="TemplateBinding">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NamedTemplateBinding-_ownedComment.0"
        annotatedElement="NamedTemplateBinding">
        <body>A template binding in which the arguments are matched to formal template parameters by
          name. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedTemplateBinding-substitution"
        name="substitution" visibility="public" type="TemplateParameterSubstitution" upper="*"
        isComposite="true" association="_packagedElement.73">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamedTemplateBinding-substitution-_ownedComment.0"
          annotatedElement="NamedTemplateBinding-substitution">
          <body>The substitutions of arguments for template parameters. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="QualifiedName" name="QualifiedName"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-_ownedComment.0"
        annotatedElement="QualifiedName">
        <body>The representation of a qualified name as a sequence of individual simple names.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameUnqualifiedNameDerivation"
        name="qualifiedNameUnqualifiedNameDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameUnqualifiedNameDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameUnqualifiedNameDerivation">
          <body>The unqualified name of a qualified name is the last name binding. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameUnqualifiedNameDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="QualifiedName-qualifiedNamePathNameDerivation"
        name="qualifiedNamePathNameDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNamePathNameDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNamePathNameDerivation">
          <body>The path name for a qualified name consists of the string representation of each of
            the name bindings, separated by "::" punctuation. The string representation of a name
            binding is its name followed by the representation of its template binding, if it has
            one. The string representation of a positional template binding consists of an ordered
            list of the path names of its argument qualified names separated by commas, all
            surrounded by the angle brackets "&lt;" and "&gt;". The string representation of
            a named template binding consists of an ordered list of its template parameter
            substitutions, each consisting of the formal parameter name followed by "=&gt;"
            followed by the path name of the argument qualified name, separated by commas, all
            surrounded by the angle brackets "&lt;" and "&gt;". </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNamePathNameDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameIsFeatureReferenceDerivation"
        name="qualifiedNameIsFeatureReferenceDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameIsFeatureReferenceDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameIsFeatureReferenceDerivation">
          <body>A qualified name is a feature reference is its disambiguation is not empty. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameIsFeatureReferenceDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameQualificationDerivation"
        name="qualifiedNameQualificationDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameQualificationDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameQualificationDerivation">
          <body>The qualification of a qualified name is a empty if the qualified name has only one
            name binding. Otherwise it is the qualified name consisting of all the name bindings of
            the original qualified name except for the last one. The qualification of a qualified
            name is considered ambiguous if the qualified name is ambiguous and has more than two
            name bindings. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameQualificationDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameDisambiguationDerivation"
        name="qualifiedNameDisambiguationDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameDisambiguationDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameDisambiguationDerivation">
          <body>If a qualified name is not ambiguous or it resolves to a namespace, then it is has
            no disambiguation. Otherwise, its disambiguation is a feature reference with a name
            given by the unqualified name of the qualified name and a target expression determined
            by the disambiguation of the qualification of the qualified name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameDisambiguationDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="QualifiedName-qualifiedNameReferentDerivation"
        name="qualifiedNameReferentDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameReferentDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameReferentDerivation">
          <body>The referents of a qualified name are the elements to which the name may resolve in
            the current scope, according to the UML rules for namespaces and named elements. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameReferentDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="QualifiedName-qualifiedNameLocalName"
        name="qualifiedNameLocalName" constrainedElement="QualifiedName" namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameLocalName-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameLocalName">
          <body>If a qualified name is a local name, then the reference must be within the same
            local scope as the definition of the named element. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameLocalName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameNonLocalUnqualifiedName"
        name="qualifiedNameNonLocalUnqualifiedName" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameNonLocalUnqualifiedName-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameNonLocalUnqualifiedName">
          <body>If a qualified name is an unqualified, non-local name, then it must be visible in
            the current scope of the use of the name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameNonLocalUnqualifiedName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="QualifiedName-qualifiedNameQualifiedResolution"
        name="qualifiedNameQualifiedResolution" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameQualifiedResolution-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameQualifiedResolution">
          <body>If a qualified name has a qualification, then its unqualified name must name an
            element of the namespace named by the qualification, where the first name in the
            qualification must name an element of the current scope. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameQualifiedResolution-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="QualifiedName-qualifiedNameTemplateBinding"
        name="qualifiedNameTemplateBinding" namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameTemplateBinding-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameTemplateBinding">
          <body>If the unqualified name of a qualified name has a template binding, then the
            template name must resolve to a template. The template binding must have an argument
            name for each of the template parameters and each argument name must resolve to a
            classifier. If the template parameter has constraining classifiers, then the referent of
            the corresponding argument name must conform to all those constraining classifiers.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameTemplateBinding-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="QualifiedName-qualifiedNameTemplateNameDerivation"
        name="qualifiedNameTemplateNameDerivation" constrainedElement="QualifiedName"
        namespace="QualifiedName">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-qualifiedNameTemplateNameDerivation-_ownedComment.0"
          annotatedElement="QualifiedName-qualifiedNameTemplateNameDerivation">
          <body>If the last name binding in a qualified name has a template binding, then the
            template name is a qualified name with the same template bindings as the original
            qualified name, but with the template binding removed on the last name binding. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="QualifiedName-qualifiedNameTemplateNameDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-isAmbiguous" name="isAmbiguous"
        visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-isAmbiguous-_ownedComment.0"
          annotatedElement="QualifiedName-isAmbiguous">
          <body>Whether this qualified name is ambiguous. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-pathName" name="pathName"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-pathName-_ownedComment.0"
          annotatedElement="QualifiedName-pathName">
          <body>The complete path name for the qualified name, with individual name bindings
            separated by "::" punctuation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-isFeatureReference"
        name="isFeatureReference" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="QualifiedName-isFeatureReference-_ownedComment.0"
          annotatedElement="QualifiedName-isFeatureReference">
          <body>Indicates whether this qualified name has been disambiguated to a feature reference.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-qualification"
        name="qualification" visibility="public" type="QualifiedName" lower="0" isDerived="true"
        association="_packagedElement.105">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-qualification-_ownedComment.0"
          annotatedElement="QualifiedName-qualification">
          <body>The qualified name corresponding to the qualification part of this qualified name,
            if any. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-disambiguation"
        name="disambiguation" visibility="public" type="FeatureReference" lower="0" isDerived="true"
        association="_packagedElement.136">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-disambiguation-_ownedComment.0"
          annotatedElement="QualifiedName-disambiguation">
          <body>The disambiguation into a feature reference of a syntactic element initially parsed
            as a qualified name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-nameBinding" name="nameBinding"
        visibility="public" type="NameBinding" isOrdered="true" upper="*" isComposite="true"
        association="_packagedElement.75">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-nameBinding-_ownedComment.0"
          annotatedElement="QualifiedName-nameBinding">
          <body>The sequence of individual name bindings in this qualified name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-referent" name="referent"
        visibility="public" type="ElementReference" upper="*" isDerived="true"
        association="_packagedElement.121">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-referent-_ownedComment.0"
          annotatedElement="QualifiedName-referent">
          <body>The possible referents to which this qualified name may resolve. (Note that the UML
            rules for namespaces in general allow a namespace to contain elements of different kinds
            with the same name.) If the qualified name is for a template instantiation, then the
            referent is the equivalent bound element. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-unqualifiedName"
        name="unqualifiedName" visibility="public" type="NameBinding" isDerived="true"
        association="_packagedElement.88">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedName-unqualifiedName-_ownedComment.0"
          annotatedElement="QualifiedName-unqualifiedName">
          <body>The rightmost individual name binding in the qualified name, without the
            qualification. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedName-templateName"
        name="templateName" visibility="public" type="QualifiedName" lower="0" isDerived="true"
        association="_packagedElement.84"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AssignmentExpression" name="AssignmentExpression"
      superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AssignmentExpression-_ownedComment.0"
        annotatedElement="AssignmentExpression">
        <body>An expression used to assign a value to a local name, parameter or property. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsSimpleDerivation"
        name="assignmentExpressionIsSimpleDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsSimpleDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsSimpleDerivation">
          <body>An assignment expression is a simple assignment if the assignment operator is "=".
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsSimpleDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsArithmeticDerivation"
        name="assignmentExpressionIsArithmeticDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsArithmeticDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsArithmeticDerivation">
          <body>An assignment expression is an arithmetic assignment if its operator is a compound
            assignment operator for an arithmetic operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsArithmeticDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsDefinitionDerivation"
        name="assignmentExpressionIsDefinitionDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsDefinitionDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsDefinitionDerivation">
          <body>An assignment expression is a definition if it is a simple assignment and its left
            hand side is a local name for which there is no assignment before the expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsDefinitionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsFeatureDerivation"
        name="assignmentExpressionIsFeatureDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsFeatureDerivation">
          <body>The left hand side of an assignment expression is a feature if it is a kind of
            FeatureLeftHandSide. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsIndexedDerivation"
        name="assignmentExpressionIsIndexedDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsIndexedDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsIndexedDerivation">
          <body>The left hand side of an assignment expression is indexed if it has an index.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsIndexedDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsDataValueUpdateDerivation"
        name="assignmentExpressionIsDataValueUpdateDerivation"
        constrainedElement="AssignmentExpression" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsDataValueUpdateDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsDataValueUpdateDerivation">
          <body>An assignment expression is a data value update if its left hand side is an
            attribute of a data value held in a local name or parameter. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsDataValueUpdateDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionAssignmentDerivation"
        name="assignmentExpressionAssignmentDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionAssignmentDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionAssignmentDerivation">
          <body>The new assigned source for an assignment to a local name is the assignment
            expression. If the assignment is a definition, then the type is given by the right hand
            side, the multiplicity upper bound is 1 if the upper bound of the right hand side is 1
            and otherwise * and the multiplicity lower bound is 0. Otherwise, the type and
            multiplicity are the same as the left hand side. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionAssignmentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionFeatureDerivation"
        name="assignmentExpressionFeatureDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionFeatureDerivation">
          <body>If the left-hand side of an assignment expression is a feature, then the feature of
            the assignment is the referent of the left-hand side. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionFeatureDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionExpressionDerivation"
        name="assignmentExpressionExpressionDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionExpressionDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionExpressionDerivation">
          <body>For a compound assignment, the effective expression is the left-hand side treated as
            a name expression, property access expression or sequence access expression, as
            appropriate for evaluation to obtain the original value to be updated. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionExpressionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionTypeDerivation"
        name="assignmentExpressionTypeDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionTypeDerivation">
          <body>An assignment expression has the same type as its right-hand side expression.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionUpperDerivation"
        name="assignmentExpressionUpperDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionUpperDerivation">
          <body>An assignment expression has the same multiplicity upper bound as its right-hand
            side expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionLowerDerivation"
        name="assignmentExpressionLowerDerivation" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionLowerDerivation">
          <body>An assignment expression has the same multiplicity lower bound as its right-hand
            side expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentTypeConformance"
        name="assignmentExpressionSimpleAssignmentTypeConformance"
        constrainedElement="AssignmentExpression" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentTypeConformance-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionSimpleAssignmentTypeConformance">
          <body>If the left-hand side of a simple assignment is not a new local name, and the
            right-hand side is not null, then the left-hand side must either be untyped or have a
            type that conforms to the type of the right-hand side expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentTypeConformance-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentMultiplicityConformance"
        name="assignmentExpressionSimpleAssignmentMultiplicityConformance"
        constrainedElement="AssignmentExpression" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentMultiplicityConformance-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionSimpleAssignmentMultiplicityConformance">
          <body>If the left-hand side of a simple assignment is not a new local name and the
            multiplicity upper bound of the left-hand side is less than or equal to 1, then the
            multiplicity upper bound of the right-hand side cannot be greater than that of the
            left-hand side. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionSimpleAssignmentMultiplicityConformance-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentTypeConformance"
        name="assignmentExpressionCompoundAssignmentTypeConformance"
        constrainedElement="AssignmentExpression" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentTypeConformance-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionCompoundAssignmentTypeConformance">
          <body>For a compound assignment, both the left-hand side and the right-hand side must have
            the same type, consistent with the arithmetic or logical operator used in the compound
            assignment operator. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentTypeConformance-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentMultiplicityConformance"
        name="assignmentExpressionCompoundAssignmentMultiplicityConformance"
        constrainedElement="AssignmentExpression" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentMultiplicityConformance-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionCompoundAssignmentMultiplicityConformance">
          <body>For a compound assignment, both the left-hand and right-hand sides must have a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionCompoundAssignmentMultiplicityConformance-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionAssignmentsBefore"
        name="assignmentExpressionAssignmentsBefore" constrainedElement="AssignmentExpression"
        namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionAssignmentsBefore-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionAssignmentsBefore">
          <body>The assigned source of a name before the right-hand side expression of an assignment
            expression is the same as the assigned source before the assignment expression. The
            assigned source of a name before the left-hand side is the assigned source after the
            right-hand side expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionAssignmentsBefore-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsCollectionConversionDerivation"
        name="assignmentExpressionIsCollectionConversionDerivation" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsCollectionConversionDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsCollectionConversionDerivation">
          <body>An assignment requires collection conversion if the type of the right-hand side is a
            collection class and its multiplicity upper bound is 1, and the type of the left-hand
            side is not a collection class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsCollectionConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssignmentExpression-assignmentExpressionIsBitStringConversionDerivation"
        name="assignmentExpressionIsBitStringConversionDerivation" namespace="AssignmentExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignmentExpressionIsBitStringConversionDerivation-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignmentExpressionIsBitStringConversionDerivation">
          <body>An assignment requires BitString conversion if the type of the left-hand side is
            BitString and either the type of the right-hand side is Integer or collection conversion
            is required and the type of the right-hand side is a collection class whose argument
            type is Integer. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssignmentExpression-assignmentExpressionIsBitStringConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-operator"
        name="operator" visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignmentExpression-operator-_ownedComment.0"
          annotatedElement="AssignmentExpression-operator">
          <body>The image of the assignment operator used in the expression. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-leftHandSide"
        name="leftHandSide" visibility="public" type="LeftHandSide" isComposite="true"
        association="_packagedElement.71">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-leftHandSide-_ownedComment.0"
          annotatedElement="AssignmentExpression-leftHandSide">
          <body>The left-hand side of the assignment, to which a value is to be assigned. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-rightHandSide"
        name="rightHandSide" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.76">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-rightHandSide-_ownedComment.0"
          annotatedElement="AssignmentExpression-rightHandSide">
          <body>The right-hand side expression of the assignment, which produces the value being
            assigned. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-assignment"
        name="assignment" visibility="public" type="AssignedSource" lower="0" isDerived="true"
        association="_packagedElement.102">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-assignment-_ownedComment.0"
          annotatedElement="AssignmentExpression-assignment">
          <body>If the left-hand side is a name, then the new assigned source for that name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-feature" name="feature"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.146">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignmentExpression-feature-_ownedComment.0"
          annotatedElement="AssignmentExpression-feature">
          <body>If the left-hand side is a feature, then the referent for that feature. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isIndexed"
        name="isIndexed" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isIndexed-_ownedComment.0"
          annotatedElement="AssignmentExpression-isIndexed">
          <body>If the left-hand side is a feature, whether it has an index or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isArithmetic"
        name="isArithmetic" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isArithmetic-_ownedComment.0"
          annotatedElement="AssignmentExpression-isArithmetic">
          <body>If this is a compound assignment, whether the compound assignment operator is
            arithmetic or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isDefinition"
        name="isDefinition" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isDefinition-_ownedComment.0"
          annotatedElement="AssignmentExpression-isDefinition">
          <body>Whether this assignment is the definition of a new local name or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isSimple"
        name="isSimple" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AssignmentExpression-isSimple-_ownedComment.0"
          annotatedElement="AssignmentExpression-isSimple">
          <body>Whether this is a simple assignment or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-expression"
        name="expression" visibility="public" type="Expression" lower="0" isDerived="true"
        association="_packagedElement.72">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-expression-_ownedComment.0"
          annotatedElement="AssignmentExpression-expression">
          <body>If this is a compound assignment, then the effective expression used to obtain the
            original value of the left-hand side to be updated. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isFeature"
        name="isFeature" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isFeature-_ownedComment.0"
          annotatedElement="AssignmentExpression-isFeature">
          <body>Whether the left-hand side is a feature or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isDataValueUpdate"
        name="isDataValueUpdate" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isDataValueUpdate-_ownedComment.0"
          annotatedElement="AssignmentExpression-isDataValueUpdate">
          <body>Whether this assignment updates an attribute of a data value held in a local name or
            parameter. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isCollectionConversion"
        name="isCollectionConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isCollectionConversion-_ownedComment.0"
          annotatedElement="AssignmentExpression-isCollectionConversion">
          <body>Whether collection conversion is required for this assignment. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AssignmentExpression-isBitStringConversion"
        name="isBitStringConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-isBitStringConversion-_ownedComment.0"
          annotatedElement="AssignmentExpression-isBitStringConversion">
          <body>Whether BitString conversion is required for this assignment. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="AssignmentExpression-updateAssignments"
        name="updateAssignments" visibility="public" class="AssignmentExpression"
        redefinedOperation="Expression-updateAssignments">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssignmentExpression-updateAssignments-_ownedComment.0"
          annotatedElement="AssignmentExpression-updateAssignments">
          <body>The assignments after an assignment expression are the assignments after the
            left-hand side, updated by the assignment from the assignment statement, if any. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="AssignmentExpression-updateAssignments-_ownedParameter.0" name=""
          visibility="public" type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BehaviorInvocationExpression"
      name="BehaviorInvocationExpression" superClass="InvocationExpression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehaviorInvocationExpression-_ownedComment.0"
        annotatedElement="BehaviorInvocationExpression">
        <body>An invocation of a behavior referenced by name. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentDerivation"
        name="behaviorInvocationExpressionReferentDerivation"
        constrainedElement="BehaviorInvocationExpression" namespace="BehaviorInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentDerivation-_ownedComment.0"
          annotatedElement="BehaviorInvocationExpression-behaviorInvocationExpressionReferentDerivation">
          <body>The referent of a behavior invocation expression is the behavior named by the target
            or, if the target disambiguates to a feature reference, the operation or signal being
            invoked. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionFeatureDerivation"
        name="behaviorInvocationExpressionFeatureDerivation"
        constrainedElement="BehaviorInvocationExpression" namespace="BehaviorInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionFeatureDerivation-_ownedComment.0"
          annotatedElement="BehaviorInvocationExpression-behaviorInvocationExpressionFeatureDerivation">
          <body>If the target qualified name disambiguates to a feature reference, then the feature
            of a behavior invocation expression is that feature reference. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentConstraint"
        name="behaviorInvocationExpressionReferentConstraint"
        constrainedElement="BehaviorInvocationExpression" namespace="BehaviorInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentConstraint-_ownedComment.0"
          annotatedElement="BehaviorInvocationExpression-behaviorInvocationExpressionReferentConstraint">
          <body>If the target qualified name does not disambiguate to a feature reference, then it
            must resolve to a behavior or an association end. Otherwise it must resolve to a single
            feature referent according to the overloading resolution rules, unless it is an implicit
            destructor call (in which case it has no referent). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionReferentConstraint-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionArgumentCompatibility"
        name="behaviorInvocationExpressionArgumentCompatibility"
        constrainedElement="BehaviorInvocationExpression" namespace="BehaviorInvocationExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionArgumentCompatibility-_ownedComment.0"
          annotatedElement="BehaviorInvocationExpression-behaviorInvocationExpressionArgumentCompatibility">
          <body>An input argument expression must be assignable to its corresponding parameter. An
            output parameter must be assignable to its corresponding argument expression. (Note that
            this implies that the type of an argument expression for an inout parameter must be the
            same as the type of that parameter.) </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BehaviorInvocationExpression-behaviorInvocationExpressionArgumentCompatibility-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehaviorInvocationExpression-target"
        name="target" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.120">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BehaviorInvocationExpression-target-_ownedComment.0"
          annotatedElement="BehaviorInvocationExpression-target">
          <body>The qualified name of the behavior to be invoked. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ThisExpression" name="ThisExpression"
      superClass="Expression">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ThisExpression-_ownedComment.0"
        annotatedElement="ThisExpression">
        <body>An expression comprising the keyword “this”. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ThisExpression-thisExpressionTypeDerivation"
        name="thisExpressionTypeDerivation" constrainedElement="ThisExpression"
        namespace="ThisExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ThisExpression-thisExpressionTypeDerivation-_ownedComment.0"
          annotatedElement="ThisExpression-thisExpressionTypeDerivation">
          <body>The static type of a this expression is the statically determined context classifier
            for the context in which the this expression occurs. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ThisExpression-thisExpressionTypeDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ThisExpression-thisExpressionUpperDerivation"
        name="thisExpressionUpperDerivation" constrainedElement="ThisExpression"
        namespace="ThisExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ThisExpression-thisExpressionUpperDerivation-_ownedComment.0"
          annotatedElement="ThisExpression-thisExpressionUpperDerivation">
          <body>The multiplicity upper bound of a this expression is always 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ThisExpression-thisExpressionUpperDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ThisExpression-thisExpressionLowerDerivation"
        name="thisExpressionLowerDerivation" constrainedElement="ThisExpression"
        namespace="ThisExpression">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ThisExpression-thisExpressionLowerDerivation-_ownedComment.0"
          annotatedElement="ThisExpression-thisExpressionLowerDerivation">
          <body>The multiplicity lower bound of a this expression is always 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ThisExpression-thisExpressionLowerDerivation-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.70" name=""
      visibility="private" memberEnd="_packagedElement.70-_ownedEnd.0 InvocationExpression-feature">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.70-_ownedEnd.0" name=""
        visibility="private" type="InvocationExpression" owningAssociation="_packagedElement.70"
        association="_packagedElement.70"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.71" name=""
      visibility="private"
      memberEnd="_packagedElement.71-_ownedEnd.0 AssignmentExpression-leftHandSide">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.71-_ownedEnd.0" name=""
        visibility="public" type="AssignmentExpression" lower="0"
        owningAssociation="_packagedElement.71" association="_packagedElement.71"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.72" name=""
      visibility="private"
      memberEnd="_packagedElement.72-_ownedEnd.0 AssignmentExpression-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.72-_ownedEnd.0" name=""
        visibility="private" type="AssignmentExpression" owningAssociation="_packagedElement.72"
        association="_packagedElement.72"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.73" name=""
      visibility="private"
      memberEnd="_packagedElement.73-_ownedEnd.0 NamedTemplateBinding-substitution">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.73-_ownedEnd.0" name=""
        visibility="private" type="NamedTemplateBinding" lower="0"
        owningAssociation="_packagedElement.73" association="_packagedElement.73"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.74" name=""
      visibility="private" memberEnd="Expression-assignmentAfter _packagedElement.74-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.74-_ownedEnd.0" name=""
        visibility="private" type="Expression" owningAssociation="_packagedElement.74"
        association="_packagedElement.74"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.75" name=""
      visibility="private" memberEnd="_packagedElement.75-_ownedEnd.0 QualifiedName-nameBinding">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.75-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" lower="0" owningAssociation="_packagedElement.75"
        association="_packagedElement.75"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.76" name=""
      visibility="private"
      memberEnd="_packagedElement.76-_ownedEnd.0 AssignmentExpression-rightHandSide">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.76-_ownedEnd.0" name=""
        visibility="public" type="AssignmentExpression" lower="0"
        owningAssociation="_packagedElement.76" association="_packagedElement.76"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.77" name=""
      visibility="private"
      memberEnd="_packagedElement.77-_ownedEnd.0 NameExpression-enumerationLiteral">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.77-_ownedEnd.0" name=""
        visibility="private" type="NameExpression" owningAssociation="_packagedElement.77"
        association="_packagedElement.77"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.78" name=""
      visibility="private" memberEnd="NameLeftHandSide-target _packagedElement.78-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.78-_ownedEnd.0" name=""
        visibility="public" type="NameLeftHandSide" lower="0"
        owningAssociation="_packagedElement.78" association="_packagedElement.78"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.79" name=""
      visibility="private"
      memberEnd="_packagedElement.79-_ownedEnd.0 FeatureInvocationExpression-target">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.79-_ownedEnd.0" name=""
        visibility="public" type="FeatureInvocationExpression" lower="0"
        owningAssociation="_packagedElement.79" association="_packagedElement.79"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.80" name=""
      visibility="private"
      memberEnd="SequenceReductionExpression-behaviorName _packagedElement.80-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.80-_ownedEnd.0" name=""
        visibility="public" type="SequenceReductionExpression" lower="0"
        owningAssociation="_packagedElement.80" association="_packagedElement.80"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.81" name=""
      visibility="private"
      memberEnd="_packagedElement.81-_ownedEnd.0 ClassExtentExpression-className">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.81-_ownedEnd.0" name=""
        visibility="public" type="ClassExtentExpression" lower="0"
        owningAssociation="_packagedElement.81" association="_packagedElement.81"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.82" name=""
      visibility="private"
      memberEnd="SequenceOperationExpression-operation _packagedElement.82-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.82-_ownedEnd.0" name=""
        visibility="private" type="SequenceOperationExpression" lower="0"
        owningAssociation="_packagedElement.82" association="_packagedElement.82"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.83" name=""
      visibility="private"
      memberEnd="_packagedElement.83-_ownedEnd.0 SequenceOperationExpression-primary">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.83-_ownedEnd.0" name=""
        visibility="public" type="SequenceOperationExpression"
        owningAssociation="_packagedElement.83" association="_packagedElement.83"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.84" name=""
      visibility="private" memberEnd="_packagedElement.84-_ownedEnd.0 QualifiedName-templateName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.84-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" owningAssociation="_packagedElement.84"
        association="_packagedElement.84"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.85" name=""
      visibility="private"
      memberEnd="_packagedElement.85-_ownedEnd.0 SequenceAccessExpression-index">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.85-_ownedEnd.0" name=""
        visibility="public" type="SequenceAccessExpression" lower="0"
        owningAssociation="_packagedElement.85" association="_packagedElement.85"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.86" name=""
      visibility="private"
      memberEnd="_packagedElement.86-_ownedEnd.0 SuperInvocationExpression-target">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.86-_ownedEnd.0" name=""
        visibility="public" type="SuperInvocationExpression" lower="0"
        owningAssociation="_packagedElement.86" association="_packagedElement.86"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.87" name=""
      visibility="private" memberEnd="FeatureReference-referent _packagedElement.87-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.87-_ownedEnd.0" name=""
        visibility="private" type="FeatureReference" owningAssociation="_packagedElement.87"
        association="_packagedElement.87"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.88" name=""
      visibility="private" memberEnd="_packagedElement.88-_ownedEnd.0 QualifiedName-unqualifiedName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.88-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" owningAssociation="_packagedElement.88"
        association="_packagedElement.88"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.89" name=""
      visibility="private" memberEnd="SequenceRange-rangeLower _packagedElement.89-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.89-_ownedEnd.0" name=""
        visibility="public" type="SequenceRange" lower="0" owningAssociation="_packagedElement.89"
        association="_packagedElement.89"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.90" name=""
      visibility="private" memberEnd="_packagedElement.90-_ownedEnd.0 NameExpression-propertyAccess">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.90-_ownedEnd.0" name=""
        visibility="private" type="NameExpression" owningAssociation="_packagedElement.90"
        association="_packagedElement.90"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.91" name=""
      visibility="private" memberEnd="NameBinding-binding _packagedElement.91-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.91-_ownedEnd.0" name=""
        visibility="private" type="NameBinding" lower="0" owningAssociation="_packagedElement.91"
        association="_packagedElement.91"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.92" name=""
      visibility="private"
      memberEnd="_packagedElement.92-_ownedEnd.0 SequenceAccessExpression-primary">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.92-_ownedEnd.0" name=""
        visibility="public" type="SequenceAccessExpression" lower="0"
        owningAssociation="_packagedElement.92" association="_packagedElement.92"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.93" name=""
      visibility="private"
      memberEnd="_packagedElement.93-_ownedEnd.0 IncrementOrDecrementExpression-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.93-_ownedEnd.0" name=""
        visibility="private" type="IncrementOrDecrementExpression"
        owningAssociation="_packagedElement.93" association="_packagedElement.93"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.94" name=""
      visibility="private" memberEnd="_packagedElement.94-_ownedEnd.0 Expression-type">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.94-_ownedEnd.0" name=""
        visibility="private" type="Expression" owningAssociation="_packagedElement.94"
        association="_packagedElement.94"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.95" name=""
      visibility="private"
      memberEnd="_packagedElement.95-_ownedEnd.0 SequenceExpansionExpression-argument">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.95-_ownedEnd.0" name=""
        visibility="public" type="SequenceExpansionExpression" lower="0"
        owningAssociation="_packagedElement.95" association="_packagedElement.95"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.96" name=""
      visibility="private" memberEnd="_packagedElement.96-_ownedEnd.0 CastExpression-typeName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.96-_ownedEnd.0" name=""
        visibility="public" type="CastExpression" lower="0" owningAssociation="_packagedElement.96"
        association="_packagedElement.96"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.97" name=""
      visibility="private"
      memberEnd="_packagedElement.97-_ownedEnd.0 InvocationExpression-parameter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.97-_ownedEnd.0" name=""
        visibility="private" type="InvocationExpression" owningAssociation="_packagedElement.97"
        association="_packagedElement.97"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.98" name=""
      visibility="private"
      memberEnd="_packagedElement.98-_ownedEnd.0 IncrementOrDecrementExpression-feature">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.98-_ownedEnd.0" name=""
        visibility="private" type="IncrementOrDecrementExpression"
        owningAssociation="_packagedElement.98" association="_packagedElement.98"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.99" name=""
      visibility="private"
      memberEnd="_packagedElement.99-_ownedEnd.0 ExtentOrExpression-nonNameExpression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.99-_ownedEnd.0" name=""
        visibility="private" type="ExtentOrExpression" lower="0"
        owningAssociation="_packagedElement.99" association="_packagedElement.99"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.100" name=""
      visibility="private"
      memberEnd="PositionalTemplateBinding-argumentName _packagedElement.100-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.100-_ownedEnd.0" name=""
        visibility="private" type="PositionalTemplateBinding" lower="0"
        owningAssociation="_packagedElement.100" association="_packagedElement.100"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.101" name=""
      visibility="private" memberEnd="NamedExpression-expression _packagedElement.101-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.101-_ownedEnd.0" name=""
        visibility="public" type="NamedExpression" lower="0"
        owningAssociation="_packagedElement.101" association="_packagedElement.101"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.102" name=""
      visibility="private"
      memberEnd="_packagedElement.102-_ownedEnd.0 AssignmentExpression-assignment">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.102-_ownedEnd.0" name=""
        visibility="private" type="AssignmentExpression" owningAssociation="_packagedElement.102"
        association="_packagedElement.102"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.103" name=""
      visibility="private"
      memberEnd="_packagedElement.103-_ownedEnd.0 IncrementOrDecrementExpression-operand">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.103-_ownedEnd.0" name=""
        visibility="private" type="IncrementOrDecrementExpression" lower="0"
        owningAssociation="_packagedElement.103" association="_packagedElement.103"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.104" name=""
      visibility="private"
      memberEnd="TemplateParameterSubstitution-argumentName _packagedElement.104-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.104-_ownedEnd.0" name=""
        visibility="private" type="TemplateParameterSubstitution" lower="0"
        owningAssociation="_packagedElement.104" association="_packagedElement.104"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.105" name=""
      visibility="private" memberEnd="_packagedElement.105-_ownedEnd.0 QualifiedName-qualification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.105-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" owningAssociation="_packagedElement.105"
        association="_packagedElement.105"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.106" name=""
      visibility="private" memberEnd="_packagedElement.106-_ownedEnd.0 NamedTuple-namedExpression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.106-_ownedEnd.0" name=""
        visibility="public" type="NamedTuple" lower="0" owningAssociation="_packagedElement.106"
        association="_packagedElement.106"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.107" name=""
      visibility="private"
      memberEnd="_packagedElement.107-_ownedEnd.0 ClassificationExpression-typeName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.107-_ownedEnd.0" name=""
        visibility="public" type="ClassificationExpression" lower="0"
        owningAssociation="_packagedElement.107" association="_packagedElement.107"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.108" name=""
      visibility="private" memberEnd="InvocationExpression-tuple Tuple-invocation"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.109" name=""
      visibility="private"
      memberEnd="_packagedElement.109-_ownedEnd.0 SequenceExpansionExpression-variableSource">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.109-_ownedEnd.0" name=""
        visibility="private" type="SequenceExpansionExpression"
        owningAssociation="_packagedElement.109" association="_packagedElement.109"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.110" name=""
      visibility="private"
      memberEnd="ClassificationExpression-referent _packagedElement.110-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.110-_ownedEnd.0" name=""
        visibility="private" type="ClassificationExpression"
        owningAssociation="_packagedElement.110" association="_packagedElement.110"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.111" name=""
      visibility="private"
      memberEnd="LeftHandSide-assignmentBefore _packagedElement.111-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.111-_ownedEnd.0" name=""
        visibility="private" type="LeftHandSide" owningAssociation="_packagedElement.111"
        association="_packagedElement.111"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.112" name=""
      visibility="private" memberEnd="_packagedElement.112-_ownedEnd.0 BinaryExpression-operand2">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.112-_ownedEnd.0" name=""
        visibility="public" type="BinaryExpression" lower="0"
        owningAssociation="_packagedElement.112" association="_packagedElement.112"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.113" name=""
      visibility="private"
      memberEnd="_packagedElement.113-_ownedEnd.0 LinkOperationExpression-associationName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.113-_ownedEnd.0" name=""
        visibility="private" type="LinkOperationExpression" lower="0"
        owningAssociation="_packagedElement.113" association="_packagedElement.113"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.114" name=""
      visibility="private" memberEnd="_packagedElement.114-_ownedEnd.0 Tuple-input">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.114-_ownedEnd.0" name=""
        visibility="private" type="Tuple" owningAssociation="_packagedElement.114"
        association="_packagedElement.114"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.115" name=""
      visibility="private"
      memberEnd="_packagedElement.115-_ownedEnd.0 IncrementOrDecrementExpression-assignment">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.115-_ownedEnd.0" name=""
        visibility="private" type="IncrementOrDecrementExpression"
        owningAssociation="_packagedElement.115" association="_packagedElement.115"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.116" name=""
      visibility="private" memberEnd="CastExpression-operand _packagedElement.116-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.116-_ownedEnd.0" name=""
        visibility="public" type="CastExpression" lower="0" owningAssociation="_packagedElement.116"
        association="_packagedElement.116"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.117" name=""
      visibility="private" memberEnd="_packagedElement.117-_ownedEnd.0 PositionalTuple-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.117-_ownedEnd.0" name=""
        visibility="public" type="PositionalTuple" lower="0"
        owningAssociation="_packagedElement.117" association="_packagedElement.117"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.118" name=""
      visibility="private" memberEnd="Tuple-output _packagedElement.118-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.118-_ownedEnd.0" name=""
        visibility="private" type="Tuple" owningAssociation="_packagedElement.118"
        association="_packagedElement.118"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.119" name=""
      visibility="private"
      memberEnd="ConditionalTestExpression-operand1 _packagedElement.119-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.119-_ownedEnd.0" name=""
        visibility="public" type="ConditionalTestExpression" lower="0"
        owningAssociation="_packagedElement.119" association="_packagedElement.119"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.120" name=""
      visibility="private"
      memberEnd="_packagedElement.120-_ownedEnd.0 BehaviorInvocationExpression-target">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.120-_ownedEnd.0" name=""
        visibility="public" type="BehaviorInvocationExpression" lower="0"
        owningAssociation="_packagedElement.120" association="_packagedElement.120"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.121" name=""
      visibility="private" memberEnd="_packagedElement.121-_ownedEnd.0 QualifiedName-referent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.121-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" owningAssociation="_packagedElement.121"
        association="_packagedElement.121"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.122" name=""
      visibility="private"
      memberEnd="_packagedElement.122-_ownedEnd.0 InstanceCreationExpression-constructor">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.122-_ownedEnd.0" name=""
        visibility="public" type="InstanceCreationExpression" lower="0"
        owningAssociation="_packagedElement.122" association="_packagedElement.122"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.123" name=""
      visibility="private"
      memberEnd="SequenceReductionExpression-primary _packagedElement.123-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.123-_ownedEnd.0" name=""
        visibility="public" type="SequenceReductionExpression" lower="0"
        owningAssociation="_packagedElement.123" association="_packagedElement.123"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.124" name=""
      visibility="private"
      memberEnd="PropertyAccessExpression-feature _packagedElement.124-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.124-_ownedEnd.0" name=""
        visibility="private" type="PropertyAccessExpression"
        owningAssociation="_packagedElement.124" association="_packagedElement.124"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.125" name=""
      visibility="private"
      memberEnd="SequenceExpansionExpression-primary _packagedElement.125-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.125-_ownedEnd.0" name=""
        visibility="private" type="SequenceExpansionExpression" lower="0"
        owningAssociation="_packagedElement.125" association="_packagedElement.125"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.126" name=""
      visibility="private" memberEnd="_packagedElement.126-_ownedEnd.0 LeftHandSide-assignmentAfter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.126-_ownedEnd.0" name=""
        visibility="private" type="LeftHandSide" owningAssociation="_packagedElement.126"
        association="_packagedElement.126"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.127" name=""
      visibility="private" memberEnd="_packagedElement.127-_ownedEnd.0 LeftHandSide-index">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.127-_ownedEnd.0" name=""
        visibility="public" type="LeftHandSide" lower="0" owningAssociation="_packagedElement.127"
        association="_packagedElement.127"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.128" name=""
      visibility="private" memberEnd="NameExpression-name _packagedElement.128-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.128-_ownedEnd.0" name=""
        visibility="public" type="NameExpression" lower="0" owningAssociation="_packagedElement.128"
        association="_packagedElement.128"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.129" name=""
      visibility="private" memberEnd="FeatureReference-expression _packagedElement.129-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.129-_ownedEnd.0" name=""
        visibility="public" type="FeatureReference" lower="0"
        owningAssociation="_packagedElement.129" association="_packagedElement.129"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.130" name=""
      visibility="private"
      memberEnd="_packagedElement.130-_ownedEnd.0 SequenceReductionExpression-referent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.130-_ownedEnd.0" name=""
        visibility="private" type="SequenceReductionExpression"
        owningAssociation="_packagedElement.130" association="_packagedElement.130"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.131" name=""
      visibility="private"
      memberEnd="_packagedElement.131-_ownedEnd.0 SequenceExpressionList-element">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.131-_ownedEnd.0" name=""
        visibility="public" type="SequenceExpressionList" owningAssociation="_packagedElement.131"
        association="_packagedElement.131"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.132" name=""
      visibility="private"
      memberEnd="_packagedElement.132-_ownedEnd.0 PropertyAccessExpression-featureReference">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.132-_ownedEnd.0" name=""
        visibility="private" type="PropertyAccessExpression" lower="0"
        owningAssociation="_packagedElement.132" association="_packagedElement.132"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.133" name=""
      visibility="private" memberEnd="_packagedElement.133-_ownedEnd.0 ExtentOrExpression-name">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.133-_ownedEnd.0" name=""
        visibility="private" type="ExtentOrExpression" lower="0"
        owningAssociation="_packagedElement.133" association="_packagedElement.133"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.134" name=""
      visibility="private"
      memberEnd="_packagedElement.134-_ownedEnd.0 OutputNamedExpression-leftHandSide">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.134-_ownedEnd.0" name=""
        visibility="private" type="OutputNamedExpression" owningAssociation="_packagedElement.134"
        association="_packagedElement.134"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.135" name=""
      visibility="private"
      memberEnd="_packagedElement.135-_ownedEnd.0 ExtentOrExpression-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.135-_ownedEnd.0" name=""
        visibility="private" type="ExtentOrExpression" owningAssociation="_packagedElement.135"
        association="_packagedElement.135"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.136" name=""
      visibility="private" memberEnd="_packagedElement.136-_ownedEnd.0 QualifiedName-disambiguation">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.136-_ownedEnd.0" name=""
        visibility="private" type="QualifiedName" owningAssociation="_packagedElement.136"
        association="_packagedElement.136"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.137" name=""
      visibility="private"
      memberEnd="_packagedElement.137-_ownedEnd.0 InvocationExpression-referent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.137-_ownedEnd.0" name=""
        visibility="private" type="InvocationExpression" owningAssociation="_packagedElement.137"
        association="_packagedElement.137"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.138" name=""
      visibility="private" memberEnd="NameExpression-assignment _packagedElement.138-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.138-_ownedEnd.0" name=""
        visibility="private" type="NameExpression" owningAssociation="_packagedElement.138"
        association="_packagedElement.138"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.139" name=""
      visibility="private"
      memberEnd="_packagedElement.139-_ownedEnd.0 SequenceConstructionExpression-elements">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.139-_ownedEnd.0" name=""
        visibility="public" type="SequenceConstructionExpression" lower="0"
        owningAssociation="_packagedElement.139" association="_packagedElement.139"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.140" name=""
      visibility="private"
      memberEnd="_packagedElement.140-_ownedEnd.0 ConditionalTestExpression-operand3">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.140-_ownedEnd.0" name=""
        visibility="public" type="ConditionalTestExpression" lower="0"
        owningAssociation="_packagedElement.140" association="_packagedElement.140"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.141" name=""
      visibility="private" memberEnd="_packagedElement.141-_ownedEnd.0 FeatureReference-nameBinding">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.141-_ownedEnd.0" name=""
        visibility="private" type="FeatureReference" lower="0"
        owningAssociation="_packagedElement.141" association="_packagedElement.141"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.142" name=""
      visibility="private" memberEnd="_packagedElement.142-_ownedEnd.0 SequenceRange-rangeUpper">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.142-_ownedEnd.0" name=""
        visibility="public" type="SequenceRange" lower="0" owningAssociation="_packagedElement.142"
        association="_packagedElement.142"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.143" name=""
      visibility="private"
      memberEnd="_packagedElement.143-_ownedEnd.0 ConditionalTestExpression-operand2">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.143-_ownedEnd.0" name=""
        visibility="public" type="ConditionalTestExpression" lower="0"
        owningAssociation="_packagedElement.143" association="_packagedElement.143"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.144" name=""
      visibility="private" memberEnd="UnaryExpression-operand _packagedElement.144-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.144-_ownedEnd.0" name=""
        visibility="public" type="UnaryExpression" lower="0"
        owningAssociation="_packagedElement.144" association="_packagedElement.144"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.145" name=""
      visibility="private" memberEnd="FeatureLeftHandSide-feature _packagedElement.145-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.145-_ownedEnd.0" name=""
        visibility="public" type="FeatureLeftHandSide" lower="0"
        owningAssociation="_packagedElement.145" association="_packagedElement.145"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.146" name=""
      visibility="private" memberEnd="AssignmentExpression-feature _packagedElement.146-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.146-_ownedEnd.0" name=""
        visibility="private" type="AssignmentExpression" owningAssociation="_packagedElement.146"
        association="_packagedElement.146"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.147" name=""
      visibility="private" memberEnd="_packagedElement.147-_ownedEnd.0 BinaryExpression-operand1">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.147-_ownedEnd.0" name=""
        visibility="public" type="BinaryExpression" lower="0"
        owningAssociation="_packagedElement.147" association="_packagedElement.147"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.148" name=""
      visibility="private" memberEnd="_packagedElement.148-_ownedEnd.0 NamedExpression-index">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.148-_ownedEnd.0" name=""
        visibility="public" type="NamedExpression" lower="0"
        owningAssociation="_packagedElement.148" association="_packagedElement.148"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.149" name=""
      visibility="private" memberEnd="_packagedElement.149-_ownedEnd.0 Expression-assignmentBefore">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.149-_ownedEnd.0" name=""
        visibility="private" type="Expression" owningAssociation="_packagedElement.149"
        association="_packagedElement.149"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.150" name=""
      visibility="private" memberEnd="_packagedElement.150-_ownedEnd.0 SwitchClause-block">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.150-_ownedEnd.0" name=""
        visibility="public" type="SwitchClause" lower="0" owningAssociation="_packagedElement.150"
        association="_packagedElement.150"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.151" name=""
      visibility="private" memberEnd="AssignedSource-source _packagedElement.151-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.151-_ownedEnd.0" name=""
        visibility="private" type="AssignedSource" owningAssociation="_packagedElement.151"
        association="_packagedElement.151"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.152" name=""
      visibility="private"
      memberEnd="_packagedElement.152-_ownedEnd.0 InternalElementReference-element">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.152-_ownedEnd.0" name=""
        visibility="private" type="InternalElementReference"
        owningAssociation="_packagedElement.152" association="_packagedElement.152"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.153" name=""
      visibility="private"
      memberEnd="ExternalElementReference-element _packagedElement.153-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.153-_ownedEnd.0" name=""
        visibility="private" type="ExternalElementReference"
        owningAssociation="_packagedElement.153" association="_packagedElement.153"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InLineStatement" name="InLineStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InLineStatement-_ownedComment.0"
        annotatedElement="InLineStatement">
        <body>A statement that executes code in a language other than Alf. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="InLineStatement-inLineStatementAssignmentsAfter"
        name="inLineStatementAssignmentsAfter" constrainedElement="InLineStatement"
        namespace="InLineStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="InLineStatement-inLineStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="InLineStatement-inLineStatementAssignmentsAfter">
          <body>The assignments after an in-line statement are the same as the assignments before
            the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="InLineStatement-inLineStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InLineStatement-language" name="language"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InLineStatement-language-_ownedComment.0"
          annotatedElement="InLineStatement-language">
          <body>The name of the language in which the code is written. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InLineStatement-code" name="code"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InLineStatement-code-_ownedComment.0"
          annotatedElement="InLineStatement-code">
          <body>The in-line code to be executed. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="EmptyStatement" name="EmptyStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="EmptyStatement-_ownedComment.0"
        annotatedElement="EmptyStatement">
        <body>A statement that has no affect when executed. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="EmptyStatement-emptyStatementAssignmentsAfter"
        name="emptyStatementAssignmentsAfter" constrainedElement="EmptyStatement"
        namespace="EmptyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EmptyStatement-emptyStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="EmptyStatement-emptyStatementAssignmentsAfter">
          <body>The assignments after and empty statement are the same as the assignments before the
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EmptyStatement-emptyStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="EmptyStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="EmptyStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EmptyStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="EmptyStatement-annotationAllowed">
          <body>An empty statement may not have any annotations. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EmptyStatement-annotationAllowed-annotation" name="annotation" visibility="public"
          type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EmptyStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SwitchStatement" name="SwitchStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchStatement-_ownedComment.0"
        annotatedElement="SwitchStatement">
        <body>A statement that executes (at most) one of a set of statement sequences based on
          matching a switch value to a set of test cases. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SwitchStatement-switchStatementAssignmentsBefore"
        name="switchStatementAssignmentsBefore" constrainedElement="SwitchStatement"
        namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementAssignmentsBefore">
          <body>The assignments before all clauses of a switch statement are the same as the
            assignments before the switch statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchStatement-switchStatementCaseAssignments"
        name="switchStatementCaseAssignments" constrainedElement="SwitchStatement"
        namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementCaseAssignments-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementCaseAssignments">
          <body>The same local name may not be assigned in more than one case expression in a switch
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementCaseAssignments-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchStatement-switchStatementAssignmentsAfter"
        name="switchStatementAssignmentsAfter" constrainedElement="SwitchStatement"
        namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementAssignmentsAfter">
          <body>If a name has an assigned source after any clause of a switch statement that is
            different than before that clause (including newly defined names), the assigned source
            after the switch statement is the switch statement. Otherwise, the assigned source of a
            name after the switch statement is the same as before the switch statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchStatement-switchStatementAssignments"
        name="switchStatementAssignments" constrainedElement="SwitchStatement"
        namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementAssignments-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementAssignments">
          <body>If a switch statement does not have a final default clause, then any name that is
            unassigned before the switch statement is unassigned after the switch statement. If a
            switch statement does have a final default clause, then any name that is unassigned
            before the switch statement and is assigned after any one clause of the switch statement
            must also be assigned after every other clause. The type of such names after the switch
            statement is the effective common ancestor of the types of the name in each clause with
            a multiplicity lower bound that is the minimum of the lower bound for the name in each
            clause and a multiplicity upper bound that is the maximum for the name in each clause.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementAssignments-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchStatement-switchStatementExpression"
        name="switchStatementExpression" namespace="SwitchStatement">
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementExpression-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SwitchStatement-switchStatementEnclosedStatements"
        name="switchStatementEnclosedStatements" namespace="SwitchStatement">
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SwitchStatement-switchStatementIsDeterminedDerivation"
        name="switchStatementIsDeterminedDerivation" namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementIsDeterminedDerivation-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementIsDeterminedDerivation">
          <body>An switch statement is determined if it has an @determined annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementIsDeterminedDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SwitchStatement-switchStatementIsAssuredDerivation"
        name="switchStatementIsAssuredDerivation" namespace="SwitchStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-switchStatementIsAssuredDerivation-_ownedComment.0"
          annotatedElement="SwitchStatement-switchStatementIsAssuredDerivation">
          <body>An switch statement is assured if it has an @assured annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchStatement-switchStatementIsAssuredDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchStatement-nonDefaultClause"
        name="nonDefaultClause" visibility="public" type="SwitchClause" upper="*" isComposite="true"
        association="_packagedElement.203">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-nonDefaultClause-_ownedComment.0"
          annotatedElement="SwitchStatement-nonDefaultClause">
          <body>The set of switch clauses whose cases are to be tested against the switch value.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchStatement-expression" name="expression"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.190">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchStatement-expression-_ownedComment.0"
          annotatedElement="SwitchStatement-expression">
          <body>The expression to be evaluated to provide the switch value. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchStatement-defaultClause"
        name="defaultClause" visibility="public" type="Block" lower="0" isComposite="true"
        association="_packagedElement.192">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchStatement-defaultClause-_ownedComment.0"
          annotatedElement="SwitchStatement-defaultClause">
          <body>A sequence of statements to be executed if no switch clause case matches the switch
            value. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchStatement-isAssured" name="isAssured"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchStatement-isAssured-_ownedComment.0"
          annotatedElement="SwitchStatement-isAssured">
          <body>Whether at least one case in the switch statement is assured to match. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchStatement-isDetermined"
        name="isDetermined" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchStatement-isDetermined-_ownedComment.0"
          annotatedElement="SwitchStatement-isDetermined">
          <body>Whether at most one case in the if statement will ever to match. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SwitchStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="SwitchStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="SwitchStatement-annotationAllowed">
          <body>In addition to an @isolated annotation, a switch statement may have @assured and
            @determined annotations. They may not have arguments. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SwitchStatement-annotationAllowed-annotation" name="annotation"
          visibility="public" type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SwitchStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Statement" name="Statement" isAbstract="true"
      superClass="DocumentedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-_ownedComment.0"
        annotatedElement="Statement">
        <body>A model of an Alf statement. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Statement-statementAnnotationsAllowed"
        name="statementAnnotationsAllowed" namespace="Statement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Statement-statementAnnotationsAllowed-_ownedComment.0"
          annotatedElement="Statement-statementAnnotationsAllowed">
          <body>All the annotations of a statement must be allowed, as given by the
            annotationAllowed operation for the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Statement-statementAnnotationsAllowed-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Statement-statementUniqueAssignments"
        name="statementUniqueAssignments" constrainedElement="Expression" namespace="Statement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Statement-statementUniqueAssignments-_ownedComment.0"
          annotatedElement="Statement-statementUniqueAssignments">
          <body>No name may be assigned more than once before or after a statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Statement-statementUniqueAssignments-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Statement-statementIsIsolatedDerivation"
        name="statementIsIsolatedDerivation" namespace="Statement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Statement-statementIsIsolatedDerivation-_ownedComment.0"
          annotatedElement="Statement-statementIsIsolatedDerivation">
          <body>A statement is isolated if it has an @isolated annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Statement-statementIsIsolatedDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Statement-annotation" name="annotation"
        visibility="public" type="Annotation" upper="*" isComposite="true"
        association="_packagedElement.183">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-annotation-_ownedComment.0"
          annotatedElement="Statement-annotation">
          <body>The annotations applied to this statement. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Statement-assignmentBefore"
        name="assignmentBefore" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.222">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-assignmentBefore-_ownedComment.0"
          annotatedElement="Statement-assignmentBefore">
          <body>The assigned sources for local names available lexically before this statement.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Statement-assignmentAfter"
        name="assignmentAfter" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.216">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-assignmentAfter-_ownedComment.0"
          annotatedElement="Statement-assignmentAfter">
          <body>The assigned sources for local names available lexically after this statement. This
            includes not only any assignments made within the statement, but also any assignments
            that are unchanged from before the statement. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Statement-enclosingStatement"
        name="enclosingStatement" visibility="public" type="Statement" lower="0" isDerived="true"
        association="_packagedElement.223">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-enclosingStatement-_ownedComment.0"
          annotatedElement="Statement-enclosingStatement">
          <body>The statement immediately enclosing this statement, if any. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Statement-isIsolated" name="isIsolated"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-isIsolated-_ownedComment.0"
          annotatedElement="Statement-isIsolated">
          <body>Whether this statement should be executed in isolation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Statement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="Statement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Statement-annotationAllowed-_ownedComment.0"
          annotatedElement="Statement-annotationAllowed">
          <body>Returns true if the given annotation is allowed for this kind of statement. By
            default, only an @isolated annotation is allowed, with no arguments. This operation is
            redefined only in subclasses of Statement for kinds of statements that allow different
            annotations than this default. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Statement-annotationAllowed-annotation"
          name="annotation" visibility="public" type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="Statement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AcceptBlock" name="AcceptBlock"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptBlock-_ownedComment.0"
        annotatedElement="AcceptBlock">
        <body>A block of an accept statement that accepts one or more signals. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptBlock-acceptBlockSignalDerivation"
        name="acceptBlockSignalDerivation" namespace="AcceptBlock">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptBlock-acceptBlockSignalDerivation-_ownedComment.0"
          annotatedElement="AcceptBlock-acceptBlockSignalDerivation">
          <body>The signals of an accept block are the referents of the signal names of the accept
            block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptBlock-acceptBlockSignalDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptBlock-acceptBlockSignalNames"
        name="acceptBlockSignalNames" namespace="AcceptBlock">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptBlock-acceptBlockSignalNames-_ownedComment.0"
          annotatedElement="AcceptBlock-acceptBlockSignalNames">
          <body>All signal names in an accept block must resolve to signals. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptBlock-acceptBlockSignalNames-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptBlock-name" name="name"
        visibility="public" lower="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptBlock-name-_ownedComment.0"
          annotatedElement="AcceptBlock-name">
          <body>The local name to which an accepted signal instance will be assigned. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptBlock-block" name="block"
        visibility="public" type="Block" lower="0" isComposite="true"
        association="_packagedElement.178">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptBlock-block-_ownedComment.0"
          annotatedElement="AcceptBlock-block">
          <body>The body of the accept block, executed if one of the named signals is received.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptBlock-signalNames" name="signalNames"
        visibility="public" type="QualifiedNameList" isComposite="true"
        association="_packagedElement.217">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptBlock-signalNames-_ownedComment.0"
          annotatedElement="AcceptBlock-signalNames">
          <body>A list of names of the signals accepted by this accept block. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptBlock-signal" name="signal"
        visibility="public" type="ElementReference" upper="*" isDerived="true"
        association="_packagedElement.181">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptBlock-signal-_ownedComment.0"
          annotatedElement="AcceptBlock-signal">
          <body>The signals denoted by the signal names of the accept block. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="IfStatement" name="IfStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-_ownedComment.0"
        annotatedElement="IfStatement">
        <body>A conditional statement that executes (at most) one of a set of clauses based on
          boolean conditions. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="IfStatement-ifStatementAssignmentsBefore"
        name="ifStatementAssignmentsBefore" constrainedElement="IfStatement" namespace="IfStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IfStatement-ifStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="IfStatement-ifStatementAssignmentsBefore">
          <body>The assignments before all the non-final clauses of an if statement are the same as
            the assignments before the if statement. If the statement has a final clause, then the
            assignments before that clause are also the same as the assignments before the if
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IfStatement-ifStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="IfStatement-ifStatementAssignmentsAfter"
        name="ifStatementAssignmentsAfter" constrainedElement="IfStatement" namespace="IfStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IfStatement-ifStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="IfStatement-ifStatementAssignmentsAfter">
          <body>If an if statement does not have a final else clause, then any name that is
            unassigned before the if statement is unassigned after the if statement. If an if
            statement does have a final else clause, then any name that is unassigned before the if
            statement and is assigned after any one clause of the if statement must also be assigned
            after every other clause. The type of such names after the if statement is the effective
            common ancestor of the types of the name in each clause with a multiplicity lower bound
            that is the minimum of the lower bound for the name in each clause and a multiplicity
            upper bound that is the maximum for the name in each clause. For a name that has an
            assigned source after any clause of an if statement that is different than before that
            clause, then the assigned source after the if statement is the if statement. Otherwise,
            the assigned source of a name after the if statement is the same as before the if
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IfStatement-ifStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="IfStatement-ifStatementEnclosedStatements"
        name="ifStatementEnclosedStatements" namespace="IfStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IfStatement-ifStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="IfStatement-ifStatementEnclosedStatements">
          <body>The enclosing statement of all the statements in the bodies of all non-final clauses
            and in the final clause (if any) of an if statement is the if statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IfStatement-ifStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="IfStatement-ifStatementIsAssuredDerivation"
        name="ifStatementIsAssuredDerivation" namespace="IfStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IfStatement-ifStatementIsAssuredDerivation-_ownedComment.0"
          annotatedElement="IfStatement-ifStatementIsAssuredDerivation">
          <body>An if statement is assured if it has an @assured annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IfStatement-ifStatementIsAssuredDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="IfStatement-ifStatementIsDeterminedDerivation"
        name="ifStatementIsDeterminedDerivation" namespace="IfStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="IfStatement-ifStatementIsDeterminedDerivation-_ownedComment.0"
          annotatedElement="IfStatement-ifStatementIsDeterminedDerivation">
          <body>An if statement is determined if it has an @determined annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="IfStatement-ifStatementIsDeterminedDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IfStatement-nonFinalClauses"
        name="nonFinalClauses" visibility="public" type="ConcurrentClauses" isOrdered="true"
        upper="*" isComposite="true" association="_packagedElement.193">
        <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-nonFinalClauses-_ownedComment.0"
          annotatedElement="IfStatement-nonFinalClauses">
          <body>A list of groupings of concurrent clauses that are to be checked sequentially for a
            successful condition. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IfStatement-finalClause" name="finalClause"
        visibility="public" type="Block" lower="0" isComposite="true"
        association="_packagedElement.194">
        <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-finalClause-_ownedComment.0"
          annotatedElement="IfStatement-finalClause">
          <body>A sequence of statements to be executed if no other clause has a successful
            condition. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IfStatement-isAssured" name="isAssured"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-isAssured-_ownedComment.0"
          annotatedElement="IfStatement-isAssured">
          <body>Whether at least one condition in the if statement is assured to evaluate to true.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="IfStatement-isDetermined" name="isDetermined"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-isDetermined-_ownedComment.0"
          annotatedElement="IfStatement-isDetermined">
          <body>Whether at most one condition in the if statement will ever to evaluate to true.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="IfStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="IfStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment" xmi:id="IfStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="IfStatement-annotationAllowed">
          <body>In addition to an @isolated annotation, an if statement may have @assured and
            @determined annotations. They may not have arguments. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="IfStatement-annotationAllowed-annotation"
          name="annotation" visibility="public" type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="IfStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ReturnStatement" name="ReturnStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ReturnStatement-_ownedComment.0"
        annotatedElement="ReturnStatement">
        <body>A statement that provides a value for the return parameter of an activity. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ReturnStatement-returnStatementContext"
        name="returnStatementContext" constrainedElement="ReturnStatement"
        namespace="ReturnStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReturnStatement-returnStatementContext-_ownedComment.0"
          annotatedElement="ReturnStatement-returnStatementContext">
          <body>The behavior containing the return statement must have a return parameter. The
            expression of the return statement must be assignable to that return parameter. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReturnStatement-returnStatementContext-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ReturnStatement-returnStatementAssignmentsBefore"
        name="returnStatementAssignmentsBefore" constrainedElement="ReturnStatement"
        namespace="ReturnStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReturnStatement-returnStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="ReturnStatement-returnStatementAssignmentsBefore">
          <body>The assignments before the expression of a return statement are the same as the
            assignments before the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReturnStatement-returnStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ReturnStatement-returnStatementAssignmentsAfter"
        name="returnStatementAssignmentsAfter" constrainedElement="ReturnStatement"
        namespace="ReturnStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReturnStatement-returnStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="ReturnStatement-returnStatementAssignmentsAfter">
          <body>The assignments after a return statement are the same as the assignments after the
            expression of the return statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReturnStatement-returnStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReturnStatement-expression" name="expression"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.189">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ReturnStatement-expression-_ownedComment.0"
          annotatedElement="ReturnStatement-expression">
          <body>The expression to be evaluated to provide the returned value. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReturnStatement-behavior" name="behavior"
        visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.210">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ReturnStatement-behavior-_ownedComment.0"
          annotatedElement="ReturnStatement-behavior">
          <body>A reference to the enclosing behavior for this return statement. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SwitchClause" name="SwitchClause"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchClause-_ownedComment.0"
        annotatedElement="SwitchClause">
        <body>A clause in a switch statement with a set of cases and a sequence of statements that
          may be executed if one of the cases matches the switch value. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchClause-switchClauseAssignmentsBefore"
        name="switchClauseAssignmentsBefore" constrainedElement="SwitchClause"
        namespace="SwitchClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchClause-switchClauseAssignmentsBefore-_ownedComment.0"
          annotatedElement="SwitchClause-switchClauseAssignmentsBefore">
          <body>The assignments before any case expression of a switch clause are the same as the
            assignments before the clause. The assignments before the block of a switch clause are
            the assignments after all case expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchClause-switchClauseAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SwitchClause-switchClauseCaseLocalNames"
        name="switchClauseCaseLocalNames" constrainedElement="SwitchClause" namespace="SwitchClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchClause-switchClauseCaseLocalNames-_ownedComment.0"
          annotatedElement="SwitchClause-switchClauseCaseLocalNames">
          <body>If a name is unassigned before a switch clause, then it must be unassigned after all
            case expressions of the clause (i.e., new local names may not be defined in case
            expressions). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SwitchClause-switchClauseCaseLocalNames-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchClause-case" name="case"
        visibility="public" type="Expression" upper="*" isComposite="true"
        association="_packagedElement.184">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchClause-case-_ownedComment.0"
          annotatedElement="SwitchClause-case">
          <body>The expressions to be evaluated to provide values to test against the switch value.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SwitchClause-block" name="block"
        visibility="public" type="Block" isComposite="true" association="_packagedElement.150">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchClause-block-_ownedComment.0"
          annotatedElement="SwitchClause-block">
          <body>The sequence of statements that may be executed if one of the cases matches the
            switch value. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SwitchClause-assignmentsBefore"
        name="assignmentsBefore" visibility="public" class="SwitchClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SwitchClause-assignmentsBefore-_ownedComment.0"
          annotatedElement="SwitchClause-assignmentsBefore">
          <body>The assignments before a switch clause are the assignments before any case
            expression of the clause. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SwitchClause-assignmentsBefore-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SwitchClause-assignmentsAfter"
        name="assignmentsAfter" visibility="public" class="SwitchClause">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SwitchClause-assignmentsAfter-_ownedComment.0"
          annotatedElement="SwitchClause-assignmentsAfter">
          <body>The assignments after a switch clause are the assignments after the block of the
            switch clause. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SwitchClause-assignmentsAfter-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DoStatement" name="DoStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DoStatement-_ownedComment.0"
        annotatedElement="DoStatement">
        <body>A looping statement for which the continuation condition is first tested after the
          first iteration. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DoStatement-doStatementAssignmentsBefore"
        name="doStatementAssignmentsBefore" constrainedElement="DoStatement" namespace="DoStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DoStatement-doStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="DoStatement-doStatementAssignmentsBefore">
          <body>The assignments before the block of a do statement are the same as the assignments
            before the do statement. The assignments before the condition expression of a do
            statement are the same assignments after the block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DoStatement-doStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DoStatement-doStatementAssignmentsAfter"
        name="doStatementAssignmentsAfter" constrainedElement="DoStatement" namespace="DoStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DoStatement-doStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="DoStatement-doStatementAssignmentsAfter">
          <body>If the assigned source for a name after the condition expression is different than
            before the do statement, then the assigned source of the name after the do statement is
            the do statement. Otherwise it is the same as before the do statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DoStatement-doStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DoStatement-doStatementCondition"
        name="doStatementCondition" constrainedElement="DoStatement" namespace="DoStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DoStatement-doStatementCondition-_ownedComment.0"
          annotatedElement="DoStatement-doStatementCondition">
          <body>The condition expression of a do statement must have type Boolean and a multiplicity
            upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DoStatement-doStatementCondition-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DoStatement-doStatementEnclosedStatements"
        name="doStatementEnclosedStatements" namespace="DoStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DoStatement-doStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="DoStatement-doStatementEnclosedStatements">
          <body>The enclosing statement for all statements in the body of a do statement are the do
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DoStatement-doStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DoStatement-condition" name="condition"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.199">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DoStatement-condition-_ownedComment.0"
          annotatedElement="DoStatement-condition">
          <body>The expression to be evaluated to determine whether to continue looping. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DoStatement-body" name="body"
        visibility="public" type="Block" isComposite="true" association="_packagedElement.188">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DoStatement-body-_ownedComment.0"
          annotatedElement="DoStatement-body">
          <body>The sequence of statements to be iteratively executed. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BreakStatement" name="BreakStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BreakStatement-_ownedComment.0"
        annotatedElement="BreakStatement">
        <body>A statement that causes the termination of execution of an immediately enclosing
          block. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BreakStatement-breakStatementTargetDerivation"
        name="breakStatementTargetDerivation" namespace="BreakStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BreakStatement-breakStatementTargetDerivation-_ownedComment.0"
          annotatedElement="BreakStatement-breakStatementTargetDerivation">
          <body>The target of a break statement is the innermost switch, while, do or for statement
            enclosing the break statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BreakStatement-breakStatementTargetDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BreakStatement-breakStatementNonparallelTarget"
        name="breakStatementNonparallelTarget" namespace="BreakStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BreakStatement-breakStatementNonparallelTarget-_ownedComment.0"
          annotatedElement="BreakStatement-breakStatementNonparallelTarget">
          <body>The target of a break statement may not have a @parallel annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BreakStatement-breakStatementNonparallelTarget-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BreakStatement-target" name="target"
        visibility="public" type="Statement" isDerived="true" association="_packagedElement.221">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BreakStatement-target-_ownedComment.0"
          annotatedElement="BreakStatement-target">
          <body>The enclosing statement that is terminated by this break statement. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="BreakStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="BreakStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BreakStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="BreakStatement-annotationAllowed">
          <body>A break statement may not have any annotations. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BreakStatement-annotationAllowed-annotation" name="annotation" visibility="public"
          type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BreakStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExpressionStatement" name="ExpressionStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExpressionStatement-_ownedComment.0"
        annotatedElement="ExpressionStatement">
        <body>A statement that evaluates an expression when executed. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ExpressionStatement-expressionStatementAssignmentsBefore"
        name="expressionStatementAssignmentsBefore" constrainedElement="ExpressionStatement"
        namespace="ExpressionStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExpressionStatement-expressionStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="ExpressionStatement-expressionStatementAssignmentsBefore">
          <body>The assignments before the expression of an expression statement are the same as the
            assignments before the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ExpressionStatement-expressionStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ExpressionStatement-expressionStatementAssignmentsAfter"
        name="expressionStatementAssignmentsAfter" constrainedElement="ExpressionStatement"
        namespace="ExpressionStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExpressionStatement-expressionStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="ExpressionStatement-expressionStatementAssignmentsAfter">
          <body>The assignments after an expression statement are the same as the assignments after
            its expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ExpressionStatement-expressionStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExpressionStatement-expression"
        name="expression" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.182">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ExpressionStatement-expression-_ownedComment.0"
          annotatedElement="ExpressionStatement-expression">
          <body>The expression to be evaluated. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AcceptStatement" name="AcceptStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptStatement-_ownedComment.0"
        annotatedElement="AcceptStatement">
        <body>A statement used to accept the receipt of instances of one or more signals. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptStatement-acceptStatementContext"
        name="acceptStatementContext" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementContext-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementContext">
          <body>An accept statement can only be used within the definition of an active behavior or
            the classifier behavior of an active class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementContext-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptStatement-acceptStatementSignals"
        name="acceptStatementSignals" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementSignals-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementSignals">
          <body>The containing behavior of an accept statement must have receptions for all signals
            from all accept blocks of the accept statement. No signal may be referenced in more than
            one accept block of an accept statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementSignals-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptStatement-acceptStatementNames"
        name="acceptStatementNames" constrainedElement="AcceptStatement" namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementNames-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementNames">
          <body>Any name defined in an accept block of an accept statement must be unassigned before
            the accept statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementNames-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AcceptStatement-acceptStatementSimpleAcceptLocalName"
        name="acceptStatementSimpleAcceptLocalName" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementSimpleAcceptLocalName-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementSimpleAcceptLocalName">
          <body>A local name specified in the accept block of a simple accept statement has the
            accept statement as its assigned source after the accept statement. The type of the
            local name is the effective common ancestor of the specified signals, if one exists, and
            it is untyped otherwise. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementSimpleAcceptLocalName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AcceptStatement-acceptStatementCompoundAcceptLocalName"
        name="acceptStatementCompoundAcceptLocalName" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementCompoundAcceptLocalName-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementCompoundAcceptLocalName">
          <body>For a compound accept statement, a local name defined in an accept block has the
            accept block as its assigned source before the block associated with the accept block.
            The type of the local name is the effective common ancestor of the specified signals for
            that accept clause, if one exists, and it is untyped otherwise. However, the local name
            is considered unassigned after the accept statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementCompoundAcceptLocalName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AcceptStatement-acceptStatementAssignmentsBefore"
        name="acceptStatementAssignmentsBefore" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementAssignmentsBefore">
          <body>The assignments before any block of an accept statement are the assignments before
            the accept statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptStatement-acceptStatementAssignmentsAfter"
        name="acceptStatementAssignmentsAfter" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementAssignmentsAfter">
          <body>If a name is assigned in any block of an accept statement, then the assigned source
            of the name after the accept statement is the accept statement itself. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="AcceptStatement-acceptStatementNewAssignments"
        name="acceptStatementNewAssignments" constrainedElement="AcceptStatement"
        namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementNewAssignments-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementNewAssignments">
          <body>If a name is unassigned before an accept statement and assigned in any block of an
            accept statement, then it must be assigned in every block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementNewAssignments-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AcceptStatement-acceptStatementIsSimpleDerivation"
        name="acceptStatementIsSimpleDerivation" namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementIsSimpleDerivation-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementIsSimpleDerivation">
          <body>An accept statement is simple if it has exactly one accept block and that accept
            block does not have a block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementIsSimpleDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AcceptStatement-acceptStatementEnclosedStatements"
        name="acceptStatementEnclosedStatements" namespace="AcceptStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AcceptStatement-acceptStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptStatementEnclosedStatements">
          <body>The enclosing statement for all statements in the blocks of all accept blocks of an
            accept statement is the accept statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AcceptStatement-acceptStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptStatement-acceptBlock"
        name="acceptBlock" visibility="public" type="AcceptBlock" upper="*" isComposite="true"
        association="_packagedElement.214">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptStatement-acceptBlock-_ownedComment.0"
          annotatedElement="AcceptStatement-acceptBlock">
          <body>One or more blocks for accepting alternate groups of signals. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptStatement-behavior" name="behavior"
        visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.179">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptStatement-behavior-_ownedComment.0"
          annotatedElement="AcceptStatement-behavior">
          <body>The behavior containing the accept statement. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="AcceptStatement-isSimple" name="isSimple"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AcceptStatement-isSimple-_ownedComment.0"
          annotatedElement="AcceptStatement-isSimple">
          <body>Whether the accept statement is simple or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassifyStatement" name="ClassifyStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-_ownedComment.0"
        annotatedElement="ClassifyStatement">
        <body>A statement that changes the classification of an object. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ClassifyStatement-classifyStatementExpression"
        name="classifyStatementExpression" constrainedElement="ClassifyStatement"
        namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementExpression-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementExpression">
          <body>The expression in a classify statement must have a class as its type and
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementExpression-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ClassifyStatement-classifyStatementClassNames"
        name="classifyStatementClassNames" constrainedElement="ClassifyStatement"
        namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementClassNames-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementClassNames">
          <body>All qualified names listed in the from or to lists of a classify statement must
            resolve to classes. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementClassNames-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ClassifyStatement-classifyStatementClasses"
        name="classifyStatementClasses" constrainedElement="ClassifyStatement"
        namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementClasses-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementClasses">
          <body>All the from and to classes of a classify statement must be subclasses of the type
            of the target expression and none of them may have a common superclass that is a
            subclass of the type of the target expression (that is, they must be disjoint
            subclasses). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementClasses-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifyStatement-classifyStatementAssignmentsBefore"
        name="classifyStatementAssignmentsBefore" constrainedElement="ClassifyStatement"
        namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementAssignmentsBefore">
          <body>The assignments before the expression of a classify statement are the same as the
            assignments before the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifyStatement-classifyStatementAssignmentsAfter"
        name="classifyStatementAssignmentsAfter" constrainedElement="ClassifyStatement"
        namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementAssignmentsAfter">
          <body>The assignments after a classify statement are the same as the assignments after its
            expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifyStatement-classifyStatementFromClassDerivation"
        name="classifyStatementFromClassDerivation" namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementFromClassDerivation-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementFromClassDerivation">
          <body>The from classes of a classify statement are the class referents of the qualified
            names in the from list for the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementFromClassDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifyStatement-classifyStatementToClassDerivation"
        name="classifyStatementToClassDerivation" namespace="ClassifyStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-classifyStatementToClassDerivation-_ownedComment.0"
          annotatedElement="ClassifyStatement-classifyStatementToClassDerivation">
          <body>The to classes of a classify statement are the class referents of the qualified
            names in the to list for the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifyStatement-classifyStatementToClassDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-expression"
        name="expression" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.209">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-expression-_ownedComment.0"
          annotatedElement="ClassifyStatement-expression">
          <body>The expression to be evaluated to obtain the object to be reclassified. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-fromList" name="fromList"
        visibility="public" type="QualifiedNameList" lower="0" isComposite="true"
        association="_packagedElement.204">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-fromList-_ownedComment.0"
          annotatedElement="ClassifyStatement-fromList">
          <body>A list of names of classes to be removed as types of the object. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-toList" name="toList"
        visibility="public" type="QualifiedNameList" lower="0" isComposite="true"
        association="_packagedElement.211">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-toList-_ownedComment.0"
          annotatedElement="ClassifyStatement-toList">
          <body>A list of names of classes to be added as types of the object. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-fromClass" name="fromClass"
        visibility="public" type="ElementReference" upper="*" isDerived="true"
        association="_packagedElement.177">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-fromClass-_ownedComment.0"
          annotatedElement="ClassifyStatement-fromClass">
          <body>The classes denoted by the names in the from list. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-toClass" name="toClass"
        visibility="public" type="ElementReference" upper="*" isDerived="true"
        association="_packagedElement.205">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifyStatement-toClass-_ownedComment.0"
          annotatedElement="ClassifyStatement-toClass">
          <body>The classes denoted by the names in the to list. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifyStatement-isReclassifyAll"
        name="isReclassifyAll" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifyStatement-isReclassifyAll-_ownedComment.0"
          annotatedElement="ClassifyStatement-isReclassifyAll">
          <body>Whether this classify statement reclassifies all types of the target object. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LoopVariableDefinition" name="LoopVariableDefinition"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LoopVariableDefinition-_ownedComment.0"
        annotatedElement="LoopVariableDefinition">
        <body>The definition of a loop variable in a for statement. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentAfterDerivation"
        name="loopVariableDefinitionAssignmentAfterDerivation"
        constrainedElement="LoopVariableDefinition" namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentAfterDerivation-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionAssignmentAfterDerivation">
          <body>The assignments after a loop variable definition include the assignments after the
            expression (or expressions) of the definition plus a new assigned source for the loop
            variable itself. The assigned source for the loop variable is the loop variable
            definition. The multiplicity upper bound for the variable is 1. The multiplicity lower
            bound is 1 if the loop variable definition is the first in a for statement and 0
            otherwise. If collection conversion is not required, then the variable has the inferred
            or declared type from the definition. If collection conversion is required, then the
            variable has the argument type of the collection class. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentAfterDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentsBefore"
        name="loopVariableDefinitionAssignmentsBefore" constrainedElement="LoopVariableDefinition"
        namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentsBefore-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionAssignmentsBefore">
          <body>The assignments before the expressions of a loop variable definition are the
            assignments before the loop variable definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionRangeExpressions"
        name="loopVariableDefinitionRangeExpressions" constrainedElement="LoopVariableDefinition"
        namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionRangeExpressions-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionRangeExpressions">
          <body>If a loop variable definition has two expressions, then both expressions must have
            type Integer and a multiplicity upper bound of 1, and no name may be newly assigned or
            reassigned in more than one of the expressions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionRangeExpressions-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeName"
        name="loopVariableDefinitionTypeName" constrainedElement="LoopVariableDefinition"
        namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeName-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionTypeName">
          <body>If a loop variable definition has a type name, then this name must resolve to a
            non-template classifier. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeDerivation"
        name="loopVariableDefinitionTypeDerivation" namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeDerivation-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionTypeDerivation">
          <body>If the type of a loop variable is not inferred, then the variable has the type
            denoted by the type name, if it is not empty, and is untyped otherwise. If the type is
            inferred, them the variable has the same as the type of the expression in its
            definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionDeclaredType"
        name="loopVariableDefinitionDeclaredType" namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionDeclaredType-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionDeclaredType">
          <body>If the type of a loop variable definition is not inferred, then the first expression
            of the definition must have a type that conforms to the declared type. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionDeclaredType-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableIsCollectionConversionDerivation"
        name="loopVariableIsCollectionConversionDerivation" namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableIsCollectionConversionDerivation-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableIsCollectionConversionDerivation">
          <body>Collection conversion is required for a loop variable definition if the type for the
            definition is the instantiation of a collection class and the multiplicity upper bound
            of the first expression is no greater than 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableIsCollectionConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LoopVariableDefinition-loopVariableDefinitionVariable"
        name="loopVariableDefinitionVariable" namespace="LoopVariableDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionVariable-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-loopVariableDefinitionVariable">
          <body>The variable name given in a loop variable definition must be unassigned after the
            expression or expressions in the definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LoopVariableDefinition-loopVariableDefinitionVariable-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-variable"
        name="variable" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-variable-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-variable">
          <body>The name of the loop variable. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-expression1"
        name="expression1" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.200">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-expression1-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-expression1">
          <body>If there is only one expression, then this expression is evaluated to produce a
            sequence of values to be assigned to the loop variable on successive iterations.
            Otherwise it is evaluated to provide the first value of a range of values to be assigned
            to the loop variable. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-expression2"
        name="expression2" visibility="public" type="Expression" lower="0" isComposite="true"
        association="_packagedElement.212">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-expression2-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-expression2">
          <body>The expression to be evaluated to give the second value in a range of values to be
            assigned to the loop variable. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-typeName"
        name="typeName" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.218">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-typeName-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-typeName">
          <body>The declared type of the loop variable. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-typeIsInferred"
        name="typeIsInferred" visibility="public" default="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-typeIsInferred-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-typeIsInferred">
          <body>Whether the type of the variable is inferred or declared explicitly. NOTE: This flag
            is necessary to because a variable that is explicitly declared to have type "any" will
            have an empty typeName, just like a variable whose type is to be inferred, but, in the
            former case, the type is actually intended to be empty, not inferred. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="LoopVariableDefinition-isCollectionConversion" name="isCollectionConversion"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-isCollectionConversion-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-isCollectionConversion">
          <body>Whether collection conversion is required. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-type" name="type"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.201">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LoopVariableDefinition-type-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-type">
          <body>The declared or inferred type of the loop variable. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-isFirst"
        name="isFirst" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-isFirst-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-isFirst">
          <body>Whether this definition is the first in the list of definitions in the enclosing for
            statement. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-assignmentBefore"
        name="assignmentBefore" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.196">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-assignmentBefore-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-assignmentBefore">
          <body>The assigned sources for local names available lexically before this loop variable
            definition. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LoopVariableDefinition-assignmentAfter"
        name="assignmentAfter" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.206">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LoopVariableDefinition-assignmentAfter-_ownedComment.0"
          annotatedElement="LoopVariableDefinition-assignmentAfter">
          <body>The assigned sources for local names available lexically after this loop variable
            definition. This includes not only any assignments made within the statement, but also
            any assignments that are unchanged from before the statement. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LocalNameDeclarationStatement"
      name="LocalNameDeclarationStatement" superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LocalNameDeclarationStatement-_ownedComment.0"
        annotatedElement="LocalNameDeclarationStatement">
        <body>A statement that declares the type of a local name and assigns it an initial value.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsBefore"
        name="localNameDeclarationStatementAssignmentsBefore"
        constrainedElement="LocalNameDeclarationStatement" namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsBefore">
          <body>The assignments before the expression of a local name declaration statement are the
            same as the assignments before the statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsBefore-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementType"
        name="localNameDeclarationStatementType" constrainedElement="LocalNameDeclarationStatement"
        namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementType-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementType">
          <body>If the type name in a local name declaration statement is not empty, then it must
            resolve to a non-template classifier and the expression must be assignable to that
            classifier. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementType-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementLocalName"
        name="localNameDeclarationStatementLocalName"
        constrainedElement="LocalNameDeclarationStatement" namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementLocalName-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementLocalName">
          <body>The local name in a local name declaration statement must be unassigned before the
            statement and before the expression in the statement. It must remain unassigned after
            the expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementLocalName-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsAfter"
        name="localNameDeclarationStatementAssignmentsAfter"
        constrainedElement="LocalNameDeclarationStatement" namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsAfter">
          <body>The assignments after a local name declaration statement are the assignments before
            the statement plus a new assignment for the local name defined by the statement. The
            assigned source for the local name is the local name declaration statement. The local
            name has the type denoted by the type name if this is not empty and is untyped
            otherwise. If the statement has multiplicity, then the multiplicity of the local name is
            [0..*], otherwise it is [0..1]. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementAssignmentsAfter-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementExpressionMultiplicity"
        name="localNameDeclarationStatementExpressionMultiplicity"
        constrainedElement="LocalNameDeclarationStatement" namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementExpressionMultiplicity-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementExpressionMultiplicity">
          <body>If a local name declaration statement does not have multiplicity, then the
            multiplicity of upper bound of the assigned expression must not be greater than 1.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementExpressionMultiplicity-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementTypeDerivation"
        name="localNameDeclarationStatementTypeDerivation" namespace="LocalNameDeclarationStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementTypeDerivation-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-localNameDeclarationStatementTypeDerivation">
          <body>The type of a local name declaration statement with a type name is the single
            classifier referent of the type name. Otherwise it is the type of the expression of the
            statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="LocalNameDeclarationStatement-localNameDeclarationStatementTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LocalNameDeclarationStatement-name"
        name="name" visibility="public">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-name-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-name">
          <body>The local name being declared. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LocalNameDeclarationStatement-expression"
        name="expression" visibility="public" type="Expression" isComposite="true"
        association="_packagedElement.180">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-expression-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-expression">
          <body>The expression to be evaluated to provide the initial value to be assigned to the
            local name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property"
        xmi:id="LocalNameDeclarationStatement-hasMultiplicity" name="hasMultiplicity"
        visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-hasMultiplicity-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-hasMultiplicity">
          <body>Whether the local name is to have a multiplicity upper bound of * rather than 1.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LocalNameDeclarationStatement-typeName"
        name="typeName" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.185">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-typeName-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-typeName">
          <body>The declared type of the local name. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LocalNameDeclarationStatement-type"
        name="type" visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.215">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="LocalNameDeclarationStatement-type-_ownedComment.0"
          annotatedElement="LocalNameDeclarationStatement-type">
          <body>The type declared for the given local name. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="QualifiedNameList" name="QualifiedNameList"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedNameList-_ownedComment.0"
        annotatedElement="QualifiedNameList">
        <body>A group of qualified names. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="QualifiedNameList-name" name="name"
        visibility="public" type="QualifiedName" upper="*" isComposite="true"
        association="_packagedElement.208">
        <ownedComment xmi:type="cmof:Comment" xmi:id="QualifiedNameList-name-_ownedComment.0"
          annotatedElement="QualifiedNameList-name">
          <body>The names in the group. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NonFinalClause" name="NonFinalClause"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NonFinalClause-_ownedComment.0"
        annotatedElement="NonFinalClause">
        <body>A clause of an if statement with a conditional expression and a sequence of statements
          that may be executed if the condition is true. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NonFinalClause-nonFinalClauseAssignmentsBeforeBody"
        name="nonFinalClauseAssignmentsBeforeBody" constrainedElement="NonFinalClause"
        namespace="NonFinalClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NonFinalClause-nonFinalClauseAssignmentsBeforeBody-_ownedComment.0"
          annotatedElement="NonFinalClause-nonFinalClauseAssignmentsBeforeBody">
          <body>The assignments before the body of a non-final clause are the assignments after the
            condition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NonFinalClause-nonFinalClauseAssignmentsBeforeBody-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NonFinalClause-nonFinalClauseConditionLocalNames"
        name="nonFinalClauseConditionLocalNames" constrainedElement="NonFinalClause"
        namespace="NonFinalClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NonFinalClause-nonFinalClauseConditionLocalNames-_ownedComment.0"
          annotatedElement="NonFinalClause-nonFinalClauseConditionLocalNames">
          <body>If a name is unassigned before the condition expression of a non-final clause, then
            it must be unassigned after that expression (i.e., new local names may not be defined in
            the condition). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NonFinalClause-nonFinalClauseConditionLocalNames-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NonFinalClause-nonFinalClauseConditionType"
        name="nonFinalClauseConditionType" namespace="NonFinalClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NonFinalClause-nonFinalClauseConditionType-_ownedComment.0"
          annotatedElement="NonFinalClause-nonFinalClauseConditionType">
          <body>The condition of a non-final clause must have type Boolean and a multiplicity upper
            bound no greater than 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NonFinalClause-nonFinalClauseConditionType-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NonFinalClause-condition" name="condition"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.207">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NonFinalClause-condition-_ownedComment.0"
          annotatedElement="NonFinalClause-condition">
          <body>The expression that is evaluated to determine whether the clause body may be
            executed. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NonFinalClause-body" name="body"
        visibility="public" type="Block" isComposite="true" association="_packagedElement.186">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NonFinalClause-body-_ownedComment.0"
          annotatedElement="NonFinalClause-body">
          <body>The sequence of statements that may be executed if the condition evaluates to true.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NonFinalClause-assignmentsBefore"
        name="assignmentsBefore" visibility="public" class="NonFinalClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NonFinalClause-assignmentsBefore-_ownedComment.0"
          annotatedElement="NonFinalClause-assignmentsBefore">
          <body>The assignments before a non-final clause are the assignments before the condition
            of the clause. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="NonFinalClause-assignmentsBefore-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NonFinalClause-assignmentsAfter"
        name="assignmentsAfter" visibility="public" class="NonFinalClause">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NonFinalClause-assignmentsAfter-_ownedComment.0"
          annotatedElement="NonFinalClause-assignmentsAfter">
          <body>The assignments after a non-final clause are the assignments after the block of the
            clause. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="NonFinalClause-assignmentsAfter-_ownedParameter.0" name="" visibility="public"
          type="AssignedSource" upper="*" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Annotation" name="Annotation"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Annotation-_ownedComment.0"
        annotatedElement="Annotation">
        <body>An identified modification to the behavior of an annotated statement. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Annotation-identifier" name="identifier"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Annotation-identifier-_ownedComment.0"
          annotatedElement="Annotation-identifier">
          <body>The name of the annotation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Annotation-argument" name="argument"
        visibility="public" upper="*">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Annotation-argument-_ownedComment.0"
          annotatedElement="Annotation-argument">
          <body>If permitted by the annotation, an optional list of local names relevant to the
            annotation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ForStatement" name="ForStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ForStatement-_ownedComment.0"
        annotatedElement="ForStatement">
        <body>A looping statement that gives successive values to one or more loop variables on each
          iteration. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementAssignmentsBefore"
        name="forStatementAssignmentsBefore" constrainedElement="ForStatement"
        namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="ForStatement-forStatementAssignmentsBefore">
          <body>The assignments before a loop variable definition in a for statement are the same as
            before the for statement. The assignments before the body of the statement include all
            the assignments before the statement plus any new assignments from the loop variable
            definitions, except that, if the statement is parallel, the assigned sources of any
            names given in @parallel annotations are changed to be the for statement itself. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementAssignmentsAfter"
        name="forStatementAssignmentsAfter" constrainedElement="ForStatement"
        namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="ForStatement-forStatementAssignmentsAfter">
          <body>The loop variables are unassigned after a for statement. Other than the loop
            variables, if the assigned source for a name after the body of a for statement is the
            same as after the for variable definitions, then the assigned source for the name after
            the for statement is the same as after the for variable definitions. If a name is
            unassigned after the for variable definitions, then it is unassigned after the for
            statement (even if it is assigned in the body of the for statement). If, after the loop
            variable definitions, a name has an assigned source, and it has a different assigned
            source after the body of the for statement, then the assigned source after the for
            statement is the for statement itself. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForStatement-forStatementParallelAnnotationNames"
        name="forStatementParallelAnnotationNames" constrainedElement="ForStatement"
        namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementParallelAnnotationNames-_ownedComment.0"
          annotatedElement="ForStatement-forStatementParallelAnnotationNames">
          <body>A @parallel annotation of a for statement may include a list of names. Each such
            name must be already assigned after the loop variable definitions of the for statement,
            with a multiplicity of [0..*]. These names may only be used within the body of the for
            statement as the first argument to for the CollectionFunctions::add behavior. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementParallelAnnotationNames-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ForStatement-forStatementParallelAssignmentsAfter"
        name="forStatementParallelAssignmentsAfter" constrainedElement="ForStatement"
        namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementParallelAssignmentsAfter-_ownedComment.0"
          annotatedElement="ForStatement-forStatementParallelAssignmentsAfter">
          <body>If, after the loop variable definitions of a parallel for statement, a name has an
            assigned source, then it must have the same assigned source after the block of the for
            statement. Other than for names defined in the @parallel annotation of the for
            statement, the assigned source for such names is the same after the for statement as
            before it. Any names defined in the @parallel annotation have the for statement itself
            as their assigned source after the for statement. Other than names given in the
            @parallel annotation, if a name is unassigned after the loop variable definitions, then
            it is considered unassigned after the for statement, even if it is assigned in the block
            of the for statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementParallelAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementVariableDefinitions"
        name="forStatementVariableDefinitions" namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementVariableDefinitions-_ownedComment.0"
          annotatedElement="ForStatement-forStatementVariableDefinitions">
          <body>The isFirst attribute of the first loop variable definition for a for statement is
            true while the isFirst attribute if false for any other definitions. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementVariableDefinitions-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementLoopVariables"
        name="forStatementLoopVariables" namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementLoopVariables-_ownedComment.0"
          annotatedElement="ForStatement-forStatementLoopVariables">
          <body>The assigned sources for loop variables after the body of a for statement must be
            the for statement (the same as before the body). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementLoopVariables-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementIsParallelDerivation"
        name="forStatementIsParallelDerivation" namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementIsParallelDerivation-_ownedComment.0"
          annotatedElement="ForStatement-forStatementIsParallelDerivation">
          <body>A for statement is parallel if it has a @parallel annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementIsParallelDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ForStatement-forStatementEnclosedStatements"
        name="forStatementEnclosedStatements" namespace="ForStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-forStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="ForStatement-forStatementEnclosedStatements">
          <body>The enclosing statement for all statements in the body of a for statement are the
            for statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ForStatement-forStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ForStatement-body" name="body"
        visibility="public" type="Block" association="_packagedElement.202">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ForStatement-body-_ownedComment.0"
          annotatedElement="ForStatement-body">
          <body>The sequence of statements to be iteratively executed. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ForStatement-variableDefinition"
        name="variableDefinition" visibility="public" type="LoopVariableDefinition" isOrdered="true"
        upper="*" isComposite="true" association="_packagedElement.197">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-variableDefinition-_ownedComment.0"
          annotatedElement="ForStatement-variableDefinition">
          <body>A list of definitions of one or more loop variables. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ForStatement-isParallel" name="isParallel"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ForStatement-isParallel-_ownedComment.0"
          annotatedElement="ForStatement-isParallel">
          <body>Whether the for statement is parallel. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ForStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="ForStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ForStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="ForStatement-annotationAllowed">
          <body>In addition to an @isolated annotation, a for statement may have a @parallel
            annotation. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ForStatement-annotationAllowed-annotation"
          name="annotation" visibility="public" type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ForStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Block" name="Block" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Block-_ownedComment.0" annotatedElement="Block">
        <body>A grouped sequence of statements. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Block-blockAssignmentsBeforeStatements"
        name="blockAssignmentsBeforeStatements" namespace="Block">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Block-blockAssignmentsBeforeStatements-_ownedComment.0"
          annotatedElement="Block-blockAssignmentsBeforeStatements">
          <body>The assignments before each statement in a block other than the first are the same
            as the assignments after the previous statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Block-blockAssignmentsBeforeStatements-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Block-blockAssignmentsBefore"
        name="blockAssignmentsBefore" namespace="Block">
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Block-blockAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Block-blockAssignmentAfterDerivation"
        name="blockAssignmentAfterDerivation" namespace="Block">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Block-blockAssignmentAfterDerivation-_ownedComment.0"
          annotatedElement="Block-blockAssignmentAfterDerivation">
          <body>If a block is not empty, then the assignments after the block are the same as the
            assignments after the last statement of the block. Otherwise they are the same as the
            assignments before the block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Block-blockAssignmentAfterDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Block-statement" name="statement"
        visibility="public" type="Statement" isOrdered="true" upper="*" isComposite="true"
        association="_packagedElement.198">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Block-statement-_ownedComment.0"
          annotatedElement="Block-statement">
          <body>The ordered sequence of statements in the block. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Block-assignmentAfter" name="assignmentAfter"
        visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.187">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Block-assignmentAfter-_ownedComment.0"
          annotatedElement="Block-assignmentAfter">
          <body>The assigned sources for local names available lexically after this block. This
            includes not only any assignments made within the statement, but also any assignments
            that are unchanged from before the statement. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Block-assignmentBefore"
        name="assignmentBefore" visibility="public" type="AssignedSource" upper="*" isDerived="true"
        association="_packagedElement.219">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Block-assignmentBefore-_ownedComment.0"
          annotatedElement="Block-assignmentBefore">
          <body>The assigned sources for local names available lexically before this block. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BlockStatement" name="BlockStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BlockStatement-_ownedComment.0"
        annotatedElement="BlockStatement">
        <body>A statement that executes a block. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BlockStatement-blockStatementParallelAssignments"
        name="blockStatementParallelAssignments" constrainedElement="BlockStatement"
        namespace="BlockStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-blockStatementParallelAssignments-_ownedComment.0"
          annotatedElement="BlockStatement-blockStatementParallelAssignments">
          <body>In a parallel block statement, any name assigned in one statement of the block may
            not be further assigned in any subsequent statement in the same block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BlockStatement-blockStatementParallelAssignments-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BlockStatement-blockStatementAssignmentsBefore"
        name="blockStatementAssignmentsBefore" constrainedElement="BlockStatement"
        namespace="BlockStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-blockStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="BlockStatement-blockStatementAssignmentsBefore">
          <body>The assignments before the block of a block statement are the same as the
            assignments before the block statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BlockStatement-blockStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BlockStatement-blockStatementAssignmentsAfter"
        name="blockStatementAssignmentsAfter" constrainedElement="BlockStatement"
        namespace="BlockStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-blockStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="BlockStatement-blockStatementAssignmentsAfter">
          <body>The assignments after a block statement are the same as the assignments after the
            block of the block statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BlockStatement-blockStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BlockStatement-blockStatementEnclosedStatements"
        name="blockStatementEnclosedStatements" namespace="BlockStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-blockStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="BlockStatement-blockStatementEnclosedStatements">
          <body>The enclosing statement for all the statements in the block of a block statement is
            the block statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BlockStatement-blockStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="BlockStatement-blockStatementIsParallelDerivation"
        name="blockStatementIsParallelDerivation" namespace="BlockStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-blockStatementIsParallelDerivation-_ownedComment.0"
          annotatedElement="BlockStatement-blockStatementIsParallelDerivation">
          <body>A block statement is parallel if it has a @parallel annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="BlockStatement-blockStatementIsParallelDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BlockStatement-block" name="block"
        visibility="public" type="Block" isComposite="true" association="_packagedElement.213">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BlockStatement-block-_ownedComment.0"
          annotatedElement="BlockStatement-block">
          <body>The block to be executed. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BlockStatement-isParallel" name="isParallel"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BlockStatement-isParallel-_ownedComment.0"
          annotatedElement="BlockStatement-isParallel">
          <body>Whether the statements in the block of this block statement should be executed
            concurrently. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="BlockStatement-annotationAllowed"
        name="annotationAllowed" visibility="public" class="BlockStatement"
        redefinedOperation="Statement-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="BlockStatement-annotationAllowed-_ownedComment.0"
          annotatedElement="BlockStatement-annotationAllowed">
          <body>In addition to an @isolated annotation, a block statement may have a @parallel
            annotation. It may not have any arguments. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BlockStatement-annotationAllowed-annotation" name="annotation" visibility="public"
          type="Annotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="BlockStatement-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ConcurrentClauses" name="ConcurrentClauses"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ConcurrentClauses-_ownedComment.0"
        annotatedElement="ConcurrentClauses">
        <body>A grouping of non-final conditional clauses to be tested concurrently. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConcurrentClauses-concurrentClausesAssignmentsBefore"
        name="concurrentClausesAssignmentsBefore" constrainedElement="ConcurrentClauses"
        namespace="ConcurrentClauses">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConcurrentClauses-concurrentClausesAssignmentsBefore-_ownedComment.0"
          annotatedElement="ConcurrentClauses-concurrentClausesAssignmentsBefore">
          <body>The assignments before each of the clauses in a set of concurrent clauses are the
            same as the assignments before the concurrent clauses. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConcurrentClauses-concurrentClausesAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ConcurrentClauses-concurrentClausesConditionAssignments"
        name="concurrentClausesConditionAssignments" constrainedElement="ConcurrentClauses"
        namespace="ConcurrentClauses">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ConcurrentClauses-concurrentClausesConditionAssignments-_ownedComment.0"
          annotatedElement="ConcurrentClauses-concurrentClausesConditionAssignments">
          <body>The same name may not be assigned in more than one conditional expression within the
            same concurrent set of clauses. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ConcurrentClauses-concurrentClausesConditionAssignments-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConcurrentClauses-clause" name="clause"
        visibility="public" type="NonFinalClause" upper="*" isComposite="true"
        association="_packagedElement.220">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ConcurrentClauses-clause-_ownedComment.0"
          annotatedElement="ConcurrentClauses-clause">
          <body>The conditional clauses in the group. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="WhileStatement" name="WhileStatement"
      superClass="Statement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="WhileStatement-_ownedComment.0"
        annotatedElement="WhileStatement">
        <body>A looping statement for which the continuation condition is first tested before the
          first iteration. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="WhileStatement-whileStatementAssignmentsBefore"
        name="whileStatementAssignmentsBefore" constrainedElement="WhileStatement"
        namespace="WhileStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="WhileStatement-whileStatementAssignmentsBefore-_ownedComment.0"
          annotatedElement="WhileStatement-whileStatementAssignmentsBefore">
          <body>The assignments before the condition expression of a while statement are the same as
            the assignments before the while statement. The assignments before the block of the
            while statement are the same as the assignments after the condition expression. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="WhileStatement-whileStatementAssignmentsBefore-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="WhileStatement-whileStatementAssignmentsAfter"
        name="whileStatementAssignmentsAfter" constrainedElement="WhileStatement"
        namespace="WhileStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="WhileStatement-whileStatementAssignmentsAfter-_ownedComment.0"
          annotatedElement="WhileStatement-whileStatementAssignmentsAfter">
          <body>If a name is assigned before the block, but the assigned source for the name after
            the block is different than before the block, then the assigned source of the name after
            the while statement is the while statement. Otherwise it is the same as before the
            block. If a name is unassigned before the block of a while statement, then it is
            unassigned after the while statement, even if it is assigned after the block. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="WhileStatement-whileStatementAssignmentsAfter-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="WhileStatement-whileStatementCondition"
        name="whileStatementCondition" namespace="WhileStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="WhileStatement-whileStatementCondition-_ownedComment.0"
          annotatedElement="WhileStatement-whileStatementCondition">
          <body>The condition expression of a while statement must have type Boolean and a
            multiplicity upper bound of 1. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="WhileStatement-whileStatementCondition-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="WhileStatement-whileStatementEnclosedStatements"
        name="whileStatementEnclosedStatements" namespace="WhileStatement">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="WhileStatement-whileStatementEnclosedStatements-_ownedComment.0"
          annotatedElement="WhileStatement-whileStatementEnclosedStatements">
          <body>The enclosing statement for all statements in the body of a while statement are the
            while statement. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="WhileStatement-whileStatementEnclosedStatements-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="WhileStatement-body" name="body"
        visibility="public" type="Block" isComposite="true" association="_packagedElement.195">
        <ownedComment xmi:type="cmof:Comment" xmi:id="WhileStatement-body-_ownedComment.0"
          annotatedElement="WhileStatement-body">
          <body>The sequence of statements to be iteratively executed. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="WhileStatement-condition" name="condition"
        visibility="public" type="Expression" isComposite="true" association="_packagedElement.191">
        <ownedComment xmi:type="cmof:Comment" xmi:id="WhileStatement-condition-_ownedComment.0"
          annotatedElement="WhileStatement-condition">
          <body>The expression to be evaluated to determine whether to continue looping. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.177" name=""
      visibility="private" memberEnd="_packagedElement.177-_ownedEnd.0 ClassifyStatement-fromClass">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.177-_ownedEnd.0" name=""
        visibility="private" type="ClassifyStatement" owningAssociation="_packagedElement.177"
        association="_packagedElement.177"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.178" name=""
      visibility="private" memberEnd="_packagedElement.178-_ownedEnd.0 AcceptBlock-block">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.178-_ownedEnd.0" name=""
        visibility="public" type="AcceptBlock" lower="0" owningAssociation="_packagedElement.178"
        association="_packagedElement.178"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.179" name=""
      visibility="private" memberEnd="_packagedElement.179-_ownedEnd.0 AcceptStatement-behavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.179-_ownedEnd.0" name=""
        visibility="private" type="AcceptStatement" owningAssociation="_packagedElement.179"
        association="_packagedElement.179"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.180" name=""
      visibility="private"
      memberEnd="_packagedElement.180-_ownedEnd.0 LocalNameDeclarationStatement-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.180-_ownedEnd.0" name=""
        visibility="public" type="LocalNameDeclarationStatement" lower="0"
        owningAssociation="_packagedElement.180" association="_packagedElement.180"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.181" name=""
      visibility="private" memberEnd="_packagedElement.181-_ownedEnd.0 AcceptBlock-signal">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.181-_ownedEnd.0" name=""
        visibility="private" type="AcceptBlock" owningAssociation="_packagedElement.181"
        association="_packagedElement.181"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.182" name=""
      visibility="private"
      memberEnd="_packagedElement.182-_ownedEnd.0 ExpressionStatement-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.182-_ownedEnd.0" name=""
        visibility="public" type="ExpressionStatement" lower="0"
        owningAssociation="_packagedElement.182" association="_packagedElement.182"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.183" name=""
      visibility="private" memberEnd="Statement-annotation _packagedElement.183-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.183-_ownedEnd.0" name=""
        visibility="private" type="Statement" lower="0" owningAssociation="_packagedElement.183"
        association="_packagedElement.183"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.184" name=""
      visibility="private" memberEnd="_packagedElement.184-_ownedEnd.0 SwitchClause-case">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.184-_ownedEnd.0" name=""
        visibility="public" type="SwitchClause" lower="0" owningAssociation="_packagedElement.184"
        association="_packagedElement.184"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.185" name=""
      visibility="private"
      memberEnd="_packagedElement.185-_ownedEnd.0 LocalNameDeclarationStatement-typeName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.185-_ownedEnd.0" name=""
        visibility="public" type="LocalNameDeclarationStatement" lower="0"
        owningAssociation="_packagedElement.185" association="_packagedElement.185"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.186" name=""
      visibility="private" memberEnd="_packagedElement.186-_ownedEnd.0 NonFinalClause-body">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.186-_ownedEnd.0" name=""
        visibility="public" type="NonFinalClause" lower="0" owningAssociation="_packagedElement.186"
        association="_packagedElement.186"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.187" name=""
      visibility="private" memberEnd="_packagedElement.187-_ownedEnd.0 Block-assignmentAfter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.187-_ownedEnd.0" name=""
        visibility="private" type="Block" owningAssociation="_packagedElement.187"
        association="_packagedElement.187"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.188" name=""
      visibility="private" memberEnd="DoStatement-body _packagedElement.188-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.188-_ownedEnd.0" name=""
        visibility="public" type="DoStatement" lower="0" owningAssociation="_packagedElement.188"
        association="_packagedElement.188"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.189" name=""
      visibility="private" memberEnd="ReturnStatement-expression _packagedElement.189-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.189-_ownedEnd.0" name=""
        visibility="public" type="ReturnStatement" lower="0"
        owningAssociation="_packagedElement.189" association="_packagedElement.189"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.190" name=""
      visibility="private" memberEnd="SwitchStatement-expression _packagedElement.190-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.190-_ownedEnd.0" name=""
        visibility="public" type="SwitchStatement" lower="0"
        owningAssociation="_packagedElement.190" association="_packagedElement.190"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.191" name=""
      visibility="private" memberEnd="WhileStatement-condition _packagedElement.191-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.191-_ownedEnd.0" name=""
        visibility="public" type="WhileStatement" lower="0" owningAssociation="_packagedElement.191"
        association="_packagedElement.191"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.192" name=""
      visibility="private"
      memberEnd="SwitchStatement-defaultClause _packagedElement.192-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.192-_ownedEnd.0" name=""
        visibility="public" type="SwitchStatement" lower="0"
        owningAssociation="_packagedElement.192" association="_packagedElement.192"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.193" name=""
      visibility="private" memberEnd="_packagedElement.193-_ownedEnd.0 IfStatement-nonFinalClauses">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.193-_ownedEnd.0" name=""
        visibility="public" type="IfStatement" owningAssociation="_packagedElement.193"
        association="_packagedElement.193"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.194" name=""
      visibility="private" memberEnd="_packagedElement.194-_ownedEnd.0 IfStatement-finalClause">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.194-_ownedEnd.0" name=""
        visibility="public" type="IfStatement" lower="0" owningAssociation="_packagedElement.194"
        association="_packagedElement.194"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.195" name=""
      visibility="private" memberEnd="_packagedElement.195-_ownedEnd.0 WhileStatement-body">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.195-_ownedEnd.0" name=""
        visibility="public" type="WhileStatement" lower="0" owningAssociation="_packagedElement.195"
        association="_packagedElement.195"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.196" name=""
      visibility="private"
      memberEnd="_packagedElement.196-_ownedEnd.0 LoopVariableDefinition-assignmentBefore">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.196-_ownedEnd.0" name=""
        visibility="private" type="LoopVariableDefinition" owningAssociation="_packagedElement.196"
        association="_packagedElement.196"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.197" name=""
      visibility="private"
      memberEnd="_packagedElement.197-_ownedEnd.0 ForStatement-variableDefinition">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.197-_ownedEnd.0" name=""
        visibility="public" type="ForStatement" lower="0" owningAssociation="_packagedElement.197"
        association="_packagedElement.197"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.198" name=""
      visibility="private" memberEnd="_packagedElement.198-_ownedEnd.0 Block-statement">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.198-_ownedEnd.0" name=""
        visibility="public" type="Block" lower="0" owningAssociation="_packagedElement.198"
        association="_packagedElement.198"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.199" name=""
      visibility="private" memberEnd="DoStatement-condition _packagedElement.199-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.199-_ownedEnd.0" name=""
        visibility="public" type="DoStatement" lower="0" owningAssociation="_packagedElement.199"
        association="_packagedElement.199"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.200" name=""
      visibility="private"
      memberEnd="LoopVariableDefinition-expression1 _packagedElement.200-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.200-_ownedEnd.0" name=""
        visibility="public" type="LoopVariableDefinition" lower="0"
        owningAssociation="_packagedElement.200" association="_packagedElement.200"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.201" name=""
      visibility="private" memberEnd="_packagedElement.201-_ownedEnd.0 LoopVariableDefinition-type">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.201-_ownedEnd.0" name=""
        visibility="private" type="LoopVariableDefinition" owningAssociation="_packagedElement.201"
        association="_packagedElement.201"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.202" name=""
      visibility="private" memberEnd="ForStatement-body _packagedElement.202-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.202-_ownedEnd.0" name=""
        visibility="public" type="ForStatement" owningAssociation="_packagedElement.202"
        association="_packagedElement.202"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.203" name=""
      visibility="private"
      memberEnd="SwitchStatement-nonDefaultClause _packagedElement.203-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.203-_ownedEnd.0" name=""
        visibility="public" type="SwitchStatement" owningAssociation="_packagedElement.203"
        association="_packagedElement.203"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.204" name=""
      visibility="private" memberEnd="_packagedElement.204-_ownedEnd.0 ClassifyStatement-fromList">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.204-_ownedEnd.0" name=""
        visibility="public" type="ClassifyStatement" lower="0"
        owningAssociation="_packagedElement.204" association="_packagedElement.204"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.205" name=""
      visibility="private" memberEnd="ClassifyStatement-toClass _packagedElement.205-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.205-_ownedEnd.0" name=""
        visibility="private" type="ClassifyStatement" owningAssociation="_packagedElement.205"
        association="_packagedElement.205"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.206" name=""
      visibility="private"
      memberEnd="LoopVariableDefinition-assignmentAfter _packagedElement.206-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.206-_ownedEnd.0" name=""
        visibility="private" type="LoopVariableDefinition" owningAssociation="_packagedElement.206"
        association="_packagedElement.206"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.207" name=""
      visibility="private" memberEnd="_packagedElement.207-_ownedEnd.0 NonFinalClause-condition">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.207-_ownedEnd.0" name=""
        visibility="public" type="NonFinalClause" lower="0" owningAssociation="_packagedElement.207"
        association="_packagedElement.207"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.208" name=""
      visibility="private" memberEnd="QualifiedNameList-name _packagedElement.208-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.208-_ownedEnd.0" name=""
        visibility="public" type="QualifiedNameList" lower="0"
        owningAssociation="_packagedElement.208" association="_packagedElement.208"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.209" name=""
      visibility="private" memberEnd="_packagedElement.209-_ownedEnd.0 ClassifyStatement-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.209-_ownedEnd.0" name=""
        visibility="public" type="ClassifyStatement" lower="0"
        owningAssociation="_packagedElement.209" association="_packagedElement.209"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.210" name=""
      visibility="private" memberEnd="ReturnStatement-behavior _packagedElement.210-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.210-_ownedEnd.0" name=""
        visibility="private" type="ReturnStatement" owningAssociation="_packagedElement.210"
        association="_packagedElement.210"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.211" name=""
      visibility="private" memberEnd="_packagedElement.211-_ownedEnd.0 ClassifyStatement-toList">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.211-_ownedEnd.0" name=""
        visibility="public" type="ClassifyStatement" lower="0"
        owningAssociation="_packagedElement.211" association="_packagedElement.211"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.212" name=""
      visibility="private"
      memberEnd="LoopVariableDefinition-expression2 _packagedElement.212-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.212-_ownedEnd.0" name=""
        visibility="public" type="LoopVariableDefinition" lower="0"
        owningAssociation="_packagedElement.212" association="_packagedElement.212"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.213" name=""
      visibility="private" memberEnd="_packagedElement.213-_ownedEnd.0 BlockStatement-block">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.213-_ownedEnd.0" name=""
        visibility="public" type="BlockStatement" lower="0" owningAssociation="_packagedElement.213"
        association="_packagedElement.213"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.214" name=""
      visibility="private" memberEnd="AcceptStatement-acceptBlock _packagedElement.214-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.214-_ownedEnd.0" name=""
        visibility="public" type="AcceptStatement" owningAssociation="_packagedElement.214"
        association="_packagedElement.214"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.215" name=""
      visibility="private"
      memberEnd="_packagedElement.215-_ownedEnd.0 LocalNameDeclarationStatement-type">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.215-_ownedEnd.0" name=""
        visibility="private" type="LocalNameDeclarationStatement"
        owningAssociation="_packagedElement.215" association="_packagedElement.215"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.216" name=""
      visibility="private" memberEnd="_packagedElement.216-_ownedEnd.0 Statement-assignmentAfter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.216-_ownedEnd.0" name=""
        visibility="private" type="Statement" owningAssociation="_packagedElement.216"
        association="_packagedElement.216"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.217" name=""
      visibility="private" memberEnd="AcceptBlock-signalNames _packagedElement.217-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.217-_ownedEnd.0" name=""
        visibility="public" type="AcceptBlock" lower="0" owningAssociation="_packagedElement.217"
        association="_packagedElement.217"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.218" name=""
      visibility="private"
      memberEnd="LoopVariableDefinition-typeName _packagedElement.218-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.218-_ownedEnd.0" name=""
        visibility="public" type="LoopVariableDefinition" lower="0"
        owningAssociation="_packagedElement.218" association="_packagedElement.218"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.219" name=""
      visibility="private" memberEnd="_packagedElement.219-_ownedEnd.0 Block-assignmentBefore">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.219-_ownedEnd.0" name=""
        visibility="private" type="Block" owningAssociation="_packagedElement.219"
        association="_packagedElement.219"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.220" name=""
      visibility="private" memberEnd="_packagedElement.220-_ownedEnd.0 ConcurrentClauses-clause">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.220-_ownedEnd.0" name=""
        visibility="public" type="ConcurrentClauses" owningAssociation="_packagedElement.220"
        association="_packagedElement.220"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.221" name=""
      visibility="private" memberEnd="BreakStatement-target _packagedElement.221-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.221-_ownedEnd.0" name=""
        visibility="private" type="BreakStatement" owningAssociation="_packagedElement.221"
        association="_packagedElement.221"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.222" name=""
      visibility="private" memberEnd="_packagedElement.222-_ownedEnd.0 Statement-assignmentBefore">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.222-_ownedEnd.0" name=""
        visibility="private" type="Statement" owningAssociation="_packagedElement.222"
        association="_packagedElement.222"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.223" name=""
      visibility="private" memberEnd="Statement-enclosingStatement _packagedElement.223-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.223-_ownedEnd.0" name=""
        visibility="private" type="Statement" owningAssociation="_packagedElement.223"
        association="_packagedElement.223"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="UnitDefinition" name="UnitDefinition"
      superClass="DocumentedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-_ownedComment.0"
        annotatedElement="UnitDefinition">
        <body>The definition of a namespace as an Alf unit. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="UnitDefinition-unitDefinitionNamespaceDerivation"
        name="unitDefinitionNamespaceDerivation" namespace="UnitDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnitDefinition-unitDefinitionNamespaceDerivation-_ownedComment.0"
          annotatedElement="UnitDefinition-unitDefinitionNamespaceDerivation">
          <body>If a unit definition has a declared namespace name, then the containing namespace
            for the unit is the referent for that name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnitDefinition-unitDefinitionNamespaceDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UnitDefinition-unitDefinitionNamespace"
        name="unitDefinitionNamespace" namespace="UnitDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnitDefinition-unitDefinitionNamespace-_ownedComment.0"
          annotatedElement="UnitDefinition-unitDefinitionNamespace">
          <body>The declared namespace name for a unit definition, if any, must resolve to a UML
            namespace of an Alf unit definition. If it is an Alf unit definition, then it must have
            a stub for this unit definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnitDefinition-unitDefinitionNamespace-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="UnitDefinition-unitDefinitionIsModelLibraryDerivation"
        name="unitDefinitionIsModelLibraryDerivation" namespace="UnitDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnitDefinition-unitDefinitionIsModelLibraryDerivation-_ownedComment.0"
          annotatedElement="UnitDefinition-unitDefinitionIsModelLibraryDerivation">
          <body>A unit definition is for a model library if its associated namespace definition has
            a stereotype annotation for the UML standard stereotype ModelLibrary. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnitDefinition-unitDefinitionIsModelLibraryDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UnitDefinition-unitDefinitionImplicitImports"
        name="unitDefinitionImplicitImports" namespace="UnitDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnitDefinition-unitDefinitionImplicitImports-_ownedComment.0"
          annotatedElement="UnitDefinition-unitDefinitionImplicitImports">
          <body>Unless the unit definition is a model library, it has private package import
            references for all the sub-packages of the Alf::Library package. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnitDefinition-unitDefinitionImplicitImports-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="UnitDefinition-unitDefinitionAppliedProfileDerivation"
        name="unitDefinitionAppliedProfileDerivation" namespace="UnitDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="UnitDefinition-unitDefinitionAppliedProfileDerivation-_ownedComment.0"
          annotatedElement="UnitDefinition-unitDefinitionAppliedProfileDerivation">
          <body>The profiles applied to a unit definition include any profiles applied to the
            containing namespace of the unit definition. If the unit definition is for a package,
            then the applied profiles for the unit definition also include the applied profiles for
            its associated package definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="UnitDefinition-unitDefinitionAppliedProfileDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-namespaceName"
        name="namespaceName" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.275">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-namespaceName-_ownedComment.0"
          annotatedElement="UnitDefinition-namespaceName">
          <body>A declaration of the name of the namespace that contains this unit as a subunit.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-definition" name="definition"
        visibility="public" type="NamespaceDefinition" isComposite="true"
        association="_packagedElement.265">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-definition-_ownedComment.0"
          annotatedElement="UnitDefinition-definition">
          <body>The definition of the unit as a namespace. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-_20import" name=" import"
        visibility="public" type="ImportReference" upper="*" isComposite="true"
        association="_packagedElement.269">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-_20import-_ownedComment.0"
          annotatedElement="UnitDefinition-_20import">
          <body>The set of references to imported elements or packages. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-namespace" name="namespace"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.258">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-namespace-_ownedComment.0"
          annotatedElement="UnitDefinition-namespace">
          <body>A reference to the namespace denoted by the declared namespace name for the unit, if
            any. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-isModelLibrary"
        name="isModelLibrary" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-isModelLibrary-_ownedComment.0"
          annotatedElement="UnitDefinition-isModelLibrary">
          <body>Whether this unit definition is for a model library or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UnitDefinition-appliedProfile"
        name="appliedProfile" visibility="public" upper="*" isDerived="true"
        association="_packagedElement.273">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UnitDefinition-appliedProfile-_ownedComment.0"
          annotatedElement="UnitDefinition-appliedProfile">
          <body>The profiles applied to this unit. </body>
        </ownedComment>
        <type xmi:type="cmof:Class" href="http://www.omg.org/spec/UML/2.4/uml.xmi#Profile"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassifierTemplateParameter"
      name="ClassifierTemplateParameter" superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifierTemplateParameter-_ownedComment.0"
        annotatedElement="ClassifierTemplateParameter">
        <body>The definition of a classifier template parameter, which acts as a classifier within
          the definition of the template. </body>
      </ownedComment>
      <ownedOperation xmi:type="cmof:Operation"
        xmi:id="ClassifierTemplateParameter-annotationAllowed" name="annotationAllowed"
        visibility="public" class="ClassifierTemplateParameter"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierTemplateParameter-annotationAllowed-_ownedComment.0"
          annotatedElement="ClassifierTemplateParameter-annotationAllowed">
          <body>Annotations are not allowed on classifier template parameters. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassifierTemplateParameter-matchForStub"
        name="matchForStub" visibility="public" class="ClassifierTemplateParameter"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierTemplateParameter-matchForStub-_ownedComment.0"
          annotatedElement="ClassifierTemplateParameter-matchForStub">
          <body>Returns false. (Classifier template parameters cannot be stubs.) </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-matchForStub-unit" name="unit" visibility="public"
          type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-matchForStub-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassifierTemplateParameter-isSameKindAs"
        name="isSameKindAs" visibility="public" class="ClassifierTemplateParameter"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierTemplateParameter-isSameKindAs-_ownedComment.0"
          annotatedElement="ClassifierTemplateParameter-isSameKindAs">
          <body>Return true if the given member is a classifier template parameter. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-isSameKindAs-member" name="member" visibility="public"
          type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="ClassifierTemplateParameter-isSameKindAs-member-_ownedComment.0"
            annotatedElement="ClassifierTemplateParameter-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierTemplateParameter-isSameKindAs-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AssociationDefinition" name="AssociationDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AssociationDefinition-_ownedComment.0"
        annotatedElement="AssociationDefinition">
        <body>The definition of an association, whose members must all be properties. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="AssociationDefinition-associationDefinitionSpecializationReferent"
        name="associationDefinitionSpecializationReferent" namespace="AssociationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssociationDefinition-associationDefinitionSpecializationReferent-_ownedComment.0"
          annotatedElement="AssociationDefinition-associationDefinitionSpecializationReferent">
          <body>The specialization referents of an association definition must all be associations.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="AssociationDefinition-associationDefinitionSpecializationReferent-_specification"
          name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="AssociationDefinition-matchForStub"
        name="matchForStub" visibility="public" class="AssociationDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssociationDefinition-matchForStub-_ownedComment.0"
          annotatedElement="AssociationDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this association definition
            considered as a classifier definition and the subunit is for an association definition.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="AssociationDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="AssociationDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="AssociationDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="AssociationDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssociationDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="AssociationDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, an association
            definition allows an annotation for any stereotype whose metaclass is consistent with
            Association. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="AssociationDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="AssociationDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="AssociationDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="AssociationDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="AssociationDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="AssociationDefinition-isSameKindAs">
          <body>Return true if the given member is either an AssociationDefinition or an imported
            member whose referent is an AssociationDefinition or an Association. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="AssociationDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="AssociationDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="AssociationDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="AssociationDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PropertyDefinition" name="PropertyDefinition"
      superClass="TypedElementDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PropertyDefinition-_ownedComment.0"
        annotatedElement="PropertyDefinition">
        <body>A typed element definition for a property (attribute or association end). </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyDefinition-propertyDefinitionInitializer"
        name="propertyDefinitionInitializer" namespace="PropertyDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-propertyDefinitionInitializer-_ownedComment.0"
          annotatedElement="PropertyDefinition-propertyDefinitionInitializer">
          <body>If a property definition has an initializer, then the initializer expression must be
            assignable to the property definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyDefinition-propertyDefinitionInitializer-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyDefinition-propertyDefinitionIsCollectionConversionDerivation"
        name="propertyDefinitionIsCollectionConversionDerivation" namespace="PropertyDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-propertyDefinitionIsCollectionConversionDerivation-_ownedComment.0"
          annotatedElement="PropertyDefinition-propertyDefinitionIsCollectionConversionDerivation">
          <body>A property definition requires collection conversion if its initializer has a
            collection class as its type and the property definition does not. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyDefinition-propertyDefinitionIsCollectionConversionDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyDefinition-propertyDefinitionIsBitStringConversion"
        name="propertyDefinitionIsBitStringConversion" namespace="PropertyDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-propertyDefinitionIsBitStringConversion-_ownedComment.0"
          annotatedElement="PropertyDefinition-propertyDefinitionIsBitStringConversion">
          <body>A property definition requires BitString conversion if its type is BitString and the
            type of its initializer is Integer or a collection class whose argument type is Integer.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyDefinition-propertyDefinitionIsBitStringConversion-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PropertyDefinition-propertyDefinitionIsFeatureDerivation"
        name="propertyDefinitionIsFeatureDerivation" namespace="PropertyDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-propertyDefinitionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="PropertyDefinition-propertyDefinitionIsFeatureDerivation">
          <body>A property definition is a feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PropertyDefinition-propertyDefinitionIsFeatureDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyDefinition-isComposite"
        name="isComposite" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-isComposite-_ownedComment.0"
          annotatedElement="PropertyDefinition-isComposite">
          <body>Whether the property being defined has composite aggregation. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyDefinition-initializer"
        name="initializer" visibility="public" type="Expression" lower="0" isComposite="true"
        association="_packagedElement.255">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-initializer-_ownedComment.0"
          annotatedElement="PropertyDefinition-initializer">
          <body>The expression to be evaluated to initialize the property. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyDefinition-isCollectionConversion"
        name="isCollectionConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-isCollectionConversion-_ownedComment.0"
          annotatedElement="PropertyDefinition-isCollectionConversion">
          <body>Whether collection conversion is required for the initialization of this property.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PropertyDefinition-isBitStringConversion"
        name="isBitStringConversion" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-isBitStringConversion-_ownedComment.0"
          annotatedElement="PropertyDefinition-isBitStringConversion">
          <body>Whether BitString conversion is required for the initialization of this property.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PropertyDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="PropertyDefinition"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="PropertyDefinition-annotationAllowed">
          <body>Returns true if the annotation is for a stereotype that has a metaclass consistent
            with Property. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PropertyDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PropertyDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PropertyDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="PropertyDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PropertyDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="PropertyDefinition-isSameKindAs">
          <body>Return true if the given member is either a PropertyDefinition or an imported member
            whose referent is a PropertyDefinition or a Property. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="PropertyDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="PropertyDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="PropertyDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PropertyDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TaggedValue" name="TaggedValue"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValue-_ownedComment.0"
        annotatedElement="TaggedValue">
        <body>An assignment of a value to an attribute of an applied stereotype. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TaggedValue-name" name="name"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValue-name-_ownedComment.0"
          annotatedElement="TaggedValue-name">
          <body>The name of the stereotype attribute to be assigned a value. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TaggedValue-value" name="value"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValue-value-_ownedComment.0"
          annotatedElement="TaggedValue-value">
          <body>The string image of a literal value to be assigned to the stereotype attribute.
          </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TaggedValue-operator" name="operator"
        visibility="public" lower="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValue-operator-_ownedComment.0"
          annotatedElement="TaggedValue-operator">
          <body>For a numeric value, an optional unary plus or minus operator. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NamespaceDefinition" name="NamespaceDefinition"
      isAbstract="true" superClass="Member">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NamespaceDefinition-_ownedComment.0"
        annotatedElement="NamespaceDefinition">
        <body>A model of the common properties of the definition of a namespace in Alf. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NamespaceDefinition-namespaceDefinitionMemberDerivation"
        name="namespaceDefinitionMemberDerivation" namespace="NamespaceDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamespaceDefinition-namespaceDefinitionMemberDerivation-_ownedComment.0"
          annotatedElement="NamespaceDefinition-namespaceDefinitionMemberDerivation">
          <body>The members of a namespace definition include references to all owned members. Also,
            if the namespace definition has a unit with imports, then the members include imported
            members with referents to all imported elements. The imported elements and their
            visibility are determined as given in the UML Superstructure. The name of an imported
            member is the name of the imported element or its alias, if one has been given for it.
            Elements that would be indistinguishable from each other or from an owned member (as
            determined by the Member::isDistinguishableFrom operation) are not imported. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NamespaceDefinition-namespaceDefinitionMemberDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="NamespaceDefinition-namespaceDefinitionMemberDistinguishaibility"
        name="namespaceDefinitionMemberDistinguishaibility" namespace="NamespaceDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamespaceDefinition-namespaceDefinitionMemberDistinguishaibility-_ownedComment.0"
          annotatedElement="NamespaceDefinition-namespaceDefinitionMemberDistinguishaibility">
          <body>The members of a namespace must be distinguishable as determined by the
            Member::isDistinguishableFrom operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="NamespaceDefinition-namespaceDefinitionMemberDistinguishaibility-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamespaceDefinition-ownedMember"
        name="ownedMember" visibility="public" type="Member" upper="*" isComposite="true"
        association="_packagedElement.267">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamespaceDefinition-ownedMember-_ownedComment.0"
          annotatedElement="NamespaceDefinition-ownedMember">
          <body>The definitions of owned members of the namespace. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamespaceDefinition-unit" name="unit"
        visibility="public" type="UnitDefinition" lower="0" association="_packagedElement.265">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamespaceDefinition-unit-_ownedComment.0"
          annotatedElement="NamespaceDefinition-unit">
          <body>The unit for which this namespace is a definition, if any. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamespaceDefinition-member" name="member"
        visibility="public" type="Member" upper="*" isDerived="true"
        association="_packagedElement.262">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamespaceDefinition-member-_ownedComment.0"
          annotatedElement="NamespaceDefinition-member">
          <body>The owned and imported members of a namespace definition. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NamespaceDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="NamespaceDefinition"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="NamespaceDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="NamespaceDefinition-annotationAllowed">
          <body>Returns true if the annotation is @external. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="NamespaceDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="NamespaceDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DataTypeDefinition" name="DataTypeDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DataTypeDefinition-_ownedComment.0"
        annotatedElement="DataTypeDefinition">
        <body>The definition of a data type, whose members must all be properties. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DataTypeDefinition-dataTypeDefinitionPrimitive"
        name="dataTypeDefinitionPrimitive" namespace="DataTypeDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DataTypeDefinition-dataTypeDefinitionPrimitive-_ownedComment.0"
          annotatedElement="DataTypeDefinition-dataTypeDefinitionPrimitive">
          <body>If a data type is primitive, then it may not have any owned members. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DataTypeDefinition-dataTypeDefinitionPrimitive-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="DataTypeDefinition-dataTypeDefinitionSpecializationReferent"
        name="dataTypeDefinitionSpecializationReferent" namespace="DataTypeDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DataTypeDefinition-dataTypeDefinitionSpecializationReferent-_ownedComment.0"
          annotatedElement="DataTypeDefinition-dataTypeDefinitionSpecializationReferent">
          <body>The specialization referents of a data type definition must all be data types.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="DataTypeDefinition-dataTypeDefinitionSpecializationReferent-_specification"
          name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="DataTypeDefinition-matchForStub"
        name="matchForStub" visibility="public" class="DataTypeDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DataTypeDefinition-matchForStub-_ownedComment.0"
          annotatedElement="DataTypeDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this data type definition
            considered as a classifier definition and the subunit is for a data type definition.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="DataTypeDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="DataTypeDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="DataTypeDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="DataTypeDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DataTypeDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="DataTypeDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, a data type
            definition allows @primitive annotations plus any stereotype whose metaclass is
            consistent with DataType. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="DataTypeDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="DataTypeDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="DataTypeDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="DataTypeDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="DataTypeDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="DataTypeDefinition-isSameKindAs">
          <body>Return true if the given member is either a DataTypeDefinition or an imported member
            whose referent is a DataTypeDefinition or a DataType. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="DataTypeDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="DataTypeDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="DataTypeDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="DataTypeDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ImportReference" name="ImportReference"
      isAbstract="true" superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ImportReference-_ownedComment.0"
        annotatedElement="ImportReference">
        <body>A reference to an element or package to be imported into a unit. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ImportReference-importReferenceReferentDerivation"
        name="importReferenceReferentDerivation" namespace="ImportReference">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ImportReference-importReferenceReferentDerivation-_ownedComment.0"
          annotatedElement="ImportReference-importReferenceReferentDerivation">
          <body>The referent of an import reference is the element denoted by the referent name.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ImportReference-importReferenceReferentDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ImportReference-importReferenceReferent"
        name="importReferenceReferent" namespace="ImportReference">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ImportReference-importReferenceReferent-_ownedComment.0"
          annotatedElement="ImportReference-importReferenceReferent">
          <body>The referent name of an import reference must resolve to a single element with
            public or empty visibility. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ImportReference-importReferenceReferent-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ImportReference-visibility" name="visibility"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ImportReference-visibility-_ownedComment.0"
          annotatedElement="ImportReference-visibility">
          <body>An indication of the visibility of the import. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ImportReference-referentName"
        name="referentName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.272">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ImportReference-referentName-_ownedComment.0"
          annotatedElement="ImportReference-referentName">
          <body>The name of the element or package to be imported. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ImportReference-unit" name="unit"
        visibility="public" type="UnitDefinition" association="_packagedElement.269">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ImportReference-unit-_ownedComment.0"
          annotatedElement="ImportReference-unit">
          <body>The unit that is making this import reference. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ImportReference-referent" name="referent"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.266">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ImportReference-referent-_ownedComment.0"
          annotatedElement="ImportReference-referent">
          <body>A reference to the imported element denoted by the given qualified name. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityDefinition" name="ActivityDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityDefinition-_ownedComment.0"
        annotatedElement="ActivityDefinition">
        <body>The definition of an activity, with any formal parameters defined as owned members.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ActivityDefinition-activityDefinitionSpecialization"
        name="activityDefinitionSpecialization" namespace="ActivityDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActivityDefinition-activityDefinitionSpecialization-_ownedComment.0"
          annotatedElement="ActivityDefinition-activityDefinitionSpecialization">
          <body>An activity definition may not have a specialization list. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ActivityDefinition-activityDefinitionSpecialization-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityDefinition-activityDefinitionPrimitive"
        name="activityDefinitionPrimitive" namespace="ActivityDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActivityDefinition-activityDefinitionPrimitive-_ownedComment.0"
          annotatedElement="ActivityDefinition-activityDefinitionPrimitive">
          <body>If an activity definition is primitive, then it must have a body that is empty.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ActivityDefinition-activityDefinitionPrimitive-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityDefinition-body" name="body"
        visibility="public" type="Block" lower="0" isComposite="true"
        association="_packagedElement.280">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityDefinition-body-_ownedComment.0"
          annotatedElement="ActivityDefinition-body">
          <body>The sequence of statements that defines the behavior of the activity (empty for a
            stub). </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ActivityDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="ActivityDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActivityDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="ActivityDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, an activity
            definition allows @primitive annotations and any stereotype whose metaclass is
            consistent with Activity. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ActivityDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ActivityDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ActivityDefinition-matchForStub"
        name="matchForStub" visibility="public" class="ActivityDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActivityDefinition-matchForStub-_ownedComment.0"
          annotatedElement="ActivityDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this activity definition
            considered as a classifier definition and the subunit is for an activity definition. In
            addition, the subunit definition must have formal parameters that match each of the
            formal parameters of the stub definition, in order. Two formal parameters match if they
            have the same direction, name, multiplicity bounds, ordering, uniqueness and type
            reference. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ActivityDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ActivityDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ReceptionDefinition" name="ReceptionDefinition"
      superClass="Member">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ReceptionDefinition-_ownedComment.0"
        annotatedElement="ReceptionDefinition">
        <body>The declaration of the ability of an active class to receive a signal. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ReceptionDefinition-receptionDefinitionSignalName"
        name="receptionDefinitionSignalName" namespace="ReceptionDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-receptionDefinitionSignalName-_ownedComment.0"
          annotatedElement="ReceptionDefinition-receptionDefinitionSignalName">
          <body>The signal name for a reception definition must have a single referent that is a
            signal. This referent must not e a template. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReceptionDefinition-receptionDefinitionSignalName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ReceptionDefinition-receptionDefinitionSignalDerivation"
        name="receptionDefinitionSignalDerivation" namespace="ReceptionDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-receptionDefinitionSignalDerivation-_ownedComment.0"
          annotatedElement="ReceptionDefinition-receptionDefinitionSignalDerivation">
          <body>The signal for a reception definition is the signal referent of the signal name for
            the reception definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReceptionDefinition-receptionDefinitionSignalDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ReceptionDefinition-receptionDefinitionIsFeatureDerivation"
        name="receptionDefinitionIsFeatureDerivation" namespace="ReceptionDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-receptionDefinitionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="ReceptionDefinition-receptionDefinitionIsFeatureDerivation">
          <body>A reception definition is a feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ReceptionDefinition-receptionDefinitionIsFeatureDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReceptionDefinition-signalName"
        name="signalName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.257">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-signalName-_ownedComment.0"
          annotatedElement="ReceptionDefinition-signalName">
          <body>The name of the signal to be received. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReceptionDefinition-signal" name="signal"
        visibility="public" type="ElementReference" isDerived="true"
        association="_packagedElement.251"/>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ReceptionDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="ReceptionDefinition"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="ReceptionDefinition-annotationAllowed">
          <body>Returns true if the annotation is for a stereotype that has a metaclass consistent
            with Reception. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ReceptionDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ReceptionDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ReceptionDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="ReceptionDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ReceptionDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="ReceptionDefinition-isSameKindAs">
          <body>Return true if the given member is either a ReceptionDefinition, a
            SignalReceptionDefinition or an imported member whose referent is a ReceptionDefinition,
            a SignalReceptionDefinition or a Reception. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ReceptionDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="ReceptionDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="ReceptionDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ReceptionDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ElementImportReference" name="ElementImportReference"
      superClass="ImportReference">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImportReference-_ownedComment.0"
        annotatedElement="ElementImportReference">
        <body>An import reference to a single element to be imported into a unit. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ElementImportReference-alias" name="alias"
        visibility="public" lower="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImportReference-alias-_ownedComment.0"
          annotatedElement="ElementImportReference-alias">
          <body>The alias to be used as the name for the imported element in the importing unit’s
            namespace. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Member" name="Member" isAbstract="true"
      superClass="DocumentedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Member-_ownedComment.0"
        annotatedElement="Member">
        <body>A model of the common properties of the definition of a member of a namespace in Alf.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberAnnotations"
        name="memberAnnotations" namespace="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-memberAnnotations-_ownedComment.0"
          annotatedElement="Member-memberAnnotations">
          <body>All stereotype annotations for a member must be allowed, as determined using the
            stereotypeAllowed operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberAnnotations-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberIsPrimitiveDerivation"
        name="memberIsPrimitiveDerivation" namespace="Member">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Member-memberIsPrimitiveDerivation-_ownedComment.0"
          annotatedElement="Member-memberIsPrimitiveDerivation">
          <body>A member is primitive if it has a @primitive annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberIsPrimitiveDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberIsExternalDerivation"
        name="memberIsExternalDerivation" namespace="Member">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Member-memberIsExternalDerivation-_ownedComment.0"
          annotatedElement="Member-memberIsExternalDerivation">
          <body>A member is external if it has an @external derivation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberIsExternalDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberExternal" name="memberExternal"
        namespace="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-memberExternal-_ownedComment.0"
          annotatedElement="Member-memberExternal">
          <body>If a member is external then it must be a stub. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberExternal-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberStub" name="memberStub"
        namespace="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-memberStub-_ownedComment.0"
          annotatedElement="Member-memberStub">
          <body>If a member is a stub and is not external, then there must be a single subunit with
            the same qualified name as the stub that matches the stub, as determined by the
            matchForStub operation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Member-memberStub-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberSubunitDerivation"
        name="memberSubunitDerivation" namespace="Member">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="Member-memberSubunitDerivation-_ownedComment.0"
          annotatedElement="Member-memberSubunitDerivation">
          <body>If the member is a stub and is not external, then its corresponding subunit is a
            unit definition with the same fully qualified name as the stub. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberSubunitDerivation-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberStubStereotypes"
        name="memberStubStereotypes" namespace="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-memberStubStereotypes-_ownedComment.0"
          annotatedElement="Member-memberStubStereotypes">
          <body>If a member is a stub, then the it must not have any stereotype annotations that are
            the same as its subunit. Two stereotype annotations are the same if they are for the
            same stereotype. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberStubStereotypes-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Member-memberPrimitive" name="memberPrimitive"
        namespace="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-memberPrimitive-_ownedComment.0"
          annotatedElement="Member-memberPrimitive">
          <body>If a member is primitive, then it may not be a stub and it may not have any owned
            members that are template parameters. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="Member-memberPrimitive-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-name" name="name" visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-name-_ownedComment.0"
          annotatedElement="Member-name">
          <body>The name of the member. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-visibility" name="visibility"
        visibility="public" lower="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-visibility-_ownedComment.0"
          annotatedElement="Member-visibility">
          <body>An indication of the visibility of the member outside of its namespace. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-isStub" name="isStub"
        visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isStub-_ownedComment.0"
          annotatedElement="Member-isStub">
          <body>Whether this member definition is a stub for a subunit. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-namespace" name="namespace"
        visibility="public" type="NamespaceDefinition" lower="0" association="_packagedElement.267">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-namespace-_ownedComment.0"
          annotatedElement="Member-namespace">
          <body>The namespace definition within which this member definition is nested, if any. (The
            namespace definitions for units are not physically nested within another Alf namespace
            definition.) </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-annotation" name="annotation"
        visibility="public" type="StereotypeAnnotation" upper="*" isComposite="true"
        association="_packagedElement.279">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-annotation-_ownedComment.0"
          annotatedElement="Member-annotation">
          <body>The stereotype annotations on this member definition. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-isFeature" name="isFeature"
        visibility="public" isDerived="true" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isFeature-_ownedComment.0"
          annotatedElement="Member-isFeature">
          <body>Whether this member is a feature of a classifier. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-isPrimitive" name="isPrimitive"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isPrimitive-_ownedComment.0"
          annotatedElement="Member-isPrimitive">
          <body>Whether this member is a primitive or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-isExternal" name="isExternal"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isExternal-_ownedComment.0"
          annotatedElement="Member-isExternal">
          <body>Whether this member is external or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Member-subunit" name="subunit"
        visibility="public" type="UnitDefinition" lower="0" isDerived="true"
        association="_packagedElement.274">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-subunit-_ownedComment.0"
          annotatedElement="Member-subunit">
          <body>The subunit corresponding to the member, if the member is a stub. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Member-annotationAllowed"
        name="annotationAllowed" visibility="public" class="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-annotationAllowed-_ownedComment.0"
          annotatedElement="Member-annotationAllowed">
          <body>Returns true of the given stereotype annotation is allowed for this kind of element.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-annotationAllowed-annotation"
          name="annotation" visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="Member-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Member-matchForStub" name="matchForStub"
        visibility="public" class="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-matchForStub-_ownedComment.0"
          annotatedElement="Member-matchForStub">
          <body>Returns true of the given unit definition is a legal match for this member as a
            stub. By default, always returns false. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-matchForStub-unit" name="unit"
          visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-matchForStub-_ownedParameter.1"
          name="" visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Member-isDistinguishableFrom"
        name="isDistinguishableFrom" visibility="public" class="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isDistinguishableFrom-_ownedComment.0"
          annotatedElement="Member-isDistinguishableFrom">
          <body>Returns true if this member is distinguishable from the given member. Two members
            are distinguishable if their names are different or the they are of different kinds (as
            determined by the isSameKindAs operation). However, in any case that the UML
            Superstructure considers two names to be distinguishable if they are different, an Alf
            implementation may instead impose the stronger requirement that the names not be
            conflicting. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-isDistinguishableFrom-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="Member-isDistinguishableFrom-member-_ownedComment.0"
            annotatedElement="Member-isDistinguishableFrom-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="Member-isDistinguishableFrom-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Member-isSameKindAs" name="isSameKindAs"
        visibility="public" class="Member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isSameKindAs-_ownedComment.0"
          annotatedElement="Member-isSameKindAs">
          <body>Returns true if this member is of the same kind as the given member. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-isSameKindAs-member" name="member"
          visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment" xmi:id="Member-isSameKindAs-member-_ownedComment.0"
            annotatedElement="Member-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Member-isSameKindAs-_ownedParameter.1"
          name="" visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SignalReceptionDefinition"
      name="SignalReceptionDefinition" superClass="SignalDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SignalReceptionDefinition-_ownedComment.0"
        annotatedElement="SignalReceptionDefinition">
        <body>The definition of both a signal and a reception of that signal as a feature of the
          containing active class. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SignalReceptionDefinition-signalReceptionDefinitionIsFeatureDerivation"
        name="signalReceptionDefinitionIsFeatureDerivation" namespace="SignalReceptionDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SignalReceptionDefinition-signalReceptionDefinitionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="SignalReceptionDefinition-signalReceptionDefinitionIsFeatureDerivation">
          <body>A signal reception definition is a feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SignalReceptionDefinition-signalReceptionDefinitionIsFeatureDerivation-_specification"
          name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OperationDefinition" name="OperationDefinition"
      superClass="NamespaceDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OperationDefinition-_ownedComment.0"
        annotatedElement="OperationDefinition">
        <body>The definition of an operation, with any formal parameters defined as owned members.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionNamespace"
        name="operationDefinitionNamespace" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionNamespace-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionNamespace">
          <body>The namespace for an operation definition must be a class definition. If the
            operation definition is abstract, then the class definition must be abstract. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionNamespace-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionRedefinedOperationsDerivation"
        name="operationDefinitionRedefinedOperationsDerivation" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionRedefinedOperationsDerivation-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionRedefinedOperationsDerivation">
          <body>If an operation definition has a redefinition list, its redefined operations are the
            referent operations of the names in the redefinition list for the operation definition.
            Otherwise, the redefined operations are any operations that would otherwise be
            indistinguishable from the operation being defined in this operation definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionRedefinedOperationsDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionRedefinition"
        name="operationDefinitionRedefinition" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionRedefinition-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionRedefinition">
          <body>Each name in the redefinition list of an operation definition must have a signal
            referent that is an operation. This operation must be a non-private operation that is a
            member of a specialization referent of the class definition of the operation definition.
          </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionRedefinition-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionRedefinedOperations"
        name="operationDefinitionRedefinedOperations" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionRedefinedOperations-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionRedefinedOperations">
          <body>The redefined operations of an operation definition must have formal parameters that
            match each of the formal parameters of this operation definition, in order. Two formal
            parameters match if they have the same direction, name, multiplicity bounds, ordering,
            uniqueness and type reference. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionRedefinedOperations-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionIsFeatureDerivation"
        name="operationDefinitionIsFeatureDerivation" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionIsFeatureDerivation-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionIsFeatureDerivation">
          <body>An operation definition is a feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionIsFeatureDerivation-_specification" name=""
        />
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionIsConstructorDefinition"
        name="operationDefinitionIsConstructorDefinition" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionIsConstructorDefinition-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionIsConstructorDefinition">
          <body>An operation definition is a constructor if it has a @Create annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionIsConstructorDefinition-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionIsDestructorDefinition"
        name="operationDefinitionIsDestructorDefinition" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionIsDestructorDefinition-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionIsDestructorDefinition">
          <body>An operation definition is a destructor if it has a @Destroy annotation. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionIsDestructorDefinition-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionConstructorDestructor"
        name="operationDefinitionConstructorDestructor" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionConstructorDestructor-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionConstructorDestructor">
          <body>An operation definition cannot be both a constructor and a destructor. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionConstructorDestructor-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionConstructor"
        name="operationDefinitionConstructor" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionConstructor-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionConstructor">
          <body>If an operation definition is a constructor, any redefined operation for it must
            also be a constructor. The body of a constructor may contain an alternative constructor
            invocation for another constructor in the same class or super constructor invocations
            for constructors in immediate superclasses. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionConstructor-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="OperationDefinition-operationDefinitionDestructor"
        name="operationDefinitionDestructor" namespace="OperationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-operationDefinitionDestructor-_ownedComment.0"
          annotatedElement="OperationDefinition-operationDefinitionDestructor">
          <body>If an operation definition is a destructor, any redefined operation for it must also
            be a destructor. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="OperationDefinition-operationDefinitionDestructor-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-redefinition"
        name="redefinition" visibility="public" type="QualifiedNameList" lower="0"
        isComposite="true" association="_packagedElement.256">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-redefinition-_ownedComment.0"
          annotatedElement="OperationDefinition-redefinition">
          <body>The names of other operations that are redefined by the operation being defined.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-isAbstract"
        name="isAbstract" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-isAbstract-_ownedComment.0"
          annotatedElement="OperationDefinition-isAbstract">
          <body>Whether the operation being defined is abstract. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-body" name="body"
        visibility="public" type="Block" lower="0" isComposite="true"
        association="_packagedElement.263">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OperationDefinition-body-_ownedComment.0"
          annotatedElement="OperationDefinition-body">
          <body>The sequence of statements that defines the behavior of the operation (empty for a
            stub). </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-redefinedOperations"
        name="redefinedOperations" visibility="public" type="ElementReference" upper="*"
        isDerived="true" association="_packagedElement.270"/>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-isConstructor"
        name="isConstructor" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-isConstructor-_ownedComment.0"
          annotatedElement="OperationDefinition-isConstructor">
          <body>Whether this operation definition is for a constructor. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OperationDefinition-isDestructor"
        name="isDestructor" visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-isDestructor-_ownedComment.0"
          annotatedElement="OperationDefinition-isDestructor">
          <body>Whether this operation definition is for a destructor. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OperationDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="OperationDefinition"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="OperationDefinition-annotationAllowed">
          <body>Returns true if the annotation is for a stereotype that has a metaclass consistent
            with Operation. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="OperationDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="OperationDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OperationDefinition-matchForStub"
        name="matchForStub" visibility="public" class="OperationDefinition"
        redefinedOperation="Member-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-matchForStub-_ownedComment.0"
          annotatedElement="OperationDefinition-matchForStub">
          <body>The namespace definition associated with the given unit definition must be an
            activity definition with no template parameters. In addition, the subunit definition
            must have formal parameters that match each of the formal parameters of the stub
            definition, in order. Two formal parameters match if they have the same direction, name,
            multiplicity bounds, ordering, uniqueness and type reference. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OperationDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="OperationDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OperationDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="OperationDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="OperationDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="OperationDefinition-isSameKindAs">
          <body>Return true if the given member is either an OperationDefinition or an imported
            member whose referent is an OperationDefinition or an Operation, and the formal
            parameters of this operation definition match, in order, the parameters of the other
            operation definition or operation. In this context, matching means the same name and
            type (per UML Superstructure, Subclause 7.3.5). </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OperationDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="OperationDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="OperationDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="OperationDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="FormalParameter" name="FormalParameter"
      superClass="TypedElementDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="FormalParameter-_ownedComment.0"
        annotatedElement="FormalParameter">
        <body>A typed element definition for the formal parameter of an activity or operation.
        </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="FormalParameter-direction" name="direction"
        visibility="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FormalParameter-direction-_ownedComment.0"
          annotatedElement="FormalParameter-direction">
          <body>An indication of the direction of the parameter being defined. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="FormalParameter-annotationAllowed"
        name="annotationAllowed" visibility="public" class="FormalParameter"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="FormalParameter-annotationAllowed-_ownedComment.0"
          annotatedElement="FormalParameter-annotationAllowed">
          <body>Returns true if the annotation is for a stereotype that has a metaclass consistent
            with Parameter. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="FormalParameter-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="FormalParameter-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="FormalParameter-isSameKindAs"
        name="isSameKindAs" visibility="public" class="FormalParameter"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FormalParameter-isSameKindAs-_ownedComment.0"
          annotatedElement="FormalParameter-isSameKindAs">
          <body>Return true if the given member is a FormalParameter. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="FormalParameter-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="FormalParameter-isSameKindAs-member-_ownedComment.0"
            annotatedElement="FormalParameter-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="FormalParameter-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="StereotypeAnnotation" name="StereotypeAnnotation"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="StereotypeAnnotation-_ownedComment.0"
        annotatedElement="StereotypeAnnotation">
        <body>An annotation of a member definition indicating the application of a stereotype (or
          one of a small number of special-case annotations). </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeDerivation"
        name="stereotypeAnnotationStereotypeDerivation" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeDerivation-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationStereotypeDerivation">
          <body>Unless the stereotype name is "apply", "primitive" or "external" then the stereotype
            for a stereotype annotation is the stereotype denoted by the stereotype name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeName"
        name="stereotypeAnnotationStereotypeName" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeName-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationStereotypeName">
          <body>The stereotype name of a stereotype annotation must either be one of "apply",
            "primitive" or "external", or it must denote a single stereotype from a profile applied
            to an enclosing package. The stereotype name does not need to be qualified if there is
            only one applied profile with a stereotype of that name or if the there is a standard
            UML profile with the name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationStereotypeName-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="StereotypeAnnotation-stereotypeAnnotationApply"
        name="stereotypeAnnotationApply" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationApply-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationApply">
          <body>If the stereotype name of a stereotype annotation is "apply", then it must have a
            name list and all of the names in the list must resolve to profiles. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationApply-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StereotypeAnnotation-stereotypeAnnotationPrimitive"
        name="stereotypeAnnotationPrimitive" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationPrimitive-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationPrimitive">
          <body>If the stereotype name of a stereotype annotation is "primitive", then it may not
            have tagged values or names. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationPrimitive-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StereotypeAnnotation-stereotypeAnnotationExternal"
        name="stereotypeAnnotationExternal" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationExternal-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationExternal">
          <body>If the stereotype name of a stereotype annotation is "external", then it may
            optionally have a single tagged value with the name "file" and no operator. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationExternal-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="StereotypeAnnotation-stereotypeAnnotationTaggedValues"
        name="stereotypeAnnotationTaggedValues" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationTaggedValues-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationTaggedValues">
          <body>If a stereotype annotation has a stereotype and tagged values, then the each tagged
            value must have the name of an attribute of the stereotype and a value that is legally
            interpretable for the type of that attribute. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationTaggedValues-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="StereotypeAnnotation-stereotypeAnnotationNames"
        name="stereotypeAnnotationNames" namespace="StereotypeAnnotation">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationNames-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeAnnotationNames">
          <body>If a stereotype annotation has a stereotype and a list of names, then all the names
            in the list must resolve to visible model elements and the stereotype must have a single
            attribute with a (metaclass) type and multiplicity that are consistent with the types
            and number of the elements denoted by the given names. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="StereotypeAnnotation-stereotypeAnnotationNames-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StereotypeAnnotation-taggedValues"
        name="taggedValues" visibility="public" type="TaggedValueList" lower="0" isComposite="true"
        association="_packagedElement.271">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-taggedValues-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-taggedValues">
          <body>A set of tagged values for the applied stereotype. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StereotypeAnnotation-names" name="names"
        visibility="public" type="QualifiedNameList" lower="0" isComposite="true"
        association="_packagedElement.278">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StereotypeAnnotation-names-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-names">
          <body>A set of references to model elements required for the stereotype being applied.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StereotypeAnnotation-stereotypeName"
        name="stereotypeName" visibility="public" type="QualifiedName" isComposite="true"
        association="_packagedElement.276">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotypeName-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotypeName">
          <body>The name of the stereotype being applied. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StereotypeAnnotation-stereotype"
        name="stereotype" visibility="public" lower="0" isDerived="true"
        association="_packagedElement.260">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="StereotypeAnnotation-stereotype-_ownedComment.0"
          annotatedElement="StereotypeAnnotation-stereotype">
          <body>The stereotype denoted by the stereotype name. </body>
        </ownedComment>
        <type xmi:type="cmof:Class" href="http://www.omg.org/spec/UML/2.4/uml.xmi#Stereotype"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ImportedMember" name="ImportedMember"
      superClass="Member">
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ImportedMember-importedElementNotStub"
        name="importedElementNotStub" namespace="ImportedMember">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ImportedMember-importedElementNotStub-_ownedComment.0"
          annotatedElement="ImportedMember-importedElementNotStub">
          <body>An imported element is not a stub. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ImportedMember-importedElementNotStub-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ImportedMember-importedElementFeatureDerivation"
        name="importedElementFeatureDerivation" namespace="ImportedMember">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ImportedMember-importedElementFeatureDerivation-_ownedComment.0"
          annotatedElement="ImportedMember-importedElementFeatureDerivation">
          <body>An imported element is a feature if its referent is a feature. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ImportedMember-importedElementFeatureDerivation-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ImportedMember-referent" name="referent"
        visibility="public" type="ElementReference" association="_packagedElement.261"/>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ImportedMember-annotationAllowed"
        name="annotationAllowed" visibility="public" class="ImportedMember"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ImportedMember-annotationAllowed-_ownedComment.0"
          annotatedElement="ImportedMember-annotationAllowed">
          <body>Returns false. (Imported members do not have annotations.) </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ImportedMember-annotationAllowed-annotation" name="annotation" visibility="public"
          type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ImportedMember-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ImportedMember-isSameKindAs"
        name="isSameKindAs" visibility="public" class="ImportedMember"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ImportedMember-isSameKindAs-_ownedComment.0"
          annotatedElement="ImportedMember-isSameKindAs">
          <body>If the given member is not an imported member, then return the result of checking
            whether the given member is distinguishable from this member. Else, if the element of
            the referent for this member is an Alf member, then return the result of checking
            whether that element is distinguishable from the given member. Else, if the element of
            the referent for the given member is an Alf member, then return the result of checking
            whether that element is distinguishable from this member. Else, the referents for both
            this and the given member are UML elements, so return the result of checking their
            distinguishability according to the rules of the UML superstructure. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ImportedMember-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="ImportedMember-isSameKindAs-member-_ownedComment.0"
            annotatedElement="ImportedMember-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ImportedMember-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActiveClassDefinition" name="ActiveClassDefinition"
      superClass="ClassDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActiveClassDefinition-_ownedComment.0"
        annotatedElement="ActiveClassDefinition">
        <body>The definition of an active class. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActiveClassDefinition-classifierBehavior"
        name="classifierBehavior" visibility="public" type="ActivityDefinition" lower="0"
        association="_packagedElement.259">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActiveClassDefinition-classifierBehavior-_ownedComment.0"
          annotatedElement="ActiveClassDefinition-classifierBehavior">
          <body>The definition of an activity (which may be a stub) to act as the classifier
            behavior of the active class. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ActiveClassDefinition-matchForStub"
        name="matchForStub" visibility="public" class="ActiveClassDefinition"
        redefinedOperation="ClassDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ActiveClassDefinition-matchForStub-_ownedComment.0"
          annotatedElement="ActiveClassDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this active class definition
            considered as a class definition and the subunit is for an active class definition.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ActiveClassDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ActiveClassDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TaggedValueList" name="TaggedValueList"
      superClass="SyntaxElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValueList-_ownedComment.0"
        annotatedElement="TaggedValueList">
        <body>A set of tagged values for a stereotype application. </body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TaggedValueList-taggedValue"
        name="taggedValue" visibility="public" type="TaggedValue" upper="*"
        association="_packagedElement.264">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TaggedValueList-taggedValue-_ownedComment.0"
          annotatedElement="TaggedValueList-taggedValue">
          <body>The tagged values in the set. </body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassifierDefinition" name="ClassifierDefinition"
      isAbstract="true" superClass="NamespaceDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassifierDefinition-_ownedComment.0"
        annotatedElement="ClassifierDefinition">
        <body>The definition of a classifier. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifierDefinition-classifierDefinitionSpecialization"
        name="classifierDefinitionSpecialization" namespace="ClassifierDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-classifierDefinitionSpecialization-_ownedComment.0"
          annotatedElement="ClassifierDefinition-classifierDefinitionSpecialization">
          <body>Each name listed in the specialization list for a classifier definition must have a
            single classifier referent. None of these referents may be templates. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifierDefinition-classifierDefinitionSpecialization-_specification" name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifierDefinition-classifierDefinitionSpecializationReferentDerivation"
        name="classifierDefinitionSpecializationReferentDerivation" namespace="ClassifierDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-classifierDefinitionSpecializationReferentDerivation-_ownedComment.0"
          annotatedElement="ClassifierDefinition-classifierDefinitionSpecializationReferentDerivation">
          <body>The specialization referents of a classifier definition are the classifiers denoted
            by the names in the specialization list for the classifier definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifierDefinition-classifierDefinitionSpecializationReferentDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassifierDefinition-classifierDefinitionInheritedMembers"
        name="classifierDefinitionInheritedMembers" namespace="ClassifierDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-classifierDefinitionInheritedMembers-_ownedComment.0"
          annotatedElement="ClassifierDefinition-classifierDefinitionInheritedMembers">
          <body>The members of a classifier definition include non-private members inherited from
            the classifiers it specializes. The visibility of inherited members is as specified in
            the UML Superstructure, Subclause 7.3.8. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassifierDefinition-classifierDefinitionInheritedMembers-_specification" name=""
        />
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifierDefinition-isAbstract"
        name="isAbstract" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-isAbstract-_ownedComment.0"
          annotatedElement="ClassifierDefinition-isAbstract">
          <body>Whether the classifier is abstract or not. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifierDefinition-specialization"
        name="specialization" visibility="public" type="QualifiedNameList" lower="0"
        isComposite="true" association="_packagedElement.277">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-specialization-_ownedComment.0"
          annotatedElement="ClassifierDefinition-specialization">
          <body>The names of classifiers specialized by the classifier being defined. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ClassifierDefinition-specializationReferent"
        name="specializationReferent" visibility="public" type="ElementReference" upper="*"
        isDerived="true" association="_packagedElement.254">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-specializationReferent-_ownedComment.0"
          annotatedElement="ClassifierDefinition-specializationReferent">
          <body>References to the classifiers to which the names in the specialization list resolve.
          </body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassifierDefinition-matchForStub"
        name="matchForStub" visibility="public" class="ClassifierDefinition"
        redefinedOperation="Member-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassifierDefinition-matchForStub-_ownedComment.0"
          annotatedElement="ClassifierDefinition-matchForStub">
          <body>The namespace definition associated with the given unit definition must be a
            classifier definition. The subunit classifier definition may be abstract if and only if
            the subunit classifier definition is abstract. The subunit classifier definition must
            have the same specialization referents as the stub classifier definition. (Note that it
            is the referents that must match, not the exact names or the ordering of those names in
            the specialization list.) The subunit classifier definition must also have a matching
            classifier template parameter for each classifier template parameter of the stub
            classifier definition. Two template parameters match if they have same names and the
            same specialization referents. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ClassifierDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassifierDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SignalDefinition" name="SignalDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SignalDefinition-_ownedComment.0"
        annotatedElement="SignalDefinition">
        <body>The definition of a signal, whose members must all be properties. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="SignalDefinition-signalDefinitionSpecializationReferent"
        name="signalDefinitionSpecializationReferent" namespace="SignalDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SignalDefinition-signalDefinitionSpecializationReferent-_ownedComment.0"
          annotatedElement="SignalDefinition-signalDefinitionSpecializationReferent">
          <body>The specialization referents of a signal definition must all be signals.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="SignalDefinition-signalDefinitionSpecializationReferent-_specification" name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SignalDefinition-matchForStub"
        name="matchForStub" visibility="public" class="SignalDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SignalDefinition-matchForStub-_ownedComment.0"
          annotatedElement="SignalDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this signal definition considered
            as a classifier definition and the subunit is for a signal definition. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="SignalDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SignalDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SignalDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="SignalDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="SignalDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="SignalDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, a signal
            definition allows an annotation for any stereotype whose metaclass is consistent with
            Signal. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SignalDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SignalDefinition-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="SignalDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="SignalDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SignalDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="SignalDefinition-isSameKindAs">
          <body>Return true if the given member is either a SignalDefinition or an imported member
            whose referent is a SignalDefinition or a Reception (where signal reception definitions
            are considered to be kinds of signal definitions). </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="SignalDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="SignalDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="SignalDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="SignalDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TypedElementDefinition" name="TypedElementDefinition"
      isAbstract="true" superClass="Member">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElementDefinition-_ownedComment.0"
        annotatedElement="TypedElementDefinition">
        <body>The common properties of the definitions of typed elements. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="TypedElementDefinition-typedElementDefinitionLowerDerivation"
        name="typedElementDefinitionLowerDerivation" namespace="TypedElementDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-typedElementDefinitionLowerDerivation-_ownedComment.0"
          annotatedElement="TypedElementDefinition-typedElementDefinitionLowerDerivation">
          <body>If the lower bound string image of a typed element definition is not empty, then the
            integer lower bound is the integer value of the lower bound string. Otherwise the lower
            bound is equal to the upper bound, unless the upper bound is unbounded, in which case
            the lower bound is 0. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="TypedElementDefinition-typedElementDefinitionLowerDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="TypedElementDefinition-typedElementDefinitionUpperDerivation"
        name="typedElementDefinitionUpperDerivation" namespace="TypedElementDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-typedElementDefinitionUpperDerivation-_ownedComment.0"
          annotatedElement="TypedElementDefinition-typedElementDefinitionUpperDerivation">
          <body>The unlimited natural upper bound value is the unlimited natural value of the uper
            bound string (with "*" representing the unbounded value). </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="TypedElementDefinition-typedElementDefinitionUpperDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="TypedElementDefinition-typedElementDefinitionTypeDerivation"
        name="typedElementDefinitionTypeDerivation" namespace="TypedElementDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-typedElementDefinitionTypeDerivation-_ownedComment.0"
          annotatedElement="TypedElementDefinition-typedElementDefinitionTypeDerivation">
          <body>The type of a typed element definition is the single classifier referent of the type
            name. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="TypedElementDefinition-typedElementDefinitionTypeDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="TypedElementDefinition-typedElementDefinitionTypeName"
        name="typedElementDefinitionTypeName" namespace="TypedElementDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-typedElementDefinitionTypeName-_ownedComment.0"
          annotatedElement="TypedElementDefinition-typedElementDefinitionTypeName">
          <body>The type name of a typed element definition must have a single classifier referent.
            This referent may not be a template. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="TypedElementDefinition-typedElementDefinitionTypeName-_specification" name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-lowerBound"
        name="lowerBound" visibility="public" lower="0">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-lowerBound-_ownedComment.0"
          annotatedElement="TypedElementDefinition-lowerBound">
          <body>The string image of the literal given to specify the lower bound of the multiplicity
            of the element being defined. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-upperBound"
        name="upperBound" visibility="public" default="&#34;1&#34;">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-upperBound-_ownedComment.0"
          annotatedElement="TypedElementDefinition-upperBound">
          <body>The string image of the literal given to specify the upper bound of the multiplicity
            of the element being defined. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType" href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-String"
        />
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-isOrdered"
        name="isOrdered" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-isOrdered-_ownedComment.0"
          annotatedElement="TypedElementDefinition-isOrdered">
          <body>Whether the element being defined is ordered. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-isNonunique"
        name="isNonunique" visibility="public" default="false">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-isNonunique-_ownedComment.0"
          annotatedElement="TypedElementDefinition-isNonunique">
          <body>Whether the element being defined is non-unique. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-typeName"
        name="typeName" visibility="public" type="QualifiedName" lower="0" isComposite="true"
        association="_packagedElement.268">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="TypedElementDefinition-typeName-_ownedComment.0"
          annotatedElement="TypedElementDefinition-typeName">
          <body>The name of the type of the element being defined. </body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-type" name="type"
        visibility="public" type="ElementReference" lower="0" isDerived="true"
        association="_packagedElement.252"/>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-lower" name="lower"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElementDefinition-lower-_ownedComment.0"
          annotatedElement="TypedElementDefinition-lower">
          <body>The multiplicity lower bound of the element being defined. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElementDefinition-upper" name="upper"
        visibility="public" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElementDefinition-upper-_ownedComment.0"
          annotatedElement="TypedElementDefinition-upper">
          <body>The multiplicity upper bound of the element being defined. </body>
        </ownedComment>
        <type xmi:type="cmof:PrimitiveType"
          href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-UnlimitedNatural"/>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ClassDefinition" name="ClassDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ClassDefinition-_ownedComment.0"
        annotatedElement="ClassDefinition">
        <body>The definition of a class, whose members may be properties, operations, signals or
          signal receptions. </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="ClassDefinition-classDefinitionSpecializationReferent"
        name="classDefinitionSpecializationReferent" namespace="ClassDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassDefinition-classDefinitionSpecializationReferent-_ownedComment.0"
          annotatedElement="ClassDefinition-classDefinitionSpecializationReferent">
          <body>The specialization referents of a class definition must all be classes. A class
            definition may not have any referents that are active classes unless this is an active
            class definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="ClassDefinition-classDefinitionSpecializationReferent-_specification" name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="ClassDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="ClassDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="ClassDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, a class
            definition allows an annotation for any stereotype whose metaclass is consistent with
            Class. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassDefinition-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassDefinition-matchForStub"
        name="matchForStub" visibility="public" class="ClassDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassDefinition-matchForStub-_ownedComment.0"
          annotatedElement="ClassDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this class definition considered
            as a classifier definition and the subunit is for a class definition. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ClassDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ClassDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="ClassDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ClassDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="ClassDefinition-isSameKindAs">
          <body>Return true if the given member is either a ClassDefinition or an imported member
            whose referent is a ClassDefinition or a Class. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ClassDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="ClassDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="ClassDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="ClassDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="EnumerationLiteralName" name="EnumerationLiteralName"
      superClass="Member">
      <ownedComment xmi:type="cmof:Comment" xmi:id="EnumerationLiteralName-_ownedComment.0"
        annotatedElement="EnumerationLiteralName">
        <body>The definition of an enumeration literal, as a member of an enumeration definition.
        </body>
      </ownedComment>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="EnumerationLiteralName-annotationAllowed"
        name="annotationAllowed" visibility="public" class="EnumerationLiteralName"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EnumerationLiteralName-annotationAllowed-_ownedComment.0"
          annotatedElement="EnumerationLiteralName-annotationAllowed">
          <body>Returns false. (Enumeration literal name cannot have annotations.) </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationLiteralName-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationLiteralName-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PackageDefinition" name="PackageDefinition"
      superClass="NamespaceDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PackageDefinition-_ownedComment.0"
        annotatedElement="PackageDefinition">
        <body>The definition of a package, all of whose members must be packageable elements.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PackageDefinition-packageDefinitionAppliedProfileDerivation"
        name="packageDefinitionAppliedProfileDerivation" namespace="PackageDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageDefinition-packageDefinitionAppliedProfileDerivation-_ownedComment.0"
          annotatedElement="PackageDefinition-packageDefinitionAppliedProfileDerivation">
          <body>The applied profiles of a package definition are the profiles listed in any @apply
            annotations on the package. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PackageDefinition-packageDefinitionAppliedProfileDerivation-_specification"
          name=""/>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageDefinition-appliedProfile"
        name="appliedProfile" visibility="public" upper="*" isDerived="true"
        association="_packagedElement.253">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageDefinition-appliedProfile-_ownedComment.0"
          annotatedElement="PackageDefinition-appliedProfile">
          <body>The profiles applied (directly) to this package. </body>
        </ownedComment>
        <type xmi:type="cmof:Class" href="http://www.omg.org/spec/UML/2.4/uml.xmi#Profile"/>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PackageDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="PackageDefinition"
        redefinedOperation="Member-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="PackageDefinition-annotationAllowed">
          <body>In addition to the annotations allowed on any namespace definition, a package
            definition allows @apply annotations plus any stereotype whose metaclass is consistent
            with Package. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PackageDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PackageDefinition-annotationAllowed-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PackageDefinition-matchForStub"
        name="matchForStub" visibility="public" class="PackageDefinition"
        redefinedOperation="Member-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageDefinition-matchForStub-_ownedComment.0"
          annotatedElement="PackageDefinition-matchForStub">
          <body>Returns true of the namespace definition associated with the given unit definition
            is a package definition. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="PackageDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PackageDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="PackageDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="PackageDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="PackageDefinition-isSameKindAs">
          <body>Return true if the given member is either a PackageDefinition or an imported member
            whose referent is a PackageDefinition or a Package. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="PackageDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="PackageDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="PackageDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="PackageDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="EnumerationDefinition" name="EnumerationDefinition"
      superClass="ClassifierDefinition">
      <ownedComment xmi:type="cmof:Comment" xmi:id="EnumerationDefinition-_ownedComment.0"
        annotatedElement="EnumerationDefinition">
        <body>The definition of an enumeration, whose members must all be enumeration literal names.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="EnumerationDefinition-classDefinitionSpecializationReferent"
        name="classDefinitionSpecializationReferent" namespace="EnumerationDefinition">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EnumerationDefinition-classDefinitionSpecializationReferent-_ownedComment.0"
          annotatedElement="EnumerationDefinition-classDefinitionSpecializationReferent">
          <body>The specialization referents of a class definition must all be classes. A class
            definition may not have any referents that are active classes unless this is an active
            class definition. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="EnumerationDefinition-classDefinitionSpecializationReferent-_specification"
          name=""/>
      </ownedRule>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="EnumerationDefinition-matchForStub"
        name="matchForStub" visibility="public" class="EnumerationDefinition"
        redefinedOperation="ClassifierDefinition-matchForStub">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EnumerationDefinition-matchForStub-_ownedComment.0"
          annotatedElement="EnumerationDefinition-matchForStub">
          <body>Returns true if the given unit definition matches this enumeration definition
            considered as a classifier definition and the subunit is for an enumeration definition.
          </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="EnumerationDefinition-matchForStub-unit"
          name="unit" visibility="public" type="UnitDefinition"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationDefinition-matchForStub-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="EnumerationDefinition-annotationAllowed"
        name="annotationAllowed" visibility="public" class="EnumerationDefinition"
        redefinedOperation="NamespaceDefinition-annotationAllowed">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EnumerationDefinition-annotationAllowed-_ownedComment.0"
          annotatedElement="EnumerationDefinition-annotationAllowed">
          <body>In addition to the annotations allowed for classifiers in general, an enumeration
            definition allows an annotation for any stereotype whose metaclass is consistent with
            Enumeration. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationDefinition-annotationAllowed-annotation" name="annotation"
          visibility="public" type="StereotypeAnnotation"/>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationDefinition-annotationAllowed-_ownedParameter.1" name=""
          visibility="public" direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="EnumerationDefinition-isSameKindAs"
        name="isSameKindAs" visibility="public" class="EnumerationDefinition"
        redefinedOperation="Member-isSameKindAs">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="EnumerationDefinition-isSameKindAs-_ownedComment.0"
          annotatedElement="EnumerationDefinition-isSameKindAs">
          <body>Return true if the given member is either an EnumerationDefinition or an imported
            member whose referent is an EnumerationDefinition or an Enumeration. </body>
        </ownedComment>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="EnumerationDefinition-isSameKindAs-member"
          name="member" visibility="public" type="Member">
          <ownedComment xmi:type="cmof:Comment"
            xmi:id="EnumerationDefinition-isSameKindAs-member-_ownedComment.0"
            annotatedElement="EnumerationDefinition-isSameKindAs-member">
            <body>Returns true if the given member is distinguishable from this member. By default,
              this means that the names of the members are different. However, in any case that the
              UML Superstructure considers two names to be distinguishable if they are different, an
              Alf implementation may instead impose the stronger requirement that the names not be
              conflicting. </body>
          </ownedComment>
        </ownedParameter>
        <ownedParameter xmi:type="cmof:Parameter"
          xmi:id="EnumerationDefinition-isSameKindAs-_ownedParameter.1" name="" visibility="public"
          direction="return">
          <type xmi:type="cmof:PrimitiveType"
            href="http://www.omg.org/spec/UML/2.4/Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PackageImportReference" name="PackageImportReference"
      superClass="ImportReference">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImportReference-_ownedComment.0"
        annotatedElement="PackageImportReference">
        <body>An import reference to a package all of whose public members are to be imported.
        </body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint"
        xmi:id="PackageImportReference-packageImportReferenceReferent"
        name="packageImportReferenceReferent" namespace="PackageImportReference">
        <ownedComment xmi:type="cmof:Comment"
          xmi:id="PackageImportReference-packageImportReferenceReferent-_ownedComment.0"
          annotatedElement="PackageImportReference-packageImportReferenceReferent">
          <body>The referent of a package import must be a package. </body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression"
          xmi:id="PackageImportReference-packageImportReferenceReferent-_specification" name=""/>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.251" name=""
      visibility="private" memberEnd="_packagedElement.251-_ownedEnd.0 ReceptionDefinition-signal">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.251-_ownedEnd.0" name=""
        visibility="private" type="ReceptionDefinition" owningAssociation="_packagedElement.251"
        association="_packagedElement.251"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.252" name=""
      visibility="private" memberEnd="TypedElementDefinition-type _packagedElement.252-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.252-_ownedEnd.0" name=""
        visibility="private" type="TypedElementDefinition" owningAssociation="_packagedElement.252"
        association="_packagedElement.252"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.253" name=""
      visibility="private"
      memberEnd="PackageDefinition-appliedProfile _packagedElement.253-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.253-_ownedEnd.0" name=""
        visibility="private" type="PackageDefinition" owningAssociation="_packagedElement.253"
        association="_packagedElement.253"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.254" name=""
      visibility="private"
      memberEnd="_packagedElement.254-_ownedEnd.0 ClassifierDefinition-specializationReferent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.254-_ownedEnd.0" name=""
        visibility="private" type="ClassifierDefinition" owningAssociation="_packagedElement.254"
        association="_packagedElement.254"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.255" name=""
      visibility="private"
      memberEnd="PropertyDefinition-initializer _packagedElement.255-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.255-_ownedEnd.0" name=""
        visibility="public" type="PropertyDefinition" lower="0"
        owningAssociation="_packagedElement.255" association="_packagedElement.255"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.256" name=""
      visibility="private"
      memberEnd="OperationDefinition-redefinition _packagedElement.256-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.256-_ownedEnd.0" name=""
        visibility="public" type="OperationDefinition" lower="0"
        owningAssociation="_packagedElement.256" association="_packagedElement.256"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.257" name=""
      visibility="private"
      memberEnd="_packagedElement.257-_ownedEnd.0 ReceptionDefinition-signalName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.257-_ownedEnd.0" name=""
        visibility="public" type="ReceptionDefinition" lower="0"
        owningAssociation="_packagedElement.257" association="_packagedElement.257"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.258" name=""
      visibility="private" memberEnd="_packagedElement.258-_ownedEnd.0 UnitDefinition-namespace">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.258-_ownedEnd.0" name=""
        visibility="private" type="UnitDefinition" owningAssociation="_packagedElement.258"
        association="_packagedElement.258"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.259" name=""
      visibility="private"
      memberEnd="_packagedElement.259-_ownedEnd.0 ActiveClassDefinition-classifierBehavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.259-_ownedEnd.0" name=""
        visibility="public" type="ActiveClassDefinition" lower="0"
        owningAssociation="_packagedElement.259" association="_packagedElement.259"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.260" name=""
      visibility="private"
      memberEnd="StereotypeAnnotation-stereotype _packagedElement.260-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.260-_ownedEnd.0" name=""
        visibility="private" type="StereotypeAnnotation" owningAssociation="_packagedElement.260"
        association="_packagedElement.260"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.261" name=""
      visibility="private" memberEnd="_packagedElement.261-_ownedEnd.0 ImportedMember-referent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.261-_ownedEnd.0" name=""
        visibility="private" type="ImportedMember" owningAssociation="_packagedElement.261"
        association="_packagedElement.261"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.262" name=""
      visibility="private" memberEnd="_packagedElement.262-_ownedEnd.0 NamespaceDefinition-member">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.262-_ownedEnd.0" name=""
        visibility="private" type="NamespaceDefinition" owningAssociation="_packagedElement.262"
        association="_packagedElement.262"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.263" name=""
      visibility="private" memberEnd="_packagedElement.263-_ownedEnd.0 OperationDefinition-body">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.263-_ownedEnd.0" name=""
        visibility="private" type="OperationDefinition" lower="0"
        owningAssociation="_packagedElement.263" association="_packagedElement.263"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.264" name=""
      visibility="private" memberEnd="_packagedElement.264-_ownedEnd.0 TaggedValueList-taggedValue">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.264-_ownedEnd.0" name=""
        visibility="public" type="TaggedValueList" owningAssociation="_packagedElement.264"
        association="_packagedElement.264"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.265" name=""
      visibility="private" memberEnd="UnitDefinition-definition NamespaceDefinition-unit"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.266" name=""
      visibility="private" memberEnd="_packagedElement.266-_ownedEnd.0 ImportReference-referent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.266-_ownedEnd.0" name=""
        visibility="public" type="ImportReference" owningAssociation="_packagedElement.266"
        association="_packagedElement.266"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.267" name=""
      visibility="private" memberEnd="Member-namespace NamespaceDefinition-ownedMember"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.268" name=""
      visibility="private"
      memberEnd="TypedElementDefinition-typeName _packagedElement.268-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.268-_ownedEnd.0" name=""
        visibility="private" type="TypedElementDefinition" lower="0"
        owningAssociation="_packagedElement.268" association="_packagedElement.268"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.269" name=""
      visibility="private" memberEnd="ImportReference-unit UnitDefinition-_20import"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.270" name=""
      visibility="private"
      memberEnd="_packagedElement.270-_ownedEnd.0 OperationDefinition-redefinedOperations">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.270-_ownedEnd.0" name=""
        visibility="private" type="OperationDefinition" owningAssociation="_packagedElement.270"
        association="_packagedElement.270"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.271" name=""
      visibility="private"
      memberEnd="_packagedElement.271-_ownedEnd.0 StereotypeAnnotation-taggedValues">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.271-_ownedEnd.0" name=""
        visibility="public" type="StereotypeAnnotation" lower="0"
        owningAssociation="_packagedElement.271" association="_packagedElement.271"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.272" name=""
      visibility="private" memberEnd="_packagedElement.272-_ownedEnd.0 ImportReference-referentName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.272-_ownedEnd.0" name=""
        visibility="public" type="ImportReference" lower="0"
        owningAssociation="_packagedElement.272" association="_packagedElement.272"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.273" name=""
      visibility="private"
      memberEnd="_packagedElement.273-_ownedEnd.0 UnitDefinition-appliedProfile">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.273-_ownedEnd.0" name=""
        visibility="private" type="UnitDefinition" owningAssociation="_packagedElement.273"
        association="_packagedElement.273"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.274" name=""
      visibility="private" memberEnd="_packagedElement.274-_ownedEnd.0 Member-subunit">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.274-_ownedEnd.0" name=""
        visibility="private" type="Member" owningAssociation="_packagedElement.274"
        association="_packagedElement.274"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.275" name=""
      visibility="private" memberEnd="_packagedElement.275-_ownedEnd.0 UnitDefinition-namespaceName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.275-_ownedEnd.0" name=""
        visibility="public" type="UnitDefinition" lower="0" owningAssociation="_packagedElement.275"
        association="_packagedElement.275"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.276" name=""
      visibility="private"
      memberEnd="_packagedElement.276-_ownedEnd.0 StereotypeAnnotation-stereotypeName">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.276-_ownedEnd.0" name=""
        visibility="public" type="StereotypeAnnotation" lower="0"
        owningAssociation="_packagedElement.276" association="_packagedElement.276"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.277" name=""
      visibility="private"
      memberEnd="ClassifierDefinition-specialization _packagedElement.277-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.277-_ownedEnd.0" name=""
        visibility="public" type="ClassifierDefinition" lower="0"
        owningAssociation="_packagedElement.277" association="_packagedElement.277"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.278" name=""
      visibility="private" memberEnd="StereotypeAnnotation-names _packagedElement.278-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.278-_ownedEnd.0" name=""
        visibility="public" type="StereotypeAnnotation" lower="0"
        owningAssociation="_packagedElement.278" association="_packagedElement.278"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.279" name=""
      visibility="private" memberEnd="Member-annotation _packagedElement.279-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.279-_ownedEnd.0" name=""
        visibility="public" type="Member" lower="0" owningAssociation="_packagedElement.279"
        association="_packagedElement.279"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.280" name=""
      visibility="private" memberEnd="_packagedElement.280-_ownedEnd.0 ActivityDefinition-body">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.280-_ownedEnd.0" name=""
        visibility="public" type="ActivityDefinition" lower="0"
        owningAssociation="_packagedElement.280" association="_packagedElement.280"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="_packagedElement.281" name=""
      visibility="private"
      memberEnd="SequenceConstructionExpression-typeName _packagedElement.281-_ownedEnd.0">
      <ownedEnd xmi:type="cmof:Property" xmi:id="_packagedElement.281-_ownedEnd.0" name=""
        visibility="public" type="SequenceConstructionExpression" lower="0"
        owningAssociation="_packagedElement.281" association="_packagedElement.281"/>
    </ownedMember>
  </cmof:Package>
  <cmof:Tag xmi:id="_3" name="org.omg.xmi.nsPrefix" value="alf" element="_0"/>
  <cmof:Tag xmi:id="_4" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/Alf/20100801"
    element="_0"/>
</xmi:XMI>
