/* Generated By:JavaCC: Do not edit this line. AlfParserTokenManager.java */
package org.modeldriven.alf.parser;
import org.modeldriven.alf.syntax.common.*;
import org.modeldriven.alf.syntax.expressions.*;
import org.modeldriven.alf.syntax.statements.*;
import org.modeldriven.alf.syntax.units.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/** Token Manager. */
public class AlfParserTokenManager implements AlfParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x18c0L) != 0L || (active2 & 0x801L) != 0L)
            return 2;
         if ((active0 & 0xffffcfffff800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            return 19;
         }
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 86;
            return 6;
         }
         if ((active0 & 0x300000000000L) != 0L)
         {
            jjmatchedKind = 86;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0x1080L) != 0L)
            return 0;
         if ((active0 & 0xf9f17dff9f800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 19;
         }
         if ((active0 & 0x60e820060000000L) != 0L || (active1 & 0x400L) != 0L)
            return 19;
         return -1;
      case 2:
         if ((active0 & 0xf5ad6dffcf800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 19;
         }
         if ((active0 & 0x850100010000000L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0xf4ad41fecf800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x1002c0100000000L) != 0L || (active1 & 0x200L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0xf4a941f80f800000L) != 0L || (active1 & 0x1bfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 4;
            }
            return 19;
         }
         if ((active0 & 0x40006c0000000L) != 0L || (active1 & 0x840L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x74a841fc0c800000L) != 0L || (active1 & 0x33L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 19;
         }
         if ((active0 & 0x8001000003000000L) != 0L || (active1 & 0x18cL) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x40a8016c0c800000L) != 0L || (active1 & 0x32L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x3400409000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x40a8012808000000L) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x4404800000L) != 0L || (active1 & 0x10L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x8012808000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 19;
         }
         if ((active0 & 0x40a0000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 19;
         return -1;
      case 9:
         if ((active0 & 0x10008000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0x8002800000000L) != 0L)
            return 19;
         return -1;
      case 10:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 116);
      case 37:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x1000L);
      case 40:
         return jjStopAtPos(0, 95);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 43:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x100L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000080000000000L, 0x200L);
      case 46:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 47:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x18c0L, 0x0L, 0x800L);
      case 58:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 101);
      case 60:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x10020L);
      case 61:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x600c0L);
      case 63:
         return jjStopAtPos(0, 114);
      case 64:
         return jjStopAtPos(0, 115);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 94:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7f800000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f00000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3c000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf000000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfL, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 123:
         return jjStopAtPos(0, 97);
      case 124:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x2000L);
      case 125:
         return jjStopAtPos(0, 98);
      case 126:
         return jjStopAtPos(0, 113);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 42:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 45:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 46:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 47:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 60:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x60080L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020404100000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x50018000000000L, active1, 0x1fL, active2, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 19);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa00L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40e08000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc080010000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 19);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 74, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x80101000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6400202080000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8900000000000000L, active1, 0x40L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 124:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(2, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 64:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000001000000L, active1, 0x1L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x6L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2880000000L, active1, 0x20L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0xb00L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000008000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004200000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x40L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 19);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8450140800000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 19);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x4006000000L, active1, 0x8L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 19);
         break;
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xe880000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 19);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x420000001000000L, active1, 0x43L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x800L, active2, 0L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 19);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000040000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4008410000800000L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000000L, active1, 0x1cL, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3008000000000000L, active1, 0x80L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x104L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x21L);
      case 107:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x401010800800000L, active1, 0x8L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x20L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 19);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x400002000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000404000000L, active1, 0x2L);
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 19);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000800000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 19);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 19);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 19);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 19);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 19);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 19);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000c000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 19);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0x4008000000000000L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 19);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 19);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 19);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 19);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000800000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 19);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 19);
         break;
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L, active1, 0L);
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 40, 19);
         break;
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 69, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  else if (curChar == 48)
                     jjAddStates(0, 3);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(21, 22);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  break;
               case 6:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(19);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(19);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 24:
                  if (curChar == 39 && kind > 91)
                     kind = 91;
                  break;
               case 25:
                  if (curChar != 48)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if (curChar == 48)
                     jjAddStates(0, 3);
                  break;
               case 30:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjAddStates(7, 8);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjAddStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 101 && kind > 76)
                     kind = 76;
                  break;
               case 5:
                  if (curChar == 117)
                     jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 115)
                     jjCheckNAdd(4);
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x404410000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 26:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 98)
                     jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 95)
                     jjCheckNAdd(30);
                  break;
               case 32:
                  if (curChar == 66)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if (curChar == 120)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(35, 34);
                  break;
               case 35:
                  if (curChar == 95)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if (curChar == 88)
                     jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x801L) != 0L)
            return 0;
         if ((active0 & 0x300000000000L) != 0L)
         {
            jjmatchedKind = 86;
            return 11;
         }
         if ((active0 & 0xffffcfffff800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            return 20;
         }
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 86;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xf9f17dff9f800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x60e820060000000L) != 0L || (active1 & 0x400L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0xf5ad6dffcf800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0x850100010000000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0xf4ad41fecf800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x1002c0100000000L) != 0L || (active1 & 0x200L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0xf4a941f80f800000L) != 0L || (active1 & 0x1bfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 4;
            }
            return 20;
         }
         if ((active0 & 0x40006c0000000L) != 0L || (active1 & 0x840L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x74a841fc0c800000L) != 0L || (active1 & 0x33L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x8001000003000000L) != 0L || (active1 & 0x18cL) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x40a8016c0c800000L) != 0L || (active1 & 0x32L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x3400409000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x40a8012808000000L) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x4404800000L) != 0L || (active1 & 0x10L) != 0L)
            return 20;
         return -1;
      case 8:
         if ((active0 & 0x8012808000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0x40a0000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 20;
         return -1;
      case 9:
         if ((active0 & 0x10008000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 20;
         }
         if ((active0 & 0x8002800000000L) != 0L)
            return 20;
         return -1;
      case 10:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
            return 20;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100000000000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 116);
      case 37:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400000000000000L, 0x1000L);
      case 40:
         return jjStopAtPos(0, 95);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400L);
      case 43:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000000000000L, 0x100L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000080000000000L, 0x200L);
      case 46:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10000000000L, 0x0L);
      case 47:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x800L);
      case 58:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 101);
      case 60:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000000000000L, 0x10020L);
      case 61:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80000000000000L, 0x600c0L);
      case 63:
         return jjStopAtPos(0, 114);
      case 64:
         return jjStopAtPos(0, 115);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 94:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x7f800000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x80000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x3f00000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x3c000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0xc0000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x300000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_2(0x400000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0xf800000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x10000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x1e0000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0xe00000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0xf000000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xfL, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1f0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x600L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800L, 0x0L);
      case 123:
         return jjStopAtPos(0, 97);
      case 124:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000000000L, 0x2000L);
      case 125:
         return jjStopAtPos(0, 98);
      case 126:
         return jjStopAtPos(0, 113);
      default :
         return jjMoveNfa_2(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 43:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 45:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 46:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 58:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 60:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x10000L);
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x60080L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x1020404100000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0x7000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x50018000000000L, active1, 0x1fL, active2, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 47, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0xa00L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x40e08000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0xc080010000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 41, 20);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(1, 74, 20);
         return jjMoveStringLiteralDfa2_2(active0, 0x80101000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x6400202080000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x8900000000000000L, active1, 0x40L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x100L, active2, 0L);
      case 124:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(2, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000001000000L, active1, 0x1L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000000000L, active1, 0x6L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x2880000000L, active1, 0x20L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x80L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000000L, active1, 0xb00L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000008000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0x20001000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x4004200000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000000L, active1, 0x40L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x10L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 44, 20);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x8450140800000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 52, 20);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 59, 20);
         return jjMoveStringLiteralDfa3_2(active0, 0x4006000000L, active1, 0x8L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 54, 20);
         break;
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(2, 28, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0xe880000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x20L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 32, 20);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 42, 20);
         return jjMoveStringLiteralDfa4_2(active0, 0x420000001000000L, active1, 0x43L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x6000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 56, 20);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000000L, active1, 0x800L, active2, 0L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 43, 20);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 45, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x80L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000040000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(3, 73, 20);
         return jjMoveStringLiteralDfa4_2(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x4008410000800000L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x84000000000000L, active1, 0x1cL, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x3008000000000000L, active1, 0x80L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(4, 30, 20);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x104L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(4, 75, 20);
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000000000L, active1, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000000000L, active1, 0x21L);
      case 107:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(4, 31, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000L, active1, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(4, 70, 20);
         return jjMoveStringLiteralDfa5_2(active0, 0x401010800800000L, active1, 0x8L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x20000400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 50, 20);
         return jjMoveStringLiteralDfa5_2(active0, 0x6000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x6000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000L, active1, 0x20L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 63, 20);
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(5, 25, 20);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(5, 66, 20);
         return jjMoveStringLiteralDfa6_2(active0, 0x400002000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(5, 72, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x80000404000000L, active1, 0x2L);
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(5, 71, 20);
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(5, 67, 20);
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_2(active0, 0x20400000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_2(active0, 0x1008000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(5, 24, 20);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 48, 20);
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x8000000800000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 58, 20);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 36, 20);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 46, 20);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 60, 20);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 61, 20);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(6, 64, 20);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_2(active0, 0x4000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa7_2(active0, 0x80000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_2(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 39, 20);
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000c000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_2(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_2(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 38, 20);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(7, 68, 20);
         return jjMoveStringLiteralDfa8_2(active0, 0x4008000000000000L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000000000L, active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa8_2(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(7, 23, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_2(active0, 0x80000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(7, 26, 20);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(7, 34, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 62, 20);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 53, 20);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 55, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_2(active0, 0x2008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x8000800000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(8, 65, 20);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(9, 35, 20);
         return jjMoveStringLiteralDfa10_2(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x20L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 51, 20);
         break;
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 37, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_2(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active0, 0x8000000L, active1, 0L);
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(10, 40, 20);
         break;
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(10, 69, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(11, 27, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                     jjAddStates(13, 16);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 13)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 48)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(27, 28);
                  }
                  break;
               case 7:
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar != 13)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(2);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 25:
                  if (curChar == 39 && kind > 91)
                     kind = 91;
                  break;
               case 26:
                  if (curChar != 48)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (curChar == 48)
                     jjAddStates(13, 16);
                  break;
               case 31:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjAddStates(23, 24);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  jjAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 101 && kind > 76)
                     kind = 76;
                  break;
               case 6:
                  if (curChar == 117)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x404410000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 27:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 98)
                     jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 95)
                     jjCheckNAdd(31);
                  break;
               case 33:
                  if (curChar == 66)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(36, 35);
                  break;
               case 36:
                  if (curChar == 95)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 88)
                     jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 19);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x801L) != 0L)
            return 0;
         if ((active0 & 0x300000000000L) != 0L)
         {
            jjmatchedKind = 86;
            return 11;
         }
         if ((active0 & 0xffffcfffff800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            return 20;
         }
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 86;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xf9f17dff9f800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x60e820060000000L) != 0L || (active1 & 0x400L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0xf5ad6dffcf800000L) != 0L || (active1 & 0xbffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0x850100010000000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0xf4ad41fecf800000L) != 0L || (active1 & 0x9ffL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x1002c0100000000L) != 0L || (active1 & 0x200L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0xf4a941f80f800000L) != 0L || (active1 & 0x1bfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 4;
            }
            return 20;
         }
         if ((active0 & 0x40006c0000000L) != 0L || (active1 & 0x840L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x74a841fc0c800000L) != 0L || (active1 & 0x33L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x8001000003000000L) != 0L || (active1 & 0x18cL) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x40a8016c0c800000L) != 0L || (active1 & 0x32L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x3400409000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x40a8012808000000L) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x4404800000L) != 0L || (active1 & 0x10L) != 0L)
            return 20;
         return -1;
      case 8:
         if ((active0 & 0x8012808000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0x40a0000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 20;
         return -1;
      case 9:
         if ((active0 & 0x10008000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 20;
         }
         if ((active0 & 0x8002800000000L) != 0L)
            return 20;
         return -1;
      case 10:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
            return 20;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 116);
      case 37:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400000000000000L, 0x1000L);
      case 40:
         return jjStopAtPos(0, 95);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400L);
      case 43:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000000000000L, 0x100L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000080000000000L, 0x200L);
      case 46:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000L, 0x0L);
      case 47:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x800L);
      case 58:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 101);
      case 60:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000000L, 0x10020L);
      case 61:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000000000L, 0x600c0L);
      case 63:
         return jjStopAtPos(0, 114);
      case 64:
         return jjStopAtPos(0, 115);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 94:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x7f800000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x80000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x3f00000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x3c000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0xc0000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x300000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0xf800000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x10000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x1e0000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0xe00000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0xf000000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xfL, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1f0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x600L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800L, 0x0L);
      case 123:
         return jjStopAtPos(0, 97);
      case 124:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000000000000L, 0x2000L);
      case 125:
         return jjStopAtPos(0, 98);
      case 126:
         return jjStopAtPos(0, 113);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 43:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 45:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 46:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 58:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 60:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x10000L);
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x60080L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x1020404100000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x7000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x50018000000000L, active1, 0x1fL, active2, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 47, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0xa00L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x40e08000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0xc080010000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 41, 20);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(1, 74, 20);
         return jjMoveStringLiteralDfa2_1(active0, 0x80101000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x6400202080000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x8900000000000000L, active1, 0x40L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100L, active2, 0L);
      case 124:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(2, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000001000000L, active1, 0x1L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000000L, active1, 0x6L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x2880000000L, active1, 0x20L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0xb00L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000008000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x20001000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x4004200000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000000L, active1, 0x40L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x10L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 44, 20);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x8450140800000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 52, 20);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 59, 20);
         return jjMoveStringLiteralDfa3_1(active0, 0x4006000000L, active1, 0x8L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 54, 20);
         break;
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(2, 28, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0xe880000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x20L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 20);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 42, 20);
         return jjMoveStringLiteralDfa4_1(active0, 0x420000001000000L, active1, 0x43L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x6000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 56, 20);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0x800L, active2, 0L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 20);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 45, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000040000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(3, 73, 20);
         return jjMoveStringLiteralDfa4_1(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x4008410000800000L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x84000000000000L, active1, 0x1cL, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x3008000000000000L, active1, 0x80L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(4, 30, 20);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x104L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(4, 75, 20);
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000000L, active1, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000000L, active1, 0x21L);
      case 107:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(4, 31, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000L, active1, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(4, 70, 20);
         return jjMoveStringLiteralDfa5_1(active0, 0x401010800800000L, active1, 0x8L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x20000400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 50, 20);
         return jjMoveStringLiteralDfa5_1(active0, 0x6000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x6000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000L, active1, 0x20L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 63, 20);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(5, 25, 20);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(5, 66, 20);
         return jjMoveStringLiteralDfa6_1(active0, 0x400002000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(5, 72, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x80000404000000L, active1, 0x2L);
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(5, 71, 20);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(5, 67, 20);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0x20400000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x1008000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(5, 24, 20);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 48, 20);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000800000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 58, 20);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 20);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 46, 20);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 60, 20);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 61, 20);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(6, 64, 20);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa7_1(active0, 0x80000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 39, 20);
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000c000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 38, 20);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(7, 68, 20);
         return jjMoveStringLiteralDfa8_1(active0, 0x4008000000000000L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L, active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(7, 23, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0x80000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(7, 26, 20);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(7, 34, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 62, 20);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 53, 20);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 55, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x2008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x8000800000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(8, 65, 20);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(9, 35, 20);
         return jjMoveStringLiteralDfa10_1(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x20L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 51, 20);
         break;
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 37, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x8000000L, active1, 0L);
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 40, 20);
         break;
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(10, 69, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(11, 27, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                     jjAddStates(13, 16);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 13)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 48)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddTwoStates(27, 28);
                  }
                  break;
               case 7:
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar != 13)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(2);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 25:
                  if (curChar == 39 && kind > 91)
                     kind = 91;
                  break;
               case 26:
                  if (curChar != 48)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (curChar == 48)
                     jjAddStates(13, 16);
                  break;
               case 31:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjAddStates(23, 24);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  jjAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 101 && kind > 76)
                     kind = 76;
                  break;
               case 6:
                  if (curChar == 117)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x404410000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 27:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 98)
                     jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 95)
                     jjCheckNAdd(31);
                  break;
               case 33:
                  if (curChar == 66)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(36, 35);
                  break;
               case 36:
                  if (curChar == 95)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 88)
                     jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 19);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 47:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 42:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 47:
         return jjStopAtPos(0, 18);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(1, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 13)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjstateSet[jjnewStateCnt++] = 0;
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 0:
                  if (curChar == 10)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 32, 33, 36, 21, 22, 24, 31, 30, 35, 34, 16, 17, 30, 33, 34, 
   37, 1, 2, 3, 22, 23, 25, 32, 31, 36, 35, 17, 18, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\57\57\100", "\57\52\100", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\143\143\145\160\164", "\141\143\164\151\166\145", 
"\141\143\164\151\166\151\164\171", "\141\154\154\111\156\163\164\141\156\143\145\163", "\141\156\171", 
"\141\163", "\141\163\163\157\143", "\142\162\145\141\153", "\143\141\163\145", 
"\143\154\141\163\163", "\143\154\141\163\163\151\146\171", 
"\143\154\145\141\162\101\163\163\157\143", "\143\157\155\160\157\163\145", "\143\162\145\141\164\145\114\151\156\153", 
"\144\141\164\141\164\171\160\145", "\144\145\146\141\165\154\164", 
"\144\145\163\164\162\157\171\114\151\156\153", "\144\157", "\145\154\163\145", "\145\156\165\155", "\146\157\162", 
"\146\162\157\155", "\150\141\163\164\171\160\145", "\151\146", "\151\155\160\157\162\164", 
"\151\156", "\151\156\157\165\164", "\151\156\163\164\141\156\143\145\157\146", 
"\154\145\164", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\156\157\156\165\156\151\161\165\145", "\156\165\154\154", "\157\162", "\157\162\144\145\162\145\144", 
"\157\165\164", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\143\145\151\166\145", 
"\162\145\144\145\146\151\156\145\163", "\162\145\144\165\143\145", "\162\145\164\165\162\156", 
"\163\145\161\165\145\156\143\145", "\163\160\145\143\151\141\154\151\172\145\163", "\163\165\160\145\162", 
"\163\151\147\156\141\154", "\163\167\151\164\143\150", "\164\150\151\163", "\164\157", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\56\56", "\72", "\72\72", "\55\76", "\75\76", "\75", "\76", 
"\74", "\41", "\176", "\77", "\100", "\44", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_STATEMENT_ANNOTATION",
   "IN_IN_LINE_ANNOTATION",
   "IN_END_OF_LINE_COMMENT",
   "IN_IN_LINE_COMMENT",
   "IN_IN_LINE_COMMENT_STAR",
   "IN_DOCUMENTATION_COMMENT",
   "IN_DOCUMENTATION_COMMENT_STAR",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 0, 6, 6, 3, 4, 0, -1, -1, 5, 4, 0, -1, 7, 0, 6, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffa001c1L, 0xffffffff885abfffL, 0x7ffffL, 
};
static final long[] jjtoSkip = {
   0x4263eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x5bd800L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[38];
private final int[] jjstateSet = new int[76];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public AlfParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AlfParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 8 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   String t = matchedToken.image; matchedToken.image = t.substring(0, t.length()-2);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
