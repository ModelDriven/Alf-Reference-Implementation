/* Generated By:JavaCC: Do not edit this line. AlfParserConstants.java */
package org.modeldriven.alf.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AlfParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SLASH_SLASH_AT = 6;
  /** RegularExpression Id. */
  int SLASH_STAR_AT = 7;
  /** RegularExpression Id. */
  int EOL = 8;
  /** RegularExpression Id. */
  int END_OF_LINE_COMMENT = 13;
  /** RegularExpression Id. */
  int IN_LINE_COMMENT = 18;
  /** RegularExpression Id. */
  int DOCUMENTATION_COMMENT = 21;
  /** RegularExpression Id. */
  int ABSTRACT = 23;
  /** RegularExpression Id. */
  int ACCEPT = 24;
  /** RegularExpression Id. */
  int ACTIVE = 25;
  /** RegularExpression Id. */
  int ACTIVITY = 26;
  /** RegularExpression Id. */
  int ALL_INSTANCES = 27;
  /** RegularExpression Id. */
  int ANY = 28;
  /** RegularExpression Id. */
  int AS = 29;
  /** RegularExpression Id. */
  int ASSOC = 30;
  /** RegularExpression Id. */
  int BREAK = 31;
  /** RegularExpression Id. */
  int CASE = 32;
  /** RegularExpression Id. */
  int CLASS = 33;
  /** RegularExpression Id. */
  int CLASSIFY = 34;
  /** RegularExpression Id. */
  int CLEAR_ASSOC = 35;
  /** RegularExpression Id. */
  int COMPOSE = 36;
  /** RegularExpression Id. */
  int CREATE_LINK = 37;
  /** RegularExpression Id. */
  int DATATYPE = 38;
  /** RegularExpression Id. */
  int DEFAULT_ = 39;
  /** RegularExpression Id. */
  int DESTROY_LINK = 40;
  /** RegularExpression Id. */
  int DO = 41;
  /** RegularExpression Id. */
  int ELSE = 42;
  /** RegularExpression Id. */
  int ENUM = 43;
  /** RegularExpression Id. */
  int FOR = 44;
  /** RegularExpression Id. */
  int FROM = 45;
  /** RegularExpression Id. */
  int HASTYPE = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int IMPORT = 48;
  /** RegularExpression Id. */
  int IN = 49;
  /** RegularExpression Id. */
  int INOUT = 50;
  /** RegularExpression Id. */
  int INSTANCEOF = 51;
  /** RegularExpression Id. */
  int LET = 52;
  /** RegularExpression Id. */
  int NAMESPACE = 53;
  /** RegularExpression Id. */
  int NEW = 54;
  /** RegularExpression Id. */
  int NONUNIQUE = 55;
  /** RegularExpression Id. */
  int NULL = 56;
  /** RegularExpression Id. */
  int OR = 57;
  /** RegularExpression Id. */
  int ORDERED = 58;
  /** RegularExpression Id. */
  int OUT = 59;
  /** RegularExpression Id. */
  int PACKAGE = 60;
  /** RegularExpression Id. */
  int PRIVATE = 61;
  /** RegularExpression Id. */
  int PROTECTED = 62;
  /** RegularExpression Id. */
  int PUBLIC = 63;
  /** RegularExpression Id. */
  int RECEIVE = 64;
  /** RegularExpression Id. */
  int REDEFINES = 65;
  /** RegularExpression Id. */
  int REDUCE = 66;
  /** RegularExpression Id. */
  int RETURN = 67;
  /** RegularExpression Id. */
  int SEQUENCE = 68;
  /** RegularExpression Id. */
  int SPECIALIZES = 69;
  /** RegularExpression Id. */
  int SUPER = 70;
  /** RegularExpression Id. */
  int SIGNAL = 71;
  /** RegularExpression Id. */
  int SWITCH = 72;
  /** RegularExpression Id. */
  int THIS = 73;
  /** RegularExpression Id. */
  int TO = 74;
  /** RegularExpression Id. */
  int WHILE = 75;
  /** RegularExpression Id. */
  int IDENTIFIER = 76;
  /** RegularExpression Id. */
  int IDENTIFIER_LETTER_OR_DIGIT = 77;
  /** RegularExpression Id. */
  int IDENTIFIER_LETTER = 78;
  /** RegularExpression Id. */
  int DIGIT = 79;
  /** RegularExpression Id. */
  int UNRESTRICTED_NAME = 80;
  /** RegularExpression Id. */
  int NAME_CHARACTER = 81;
  /** RegularExpression Id. */
  int ESCAPE_CHARACTER = 82;
  /** RegularExpression Id. */
  int ESCAPED_CHARACTER = 83;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 84;
  /** RegularExpression Id. */
  int NATURAL_LITERAL = 85;
  /** RegularExpression Id. */
  int STRING_LITERAL = 86;
  /** RegularExpression Id. */
  int STRING_CHARACTER = 87;
  /** RegularExpression Id. */
  int LPAREN = 88;
  /** RegularExpression Id. */
  int RPAREN = 89;
  /** RegularExpression Id. */
  int LBRACE = 90;
  /** RegularExpression Id. */
  int RBRACE = 91;
  /** RegularExpression Id. */
  int LBRACKET = 92;
  /** RegularExpression Id. */
  int RBRACKET = 93;
  /** RegularExpression Id. */
  int SEMICOLON = 94;
  /** RegularExpression Id. */
  int COMMA = 95;
  /** RegularExpression Id. */
  int DOT = 96;
  /** RegularExpression Id. */
  int DOUBLE_DOT = 97;
  /** RegularExpression Id. */
  int COLON = 98;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 99;
  /** RegularExpression Id. */
  int ARROW = 100;
  /** RegularExpression Id. */
  int THICK_ARROW = 101;
  /** RegularExpression Id. */
  int ASSIGN = 102;
  /** RegularExpression Id. */
  int GT = 103;
  /** RegularExpression Id. */
  int LT = 104;
  /** RegularExpression Id. */
  int BANG = 105;
  /** RegularExpression Id. */
  int HOOK = 106;
  /** RegularExpression Id. */
  int AT = 107;
  /** RegularExpression Id. */
  int DOLLAR = 108;
  /** RegularExpression Id. */
  int EQ = 109;
  /** RegularExpression Id. */
  int LE = 110;
  /** RegularExpression Id. */
  int GE = 111;
  /** RegularExpression Id. */
  int NE = 112;
  /** RegularExpression Id. */
  int SC_OR = 113;
  /** RegularExpression Id. */
  int SC_AND = 114;
  /** RegularExpression Id. */
  int INCR = 115;
  /** RegularExpression Id. */
  int DECR = 116;
  /** RegularExpression Id. */
  int PLUS = 117;
  /** RegularExpression Id. */
  int MINUS = 118;
  /** RegularExpression Id. */
  int STAR = 119;
  /** RegularExpression Id. */
  int SLASH = 120;
  /** RegularExpression Id. */
  int LOGICAL_AND = 121;
  /** RegularExpression Id. */
  int LOGICAL_OR = 122;
  /** RegularExpression Id. */
  int XOR = 123;
  /** RegularExpression Id. */
  int REM = 124;
  /** RegularExpression Id. */
  int LSHIFT = 125;
  /** RegularExpression Id. */
  int PLUSASSIGN = 126;
  /** RegularExpression Id. */
  int MINUSASSIGN = 127;
  /** RegularExpression Id. */
  int STARASSIGN = 128;
  /** RegularExpression Id. */
  int SLASHASSIGN = 129;
  /** RegularExpression Id. */
  int ANDASSIGN = 130;
  /** RegularExpression Id. */
  int ORASSIGN = 131;
  /** RegularExpression Id. */
  int XORASSIGN = 132;
  /** RegularExpression Id. */
  int REMASSIGN = 133;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_STATEMENT_ANNOTATION = 1;
  /** Lexical state. */
  int IN_IN_LINE_ANNOTATION = 2;
  /** Lexical state. */
  int IN_END_OF_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_IN_LINE_COMMENT = 4;
  /** Lexical state. */
  int IN_IN_LINE_COMMENT_STAR = 5;
  /** Lexical state. */
  int IN_DOCUMENTATION_COMMENT = 6;
  /** Lexical state. */
  int IN_DOCUMENTATION_COMMENT_STAR = 7;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\f\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"//@\"",
    "\"/*@\"",
    "<EOL>",
    "<token of kind 9>",
    "<token of kind 10>",
    "\"//\"",
    "\"/*\"",
    "<END_OF_LINE_COMMENT>",
    "<token of kind 14>",
    "<token of kind 15>",
    "\"*\"",
    "<token of kind 17>",
    "\"/\"",
    "<token of kind 19>",
    "\"*\"",
    "\"/\"",
    "<token of kind 22>",
    "\"abstract\"",
    "\"accept\"",
    "\"active\"",
    "\"activity\"",
    "\"allInstances\"",
    "\"any\"",
    "\"as\"",
    "\"assoc\"",
    "\"break\"",
    "\"case\"",
    "\"class\"",
    "\"classify\"",
    "\"clearAssoc\"",
    "\"compose\"",
    "\"createLink\"",
    "\"datatype\"",
    "\"default\"",
    "\"destroyLink\"",
    "\"do\"",
    "\"else\"",
    "\"enum\"",
    "\"for\"",
    "\"from\"",
    "\"hastype\"",
    "\"if\"",
    "\"import\"",
    "\"in\"",
    "\"inout\"",
    "\"instanceof\"",
    "\"let\"",
    "\"namespace\"",
    "\"new\"",
    "\"nonunique\"",
    "\"null\"",
    "\"or\"",
    "\"ordered\"",
    "\"out\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"receive\"",
    "\"redefines\"",
    "\"reduce\"",
    "\"return\"",
    "\"sequence\"",
    "\"specializes\"",
    "\"super\"",
    "\"signal\"",
    "\"switch\"",
    "\"this\"",
    "\"to\"",
    "\"while\"",
    "<IDENTIFIER>",
    "<IDENTIFIER_LETTER_OR_DIGIT>",
    "<IDENTIFIER_LETTER>",
    "<DIGIT>",
    "<UNRESTRICTED_NAME>",
    "<NAME_CHARACTER>",
    "<ESCAPE_CHARACTER>",
    "<ESCAPED_CHARACTER>",
    "<BOOLEAN_LITERAL>",
    "<NATURAL_LITERAL>",
    "<STRING_LITERAL>",
    "<STRING_CHARACTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"..\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=>\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"?\"",
    "\"@\"",
    "\"$\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
  };

}
