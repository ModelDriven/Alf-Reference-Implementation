/* Generated By:JavaCC: Do not edit this line. AlfParser.java */
package alf.parser;

import alf.syntax.behavioral.*;
import alf.syntax.expressions.*;
import alf.syntax.namespaces.*;
import alf.syntax.structural.*;

import java.util.ArrayList;

public class AlfParser implements AlfParserConstants {

  public static void main(String args[]) {
    AlfParser parser;
    System.out.println("Alf 0.05 Parser");
    if (args.length == 0) {
      System.out.println("Reading from standard input...");
      parser = new AlfParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + "...");
      try {
        parser = new AlfParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Usage is one of:");
      System.out.println("         java AlfParser < inputfile");
      System.out.println("OR");
      System.out.println("         java AlfParser inputfile");
      return;
    }
    try {
      UnitDefinition tree = parser.UnitDefinition();
      System.out.println("Parsed successfully.");
      // tree.print();
      ArrayList<Member> members = tree.getAllMembers();
      System.out.println(tree.toString());
      for (Member member: members) {
        if (member.isError()) {
          member.printChild("");
        } else {
          System.out.println(member.toString(" "));
        }
      }
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Encountered errors during parse.");
    }
  }

/************************
 * NAMES AND NAMESPACES *
 ************************/

/* QUALIFIED NAMES */
  static final public String Name() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case UNRESTRICTED_NAME:
      t = jj_consume_token(UNRESTRICTED_NAME);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedName QualifiedName() throws ParseException {
  String n;
  QualifiedName q = new QualifiedName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
                     q.setIsAbsolute();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n = Name();
               q.addName(n);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(DOUBLE_COLON);
      n = Name();
                                                                          q.addName(n);
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void NamespaceQualification():
{}
{
  AbsoluteQualification()
| RelativeQualification()
}

void AbsoluteQualification():
{}
{
  <DOUBLE_COLON> RelativeQualification()
}

void RelativeQualification():
{}
{
  Name() ( LOOKAHEAD(2) <DOUBLE_COLON> Name() )*
}
*/

/* NAMESPACES */
  static final public NamespaceDefinition NamespaceDefinition() throws ParseException {
  NamespaceDefinition d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      d = PackageDefinition();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case DATATYPE:
    case ENUM:
    case SIGNAL:
      d = ClassifierDefinition();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* VISIBILITY */
  static final public String VisibilityIndicator() throws ParseException {
  String v;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PUBLIC:
      v = ImportVisibilityIndicator();
      break;
    case PROTECTED:
      t = jj_consume_token(PROTECTED);
                      v = t.image;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public String ImportVisibilityIndicator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      t = jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* UNITS */
  static final public UnitDefinition UnitDefinition() throws ParseException {
  QualifiedName n;
  ImportReference i;
  Token t;
  NamespaceDefinition d;
  UnitDefinition u = new UnitDefinition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      n = NamespaceDeclaration();
                                 u.setNamespace(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      i = ImportDeclaration();
                              u.addImport(i);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  u.addDocumentation(t.image);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    d = NamespaceDefinition();
                              u.setDefinition(d);
    jj_consume_token(0);
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedName NamespaceDeclaration() throws ParseException {
  QualifiedName n;
    jj_consume_token(NAMESPACE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ImportReference ImportDeclaration() throws ParseException {
  String v;
  ImportReference i;
    v = ImportVisibilityIndicator();
    jj_consume_token(IMPORT);
    i = ImportReference();
    jj_consume_token(SEMICOLON);
    i.setVisibility(v);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public ImportReference ImportReference() throws ParseException {
  QualifiedName n;
  String a;
  ImportReference i;
    /* ORIGINAL
      ElementImportReference()
    | PackageImportReference()
    */
    
      n = QualifiedName();
                        i = new ImportReference(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case DOUBLE_COLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_COLON:
        PackageImport();
                      i.setIsPackageImport();
        break;
      case AS:
        a = AliasDefinition();
                            i.setAlias(a);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void ElementImportReference():
{}
{
  QualifiedName() [ AliasDefinition() ]
}
*/
  static final public String AliasDefinition() throws ParseException {
  String n;
    jj_consume_token(AS);
    n = Name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void PackageImportReference():
{}
{
  QualifiedName() <DOUBLE_COLON> <STAR>
}
*/

/* ADDED */
  static final public void PackageImport() throws ParseException {
    jj_consume_token(DOUBLE_COLON);
    jj_consume_token(STAR);
  }

/***********************
 * STRUCTURAL MODELING *
 ***********************/

/* PACKAGES */
  static final public String PackageDeclaration() throws ParseException {
  String n;
    jj_consume_token(PACKAGE);
    n = Name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public PackageDefinition PackageDefinition() throws ParseException {
  String n;
  Member m;
  PackageDefinition d;
    n = PackageDeclaration();
                             d = new PackageDefinition(n);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      m = PackagedElement();
                                     d.addMember(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Member PackagedElement() throws ParseException {
  Token t;
  String c = null;
  String v;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    v = ImportVisibilityIndicator();
    m = PackagedElementDefinition();
    m.addDocumentation(c);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member PackagedElementDefinition() throws ParseException {
  Member m;
    if (jj_2_2(2147483647)) {
      m = NamespaceStubDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case ASSOC:
      case CLASS:
      case DATATYPE:
      case ENUM:
      case PACKAGE:
      case SIGNAL:
        m = NamespaceDefinition();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member NamespaceStubDeclaration() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      m = PackageStubDeclaration();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case DATATYPE:
    case ENUM:
    case SIGNAL:
      m = ClassifierStubDeclaration();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public PackageDefinition PackageStubDeclaration() throws ParseException {
  String n;
  PackageDefinition p;
    n = PackageDeclaration();
    jj_consume_token(SEMICOLON);
    p = new PackageDefinition(n);
    p.setIsStub();
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/***************
 * CLASSIFIERS *
 ***************/
  static final public NamespaceDefinition ClassifierDefinition() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_3(2)) {
      d = ClassDefinition();
    } else if (jj_2_4(2)) {
      d = ActiveClassDefinition();
    } else if (jj_2_5(2)) {
      d = DataTypeDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDefinition();
        break;
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_6(2)) {
          d = AssociationDefinition();
        } else if (jj_2_7(2)) {
          d = SignalDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDefinition();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public NamespaceDefinition ClassifierDeclaration() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_8(2)) {
      d = ClassDeclaration();
    } else if (jj_2_9(2)) {
      d = ActiveClassDeclaration();
    } else if (jj_2_10(2)) {
      d = DataTypeDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDeclaration();
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_11(2)) {
          d = AssociationDeclaration();
        } else if (jj_2_12(2)) {
          d = SignalDeclaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDeclaration();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public NamespaceDefinition ClassifierStubDeclaration() throws ParseException {
  NamespaceDefinition d;
    d = ClassifierDeclaration();
    jj_consume_token(SEMICOLON);
    d.setIsStub();
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* CLASSES */
  static final public ClassDefinition ClassDeclaration() throws ParseException {
  ClassDefinition d = new ClassDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    n = Name();
                       d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedNameList SpecializationClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(SPECIALIZES);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedNameList QualifiedNameList() throws ParseException {
  QualifiedNameList nl = new QualifiedNameList();
  QualifiedName n;
    n = QualifiedName();
                        nl.add(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      n = QualifiedName();
                                  nl.add(n);
    }
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDefinition ClassDefinition() throws ParseException {
  ClassDefinition d;
  Member m;
    d = ClassDeclaration();
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case ASSOC:
      case CLASS:
      case CREATE:
      case DATATYPE:
      case DESTROY:
      case ENUM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SIGNAL:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      m = ClassMember();
                                 d.addMember(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Member ClassMember() throws ParseException {
  Token t;
  String c = null;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      v = VisibilityIndicator();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    m = ClassMemberDefinition();
    m.addDocumentation(c);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member ClassMemberDefinition() throws ParseException {
  Member m;
    if (jj_2_13(2147483647)) {
      m = ClassifierStubDeclaration();
    } else if (jj_2_14(2)) {
      m = ClassifierDefinition();
    } else if (jj_2_15(2147483647)) {
      m = FeatureStubDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CREATE:
      case DESTROY:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        m = FeatureDefinition();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ACTIVE CLASSES */
  static final public ActiveClassDefinition ActiveClassDeclaration() throws ParseException {
  ActiveClassDefinition d = new ActiveClassDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(ACTIVE);
    jj_consume_token(CLASS);
    n = Name();
                                d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public ActiveClassDefinition ActiveClassDefinition() throws ParseException {
  ActiveClassDefinition d;
  Member m;
    d = ActiveClassDeclaration();
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case ASSOC:
      case CLASS:
      case CREATE:
      case DATATYPE:
      case DESTROY:
      case ENUM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RECEIVE:
      case SIGNAL:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_6;
      }
      m = ActiveClassMember();
                                       d.addMember(m);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      BehaviorClause(d);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public void BehaviorClause(ActiveClassDefinition d) throws ParseException {
  Block b;
  String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      b = Block();
                d.setBehaviorBlock(b);
      break;
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      n = Name();
               d.setBehaviorName(n);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Member ActiveClassMember() throws ParseException {
  Token t;
  String c = null;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      v = VisibilityIndicator();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    m = ActiveClassMemberDefinition();
    m.addDocumentation(c);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member ActiveClassMemberDefinition() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case CREATE:
    case DATATYPE:
    case DESTROY:
    case ENUM:
    case SIGNAL:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      m = ClassMemberDefinition();
      break;
    default:
      jj_la1[32] = jj_gen;
      if (jj_2_16(3)) {
        m = ActiveFeatureDefinition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RECEIVE:
          m = ActiveFeatureStubDeclaration();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* DATA TYPES */
  static final public DataTypeDefinition DataTypeDeclaration() throws ParseException {
  DataTypeDefinition d = new DataTypeDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                  d.setIsAbstract();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(DATATYPE);
    n = Name();
                          d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public DataTypeDefinition DataTypeDefinition() throws ParseException {
  DataTypeDefinition d;
    d = DataTypeDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public void StructuredBody(ClassifierDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PUBLIC:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_7;
      }
      m = StructuredMember();
                                      d.addMember(m);
    }
    jj_consume_token(RBRACE);
  }

  static final public Member StructuredMember() throws ParseException {
  Token t;
  String c = null;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
                                                                    v = t.image;
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    m = PropertyDefinition();
    m.addDocumentation(c);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ASSOCIATIONS */
  static final public AssociationDefinition AssociationDeclaration() throws ParseException {
  AssociationDefinition d = new AssociationDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(ASSOC);
    n = Name();
                       d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public AssociationDefinition AssociationDefinition() throws ParseException {
  AssociationDefinition d;
    d = AssociationDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* ENUMERATIONS */
  static final public EnumerationDefinition EnumerationDeclaration() throws ParseException {
  EnumerationDefinition d = new EnumerationDefinition();
  String n;
  QualifiedNameList nl;
    jj_consume_token(ENUM);
    n = Name();
                      d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public EnumerationDefinition EnumerationDefinition() throws ParseException {
  EnumerationDefinition d;
  Member m;
    d = EnumerationDeclaration();
    jj_consume_token(LBRACE);
    m = EnumerationLiteralName();
                                          d.addMember(m);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      m = EnumerationLiteralName();
                                           d.addMember(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public EnumerationLiteralName EnumerationLiteralName() throws ParseException {
  Token t;
  String c = null;
  String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    n = Name();
    {if (true) return new EnumerationLiteralName(n, c);}
    throw new Error("Missing return statement in function");
  }

/* SIGNALS */
  static final public SignalDefinition SignalDeclaration() throws ParseException {
  SignalDefinition d = new SignalDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(SIGNAL);
    n = Name();
                        d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public SignalDefinition SignalDefinition() throws ParseException {
  SignalDefinition d;
    d = SignalDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* FEATURES */
  static final public Member FeatureDefinition() throws ParseException {
  Member m;
    if (jj_2_17(2)) {
      m = AttributeDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        m = OperationDefinition();
        break;
      case CREATE:
        m = ConstructorDefinition();
        break;
      case DESTROY:
        m = DestructorDefinition();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member FeatureStubDeclaration() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      m = OperationStubDeclaration();
      break;
    case CREATE:
      m = ConstructorStubDeclaration();
      break;
    case DESTROY:
      m = DestructorStubDeclaration();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    m.setIsStub();
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member ActiveFeatureDefinition() throws ParseException {
  Member m;
    if (jj_2_18(2)) {
      m = ReceptionDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECEIVE:
        m = SignalReceptionDefinition();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Member ActiveFeatureStubDeclaration() throws ParseException {
  Member m;
    m = SignalReceptionStubDeclaration();
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTIES */
  static final public PropertyDefinition PropertyDefinition() throws ParseException {
    PropertyDefinition d;
    d = PropertyDeclaration();
    jj_consume_token(SEMICOLON);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public PropertyDefinition AttributeDefinition() throws ParseException {
  PropertyDefinition d;
  Expression e;
    d = PropertyDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      e = AttributeInitializer();
                                 d.setInitializer(e);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression AttributeInitializer() throws ParseException {
  Expression e;
    jj_consume_token(ASSIGN);
    e = Expression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public PropertyDefinition PropertyDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  PropertyDefinition d = new PropertyDefinition(t);
  String n;
    n = Name();
               d.setName(n);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPOSE:
      jj_consume_token(COMPOSE);
                        d.setIsComposite();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    TypePart(t);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public void TypePart(TypedElementDeclaration d) throws ParseException {
  QualifiedName t;
  Token tc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case DOUBLE_COLON:
      t = TypeName();
                   d.setType(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        Multiplicity(d);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      break;
    case COLLECTION_NAME:
      tc = jj_consume_token(COLLECTION_NAME);
                           d.setCollection(tc.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        t = TypeName();
                          d.setType(t);
        jj_consume_token(GT);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public QualifiedName TypeName() throws ParseException {
  QualifiedName n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case DOUBLE_COLON:
      n = QualifiedName();
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public void Multiplicity(TypedElementDeclaration d) throws ParseException {
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_LITERAL:
    case STAR:
      MultiplicityRange(d);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERED:
      jj_consume_token(ORDERED);
                d.setIsOrdered();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NONUNIQUE:
      jj_consume_token(NONUNIQUE);
                                                      d.setIsNonunique();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
  }

  static final public void MultiplicityRange(TypedElementDeclaration d) throws ParseException {
  Token t;
  String n;
    if (jj_2_19(2)) {
      t = jj_consume_token(NATURAL_LITERAL);
      jj_consume_token(DOUBLE_DOT);
                                                      d.setLowerBound(t.image);
    } else {
      ;
    }
    n = UnlimitedNaturalLiteral();
                                  d.setUpperBound(n);
  }

  static final public String UnlimitedNaturalLiteral() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_LITERAL:
      t = jj_consume_token(NATURAL_LITERAL);
      break;
    case STAR:
      t = jj_consume_token(STAR);
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* OPERATIONS */
  static final public OperationDefinition OperationDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  OperationDefinition d = new OperationDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    n = Name();
                                                     d.setName(n);
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypePart(t);
                                             p.setDirection("return"); d.addMember(p);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REDEFINES:
      nl = RedefinitionClause();
                                d.setRedefinition(nl);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public OperationDefinition OperationDefinition() throws ParseException {
  OperationDefinition o;
  Block b;
    o = OperationDeclaration();
    b = Block();
    o.setBody(b);
    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  static final public OperationDefinition OperationStubDeclaration() throws ParseException {
  OperationDefinition d;
    d = OperationDeclaration();
    jj_consume_token(SEMICOLON);
    d.setIsStub();
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public void FormalParameters(NamespaceDefinition d) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
    case IN:
    case INOUT:
    case OUT:
      FormalParameterList(d);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  static final public void FormalParameterList(NamespaceDefinition d) throws ParseException {
  FormalParameter p;
    p = FormalParameter();
                          d.addMember(p);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      FormalParameter();
                                d.addMember(p);
    }
  }

  static final public FormalParameter FormalParameter() throws ParseException {
  Token t;
  String c = null;
  String d;
  String n;
  TypedElementDeclaration e = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    d = ParameterDirection();
                             p.setDirection(d);
    n = Name();
               p.setName(n);
    jj_consume_token(COLON);
    TypePart(e);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public String ParameterDirection() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      t = jj_consume_token(IN);
      break;
    case OUT:
      t = jj_consume_token(OUT);
      break;
    case INOUT:
      t = jj_consume_token(INOUT);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedNameList RedefinitionClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(REDEFINES);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* CONSTRUCTORS */
  static final public ConstructorDefinition ConstructorDeclaration() throws ParseException {
  ConstructorDefinition d = new ConstructorDefinition();
  String n;
    jj_consume_token(CREATE);
    n = Name();
                        d.setName(n);
    FormalParameters(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstructorDefinition ConstructorDefinition() throws ParseException {
  ConstructorDefinition d;
  Block b;
    d = ConstructorDeclaration();
    b = ConstructorBody();
    d.setBody(b);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstructorDefinition ConstructorStubDeclaration() throws ParseException {
  ConstructorDefinition d;
    d = ConstructorDeclaration();
    jj_consume_token(SEMICOLON);
    d.setIsStub();
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Block ConstructorBody() throws ParseException {
  Statement s;
  Block b = new Block();
    jj_consume_token(LBRACE);
    if (jj_2_20(2147483647)) {
      ExplicitConstructorInvocations(b);
    } else {
      ;
    }
    BlockCompletion(b);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public void ExplicitConstructorInvocations(Block b) throws ParseException {
  Statement s;
    if (jj_2_22(2)) {
      s = AlternativeConstructorInvocation();
                                             b.addStatement(s);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case SUPER:
        label_10:
        while (true) {
          s = SuperclassConstructorInvocation();
                                                                 b.addStatement(s);
          if (jj_2_21(2147483647)) {
            ;
          } else {
            break label_10;
          }
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public AlternativeConstructorInvocation AlternativeConstructorInvocation() throws ParseException {
  Token d;
  String c = null;
  String n = null;
  Tuple t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      d = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = d.image;
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    jj_consume_token(THIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      n = Name();
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    t = Tuple();
    jj_consume_token(SEMICOLON);
    {if (true) return new AlternativeConstructorInvocation(n, t, c);}
    throw new Error("Missing return statement in function");
  }

  static final public SuperclassConstructorInvocation SuperclassConstructorInvocation() throws ParseException {
  Token d;
  String c = null;
  QualifiedName n = null;
  Tuple t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      d = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = d.image;
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    jj_consume_token(SUPER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      n = QualifiedName();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    t = Tuple();
    jj_consume_token(SEMICOLON);
    {if (true) return new SuperclassConstructorInvocation(n, t, c);}
    throw new Error("Missing return statement in function");
  }

/* DESTRUCTORS */
  static final public DestructorDefinition DestructorDeclaration() throws ParseException {
  DestructorDefinition d = new DestructorDefinition();
  String n;
    jj_consume_token(DESTROY);
    n = Name();
                         d.setName(n);
    FormalParameters(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public DestructorDefinition DestructorDefinition() throws ParseException {
  DestructorDefinition d;
  Block b;
    d = DestructorDeclaration();
    b = Block();
    d.setBody(b);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public DestructorDefinition DestructorStubDeclaration() throws ParseException {
  DestructorDefinition d;
    d = DestructorDeclaration();
    jj_consume_token(SEMICOLON);
    d.setIsStub();
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* RECEPTIONS */
  static final public ReceptionDefinition ReceptionDefinition() throws ParseException {
  QualifiedName n;
    jj_consume_token(RECEIVE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    {if (true) return new ReceptionDefinition(n);}
    throw new Error("Missing return statement in function");
  }

  static final public SignalReceptionDefinition SignalReceptionDeclaration() throws ParseException {
  SignalReceptionDefinition d = new SignalReceptionDefinition();
  String n;
  QualifiedNameList nl;
    jj_consume_token(RECEIVE);
    jj_consume_token(SIGNAL);
    n = Name();
                                  d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public SignalReceptionDefinition SignalReceptionDefinition() throws ParseException {
  SignalReceptionDefinition d;
    d = SignalReceptionDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public SignalReceptionDefinition SignalReceptionStubDeclaration() throws ParseException {
  SignalReceptionDefinition d;
    d = SignalReceptionDeclaration();
    jj_consume_token(SEMICOLON);
    d.setIsStub();
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/***********************
 * BEHAVIORAL MODELING *
 ***********************/

/* ACTIVITIES */
  static final public ActivityDefinition ActivityDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  ActivityDefinition d = new ActivityDefinition();
  String n;
    jj_consume_token(ACTIVITY);
    n = Name();
                          d.setName(n);
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypePart(t);
                          p.setDirection("return"); d.addMember(p);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public ActivityDefinition ActivityDefinition() throws ParseException {
  ActivityDefinition a;
  Block b;
    a = ActivityDeclaration();
    b = Block();
    a.setBody(b);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/* BLOCK */
  static final public Block Block() throws ParseException {
  Block b = new Block();
    jj_consume_token(LBRACE);
    BlockCompletion(b);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public void BlockCompletion(Block b) throws ParseException {
  Statement s;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ACCEPT:
      case ANY:
      case BREAK:
      case CLASSIFY:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SUPER:
      case SWITCH:
      case THIS:
      case WHILE:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case DOUBLE_COLON:
      case BANG:
      case AT:
      case DOLLAR:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case HASH:
      case DOUBLE_HASH:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_11;
      }
      s = DocumentedStatement();
                                b.addStatement(s);
    }
    jj_consume_token(RBRACE);
  }

  static final public Statement DocumentedStatement() throws ParseException {
  Token t;
  String c = null;
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    s = Statement();
    s.addDocumentation(c);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* STATEMENTS */
  static final public Statement Statement() throws ParseException {
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      s = AnnotatedStatement();
      break;
    case LBRACE:
      s = BlockStatement();
      break;
    case SEMICOLON:
      s = EmptyStatement();
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case DOUBLE_COLON:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case HASH:
    case DOUBLE_HASH:
      s = ExpressionStatement();
      break;
    case IF:
      s = IfStatement();
      break;
    case SWITCH:
      s = SwitchStatement();
      break;
    case WHILE:
      s = WhileStatement();
      break;
    case FOR:
      s = ForStatement();
      break;
    case DO:
      s = DoStatement();
      break;
    case BREAK:
      s = BreakStatement();
      break;
    case RETURN:
      s = ReturnStatement();
      break;
    case ACCEPT:
      s = AcceptStatement();
      break;
    case CLASSIFY:
      s = ClassifyStatement();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* ANNOTATED STATEMENTS */
  static final public Statement AnnotatedStatement() throws ParseException {
  Annotation a;
  Statement s;
    a = Annotation();
    s = Statement();
    s.addAnnotation(a);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Annotation Annotation() throws ParseException {
  Token t;
  NameList nl = null;
    jj_consume_token(AT);
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      nl = NameList();
      jj_consume_token(GT);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    {if (true) return new Annotation(t.image, nl);}
    throw new Error("Missing return statement in function");
  }

  static final public NameList NameList() throws ParseException {
  NameList nl = new NameList();
  String n;
    n = Name();
               nl.add(n);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      n = Name();
                                                   nl.add(n);
    }
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* BLOCK STATEMENTS */
  static final public BlockStatement BlockStatement() throws ParseException {
  Block b;
    b = Block();
    {if (true) return new BlockStatement(b);}
    throw new Error("Missing return statement in function");
  }

/* EMPTY STATEMENTS */
  static final public EmptyStatement EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
    {if (true) return new EmptyStatement();}
    throw new Error("Missing return statement in function");
  }

/* EXPRESSION STATEMENTS */
  static final public ExpressionStatement ExpressionStatement() throws ParseException {
  Expression e;
    e = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ExpressionStatement(e);}
    throw new Error("Missing return statement in function");
  }

/* IF STATEMENTS */
  static final public IfStatement IfStatement() throws ParseException {
  IfStatement s = new IfStatement();
  Block b;
    jj_consume_token(IF);
    SequentialClauses(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      b = FinalClause();
                                                  s.setFinalClause(b);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void SequentialClauses(IfStatement s) throws ParseException {
  ConcurrentClauses cs;
    cs = ConcurrentClauses();
                             s.addNonFinalClauses(cs);
    label_13:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      cs = ConcurrentClauses();
                                                        s.addNonFinalClauses(cs);
    }
  }

  static final public ConcurrentClauses ConcurrentClauses() throws ParseException {
  ConcurrentClauses cs = new ConcurrentClauses();
  NonFinalClause c;
    c = NonFinalClause();
                         cs.addClause(c);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_14;
      }
      jj_consume_token(OR);
      jj_consume_token(IF);
      c = NonFinalClause();
                                     cs.addClause(c);
    }
    {if (true) return cs;}
    throw new Error("Missing return statement in function");
  }

  static final public NonFinalClause NonFinalClause() throws ParseException {
  Expression e;
  Block b;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    {if (true) return new NonFinalClause(e, b);}
    throw new Error("Missing return statement in function");
  }

  static final public Block FinalClause() throws ParseException {
  Block b;
    jj_consume_token(ELSE);
    b = Block();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* SWITCH STATEMENTS */
  static final public SwitchStatement SwitchStatement() throws ParseException {
  SwitchStatement s;
  Expression e;
  SwitchClause c;
  Block b;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
                                                s = new SwitchStatement(e);
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_15;
      }
      c = SwitchClause();
                                  s.addNonDefaultClause(c);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_:
      b = SwitchDefaultClause();
                                s.setDefaultClause(b);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchClause SwitchClause() throws ParseException {
  SwitchClause c = new SwitchClause();
  Expression e;
  Block b;
    e = SwitchCase();
                     c.addCase(e);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_16;
      }
      e = SwitchCase();
                                                          c.addCase(e);
    }
    b = Block();
                c.setBlock(b);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression SwitchCase() throws ParseException {
  Expression e;
    jj_consume_token(CASE);
    e = Expression();
    jj_consume_token(COLON);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Block SwitchDefaultClause() throws ParseException {
  Block b;
    jj_consume_token(DEFAULT_);
    jj_consume_token(COLON);
    b = Block();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* WHILE STATEMENTS */
  static final public WhileStatement WhileStatement() throws ParseException {
  Expression e;
  Block b;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    {if (true) return new WhileStatement(e, b);}
    throw new Error("Missing return statement in function");
  }

/* DO STATEMENTS */
  static final public DoStatement DoStatement() throws ParseException {
  Block b;
  Expression e;
    jj_consume_token(DO);
    b = Block();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return new DoStatement(b, e);}
    throw new Error("Missing return statement in function");
  }

/* FOR STATEMENTS */
  static final public ForStatement ForStatement() throws ParseException {
  ForStatement s = new ForStatement();
  Block b;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    ForControl(s);
    jj_consume_token(RPAREN);
    b = Block();
    s.setBody(b);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void ForControl(ForStatement s) throws ParseException {
  ForVariableDefinition d;
  Expression e;
    d = ForVariableDefinition();
                                s.addVariableDefinition(d);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      ForVariableDefinition();
                                      s.addVariableDefinition(d);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      e = Expression();
                               s.setCondition(e);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
  }

  static final public ForVariableDefinition ForVariableDefinition() throws ParseException {
  String n;
  Expression e1;
  Expression e2 = null;
    n = Name();
    jj_consume_token(IN);
    e1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_DOT:
      jj_consume_token(DOUBLE_DOT);
      e2 = Expression();
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    {if (true) return new ForVariableDefinition(n, e1, e2);}
    throw new Error("Missing return statement in function");
  }

/* BREAK STATEMENTS */
  static final public BreakStatement BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
    {if (true) return new BreakStatement();}
    throw new Error("Missing return statement in function");
  }

/* RETURN STATEMENTS */
  static final public ReturnStatement ReturnStatement() throws ParseException {
  Expression e;
    jj_consume_token(RETURN);
    e = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ReturnStatement(e);}
    throw new Error("Missing return statement in function");
  }

/* ACCEPT STATEMENTS */
  static final public AcceptStatement AcceptStatement() throws ParseException {
  AcceptStatement s;
  AcceptBlock c;
    /* ORIGINAL
      LOOKAHEAD(SimpleAcceptStatement()) SimpleAcceptStatement()
    | CompoundAcceptStatement()
    */
    
      c = AcceptClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      s = SimpleAcceptStatementCompletion(c);
      break;
    case LBRACE:
      s = CompoundAcceptStatementCompletion(c);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void SimpleAcceptStatement():
{}
{
  AcceptClause() <SEMICOLON>
}
*/

/* ADDED */
  static final public AcceptStatement SimpleAcceptStatementCompletion(AcceptBlock b) throws ParseException {
  AcceptStatement s = new AcceptStatement();
    jj_consume_token(SEMICOLON);
    s.addAcceptBlock(b);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void CompoundAcceptStatement():
{}
{
  AcceptBlock() ( <OR> AcceptBlock() )*
}
*/

/* ADDED */
  static final public AcceptStatement CompoundAcceptStatementCompletion(AcceptBlock a1) throws ParseException {
  AcceptStatement s = new AcceptStatement();
  Block b;
  AcceptBlock a;
    b = Block();
                a1.setBlock(b); s.addAcceptBlock(a1);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_18;
      }
      jj_consume_token(OR);
      a = AcceptBlock();
                             s.addAcceptBlock(a);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public AcceptBlock AcceptBlock() throws ParseException {
  AcceptBlock a;
  Block b;
    a = AcceptClause();
    b = Block();
    a.setBlock(b);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public AcceptBlock AcceptClause() throws ParseException {
  String n = null;
  QualifiedNameList nl;
    jj_consume_token(ACCEPT);
    jj_consume_token(LPAREN);
    if (jj_2_24(2)) {
      n = Name();
      jj_consume_token(COLON);
    } else {
      ;
    }
    nl = QualifiedNameList();
    jj_consume_token(RPAREN);
    {if (true) return new AcceptBlock(n, nl);}
    throw new Error("Missing return statement in function");
  }

/* CLASSIFY STATEMENTS */
  static final public ClassifyStatement ClassifyStatement() throws ParseException {
  ClassifyStatement s;
  Expression e;
    jj_consume_token(CLASSIFY);
    e = Expression();
                                s = new ClassifyStatement(e);
    ClassificationClause(s);
    jj_consume_token(SEMICOLON);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void ClassificationClause(ClassifyStatement s) throws ParseException {
  QualifiedNameList nl;
    if (jj_2_25(2)) {
      nl = ClassificationFromClause();
                                    s.setFromList(nl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        ClassificationToClause();
                               s.setToList(nl);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
      case TO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ReclassifyAllClause();
                            s.setFromList(new QualifiedNameList());
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        nl = ClassificationToClause();
                                  s.setToList(nl);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public QualifiedNameList ClassificationFromClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(FROM);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedNameList ClassificationToClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(TO);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  static final public void ReclassifyAllClause() throws ParseException {
    jj_consume_token(FROM);
    jj_consume_token(STAR);
  }

/***************
 * EXPRESSIONS *
 ***************/
  static final public Expression Expression() throws ParseException {
  QualifiedName n;
  Expression e1;
  Expression e2;
    if (jj_2_26(2147483647)) {
      n = QualifiedName();
      e2 = Assignment(new NameLeftHandSide(n));
    } else if (jj_2_27(2147483647)) {
      e1 = NonPostfixUnaryExpression();
      e2 = ConditionalExpressionCompletion(e1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case DOUBLE_COLON:
      case STAR:
      case HASH:
      case DOUBLE_HASH:
        e1 = BaseCollectionExpression();
        e2 = ExpressionCompletion(e1);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression ExpressionCompletion(Expression c) throws ParseException {
  Expression i;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      e = ExpressionCompletion(new CollectionAccessExpression(c, i));
      break;
    default:
      jj_la1[92] = jj_gen;
      e = NonIndexExpressionCompletion(c);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression FeatureExpressionCompletion(FeatureReference f) throws ParseException {
  Expression e1;
  Expression e2;
    if (jj_2_28(2147483647)) {
      e2 = Assignment(new FeatureLeftHandSide(f, null));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        e1 = Index();
        e2 = IndexFeatureExpressionCompletion(f, e1);
        break;
      case LPAREN:
        e1 = FeatureInvocation(f);
        e2 = ExpressionCompletion(e1);
        break;
      default:
        jj_la1[93] = jj_gen;
        e2 = NonIndexExpressionCompletion(f);
      }
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression IndexFeatureExpressionCompletion(FeatureReference f, Expression i) throws ParseException {
  Expression e1;
  Expression e2;
    if (jj_2_29(2147483647)) {
      e2 = Assignment(new FeatureLeftHandSide(f, i));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        e1 = Index();
        e2 = ExpressionCompletion(new CollectionAccessExpression(new CollectionAccessExpression(f, i), e1));
        break;
      default:
        jj_la1[94] = jj_gen;
        e2 = NonIndexExpressionCompletion(new CollectionAccessExpression(f, i));
      }
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression NonIndexExpressionCompletion(Expression c) throws ParseException {
  Expression e1;
  FeatureReference f;
  Expression e2;
    if (jj_2_30(2)) {
      f = Feature(c);
      e2 = FeatureExpressionCompletion(f);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        e1 = DestroyInvocation(c);
        e2 = ExpressionCompletion(e1);
        break;
      default:
        jj_la1[95] = jj_gen;
        if (jj_2_31(2147483647)) {
          e1 = CollectionOperation(c);
          e2 = ExpressionCompletion(e1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARROW:
            e1 = CollectionExpansion(c);
            e2 = ExpressionCompletion(e1);
            break;
          default:
            jj_la1[96] = jj_gen;
            e1 = PostfixOperation(c);
            e2 = ConditionalExpressionCompletion(e1);
          }
        }
      }
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

/* PRIMARY EXPRESSIONS */

/* ORIGINAL
void PrimaryExpression():
{}
{
  LiteralExpression()
| NameExpression()
| ThisExpression()
| ParenthesizedExpression()
| PropertyAccessExpression()
| InvocationExpression()
| InstanceCreationExpression()
| InstanceDestructionExpression()
| ReductionExpression()
}
*/

/* ADDED */
  static final public Expression BaseExpression() throws ParseException {
  Expression e;
  QualifiedName n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e = LiteralExpression();
      break;
    default:
      jj_la1[98] = jj_gen;
      if (jj_2_33(2147483647)) {
        n = QualifiedName();
        e = BehaviorInvocation(n);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
        case DOUBLE_COLON:
          e = NameExpression();
          break;
        case THIS:
          e = ThisExpression();
          break;
        case LPAREN:
          e = ParenthesizedExpression();
          break;
        case SUPER:
          jj_consume_token(SUPER);
          if (jj_2_32(2147483647)) {
            e = SuperDestroyInvocation();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              e = SuperInvocation();
              break;
            default:
              jj_la1[97] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case NEW:
          e = InstanceCreationExpression();
          break;
        case HASH:
        case DOUBLE_HASH:
          e = ReductionExpression();
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* LITERAL EXPRESSIONS */
  static final public Expression LiteralExpression() throws ParseException {
  Token t;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                            e = new BooleanLiteral(t.image);
      break;
    case NATURAL_LITERAL:
      t = jj_consume_token(NATURAL_LITERAL);
                            e = new NaturalLiteral(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                            e = new StringLiteral(t.image);
      break;
    case STAR:
      t = jj_consume_token(STAR);
                            e = new UnboundedLiteral();
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* NAME EXPRESSIONS */
  static final public Expression NameExpression() throws ParseException {
  QualifiedName n;
    n = QualifiedName();
    {if (true) return new NameExpression(n);}
    throw new Error("Missing return statement in function");
  }

/* THIS EXPRESSIONS */
  static final public Expression ThisExpression() throws ParseException {
    jj_consume_token(THIS);
    {if (true) return new ThisExpression();}
    throw new Error("Missing return statement in function");
  }

/* PARENTHESIZED EXPRESSIONS */
  static final public Expression ParenthesizedExpression() throws ParseException {
  Expression e;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTY ACCESS EXPRESSIONS */

/* ORIGINAL
void PropertyAccessExpression():
{}
{ 
  FeatureReference()
}

void FeatureReference():
{}
{
  CollectionExpression() <DOT> Name()
}
*/

/* ADDED */
  static final public FeatureReference Feature(Expression c) throws ParseException {
  String n;
    jj_consume_token(DOT);
    n = Name();
    {if (true) return new FeatureReference(c, n);}
    throw new Error("Missing return statement in function");
  }

/* INVOCATION EXPRESSIONS */

/* ORIGINAL
void InvocationExpression():
{}
{
  InvocationTarget() Tuple()
}

void InvocationTarget():
{}
{
  LOOKAHEAD(QualifiedName() <LPAREN>) 
  BehaviorInvocationTarget()
| LOOKAHEAD(SuperInvocationTarget() <LPAREN>) 
  SuperInvocationTarget()
| FeatureInvocationTarget()
}
*/
  static final public Tuple Tuple() throws ParseException {
  Tuple t;
    if (jj_2_34(2147483647)) {
      t = NamedTuple();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t = PositionalTuple();
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Tuple PositionalTuple() throws ParseException {
  ExpressionList el = new ExpressionList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case DOUBLE_COLON:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case HASH:
    case DOUBLE_HASH:
      ExpressionList(el);
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new PositionalTuple(el.getList());}
    throw new Error("Missing return statement in function");
  }

  static final public void ExpressionList(ExpressionList el) throws ParseException {
  Expression e;
    e = Expression();
                     el.add(e);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      Expression();
                           el.add(e);
    }
  }

  static final public Tuple NamedTuple() throws ParseException {
  NamedTuple t = new NamedTuple();
  NamedExpression n;
    jj_consume_token(LPAREN);
    n = NamedExpression();
                                   t.addExpression(n);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      n = NamedExpression();
                                    t.addExpression(n);
    }
    jj_consume_token(RPAREN);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public NamedExpression NamedExpression() throws ParseException {
  String n;
  Expression e;
    n = Name();
    jj_consume_token(THICK_ARROW);
    e = Expression();
    {if (true) return new NamedExpression(n, e);}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void BehaviorInvocationTarget():
{}
{
  QualifiedName()
}
*/

/* ADDED */
  static final public Expression BehaviorInvocation(QualifiedName n) throws ParseException {
  Tuple t;
    t = Tuple();
    {if (true) return new BehaviorInvocationExpression(n, t);}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void FeatureInvocationTarget():
{}
{
  FeatureReference()
}
*/

/* ADDED */
  static final public Expression FeatureInvocation(FeatureReference f) throws ParseException {
  Tuple t;
    t = Tuple();
    {if (true) return new FeatureInvocationExpression(f, t);}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void SuperInvocationTarget():
{}
{
  <SUPER> <DOT> QualifiedName()
}
*/

/* ADDED */
  static final public Expression SuperInvocation() throws ParseException {
  QualifiedName n;
  Tuple t;
    jj_consume_token(DOT);
    n = QualifiedName();
    t = Tuple();
    {if (true) return new SuperInvocationExpression(n, t);}
    throw new Error("Missing return statement in function");
  }

/* INSTANCE CREATION EXPRESSIONS */
  static final public Expression InstanceCreationExpression() throws ParseException {
  QualifiedName n;
  Tuple t;
    jj_consume_token(NEW);
    n = QualifiedName();
    t = Tuple();
    {if (true) return new InstanceCreationExpression(n, t);}
    throw new Error("Missing return statement in function");
  }

/* INSTANCE DESTRUCTION EXPRESSIONS */

/* ORIGINAL
void InstanceDestructionExpression():
{}
{
  CollectionExpression() <DOT> <DESTROY> Tuple()
| <SUPER> <DOT> <DESTROY> Tuple()
}
*/

/* ADDED */
  static final public Expression DestroyInvocation(Expression c) throws ParseException {
  Tuple t;
    jj_consume_token(DOT);
    jj_consume_token(DESTROY);
    t = Tuple();
    {if (true) return new InstanceDestructionExpression(c, t);}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression SuperDestroyInvocation() throws ParseException {
  Tuple t;
    jj_consume_token(DOT);
    jj_consume_token(DESTROY);
    t = Tuple();
    {if (true) return new SuperDestructionExpression(t);}
    throw new Error("Missing return statement in function");
  }

/* REDUCTION EXPRESSIONS */
  static final public Expression ReductionExpression() throws ParseException {
  String op;
  QualifiedName n;
  Expression e;
    op = ReductionOperator();
    n = QualifiedName();
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    {if (true) return new ReductionExpression(op, n, e);}
    throw new Error("Missing return statement in function");
  }

  static final public String ReductionOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      t = jj_consume_token(HASH);
      break;
    case DOUBLE_HASH:
      t = jj_consume_token(DOUBLE_HASH);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* COLLECTION EXPRESSIONS */
  static final public Expression CollectionExpression() throws ParseException {
  Expression e;
    /* ORIGINAL
      PrimaryExpression()
    | ClassExtentExpression()
    | CollectionValueExpression()
    | CollectionAccessExpression()
    | CollectionOperationExpression()
    | CollectionExpansionExpression()
    */
    
      e = BaseCollectionExpression();
    label_21:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_21;
      }
      e = CollectionModifier(e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression BaseCollectionExpression() throws ParseException {
  Expression e;
    if (jj_2_36(2147483647)) {
      e = ClassExtentExpression();
    } else if (jj_2_37(2147483647)) {
      e = CollectionValueExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case DOUBLE_COLON:
      case STAR:
      case HASH:
      case DOUBLE_HASH:
        e = BaseExpression();
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression CollectionModifier(Expression c) throws ParseException {
  Expression i;
  Expression e;
    if (jj_2_39(2147483647)) {
      e = DestroyInvocation(c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        e = Feature(c);
        if (jj_2_38(2)) {
          e = FeatureInvocation((FeatureReference)e);
        } else {
          ;
        }
        break;
      default:
        jj_la1[107] = jj_gen;
        if (jj_2_40(2147483647)) {
          e = CollectionOperation(c);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARROW:
            e = CollectionExpansion(c);
            break;
          case LBRACKET:
            i = Index();
                  e = new CollectionAccessExpression(c, i);
            break;
          default:
            jj_la1[108] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* CLASS EXTENT EXPRESSIONS */
  static final public Expression ClassExtentExpression() throws ParseException {
  QualifiedName n;
    n = QualifiedName();
    jj_consume_token(DOT);
    jj_consume_token(ALL_INSTANCES);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new ClassExtentExpression(n);}
    throw new Error("Missing return statement in function");
  }

/* COLLECTION VALUE EXPRESSIONS */
  static final public Expression CollectionValueExpression() throws ParseException {
  QualifiedName t;
  TypedElementDeclaration d = new TypedElementDeclaration();
  CollectionElements c = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case DOUBLE_COLON:
      t = TypeName();
                     d.setType(t);
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATURAL_LITERAL:
      case STAR:
        MultiplicityRange(d);
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case DOUBLE_COLON:
      case BANG:
      case DOLLAR:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case HASH:
      case DOUBLE_HASH:
        c = CollectionElements();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new CollectionValueExpression(d, c);}
    throw new Error("Missing return statement in function");
  }

  static final public CollectionElements CollectionElements() throws ParseException {
  CollectionElements c;
  Expression e1;
  Expression e2;
    /* ORIGINAL
      ExpressionList()
    | CollectionRange()
    */
      e1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_DOT:
      jj_consume_token(DOUBLE_DOT);
      e2 = Expression();
                                     c = new CollectionRange(e1, e2);
      break;
    default:
      jj_la1[113] = jj_gen;
      c = new ExpressionList(); ((ExpressionList)c).add(e1);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[112] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        e2 = Expression();
                                  ((ExpressionList)c).add(e2);
      }
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/*
void CollectionRange():
{}
{
  Expression() <DOUBLE_DOT> Expression()
}
*/

/* COLLECTION ACCESS EXPRESSIONS */

/* ORIGINAL
void CollectionAccessExpression():
{}
{
  CollectionExpression() Index()
}
*/
  static final public Expression Index() throws ParseException {
  Expression e;
    jj_consume_token(LBRACKET);
    e = Expression();
    jj_consume_token(RBRACKET);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* COLLECTION OPERATION EXPRESSIONS */

/* ORIGINAL
void CollectionOperationExpression():
{}
{
  CollectionExpression() <ARROW> <IDENTIFIER> CollectionOperationTuple()
}
*/

/* ADDED */
  static final public Expression CollectionOperation(Expression c) throws ParseException {
  Token op;
  Tuple t;
    jj_consume_token(ARROW);
    op = jj_consume_token(IDENTIFIER);
    t = CollectionOperationTuple();
    {if (true) return new CollectionOperationExpression(c, op.image, t);}
    throw new Error("Missing return statement in function");
  }

  static final public Tuple CollectionOperationTuple() throws ParseException {
  Tuple t;
    if (jj_2_41(2147483647)) {
      t = IndexedNamedTuple();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t = PositionalTuple();
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public NamedTuple IndexedNamedTuple() throws ParseException {
  NamedTuple t = new NamedTuple();
  NamedExpression e;
    jj_consume_token(LPAREN);
    e = IndexedNamedExpression();
                                          t.addExpression(e);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      e = IndexedNamedExpression();
                                           t.addExpression(e);
    }
    jj_consume_token(RPAREN);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public NamedExpression IndexedNamedExpression() throws ParseException {
  String n;
  Expression i = null;
  Expression e;
    n = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    jj_consume_token(THICK_ARROW);
    e = Expression();
    {if (true) return new NamedExpression(n, i, e);}
    throw new Error("Missing return statement in function");
  }

/* COLLECTION EXPANSION EXPRESSIONS */

/* ORIGINAL
void CollectionExpansionExpression():
{}
{
  CollectionExpression() <ARROW> <IDENTIFIER> Name() Tuple()
}
*/

/* ADDED */
  static final public Expression CollectionExpansion(Expression c) throws ParseException {
  Token op;
  String n;
  Tuple t;
    jj_consume_token(ARROW);
    op = jj_consume_token(IDENTIFIER);
    n = Name();
    t = Tuple();
    {if (true) return new CollectionExpansionExpression(c, op.image, n, t);}
    throw new Error("Missing return statement in function");
  }

/* POSTFIX EXPRESSIONS */
  static final public Expression PostfixExpression() throws ParseException {
  Expression c;
  Expression e;
    /* ORIGINAL
      CollectionExpression()
    | PostfixedExpression()
    */
    
      c = CollectionExpression();
    e = PostfixOperation(c);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression PostfixOperation(Expression c) throws ParseException {
  Expression e = c;
  String op;
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_24;
      }
      op = AffixOperator();
                           e = new PostfixExpression(op, e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ORIGINAL
void PostfixedExpression():
{}
{
  PostfixExpression() AffixOperator()
}
*/
  static final public String AffixOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      t = jj_consume_token(INCR);
      break;
    case DECR:
      t = jj_consume_token(DECR);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* UNARY EXPRESSIONS */
  static final public Expression UnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      e = PrefixedExpression();
      break;
    case PLUS:
    case MINUS:
      e = NumericUnaryExpression();
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case DOUBLE_COLON:
    case BANG:
    case DOLLAR:
    case STAR:
    case HASH:
    case DOUBLE_HASH:
      e = NonNumericUnaryExpression();
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression NonNumericUnaryExpression() throws ParseException {
  Expression e;
    if (jj_2_42(2147483647)) {
      e = CastExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case DOUBLE_COLON:
      case STAR:
      case HASH:
      case DOUBLE_HASH:
        e = PostfixExpression();
        break;
      case BANG:
        e = BooleanNegationExpression();
        break;
      case DOLLAR:
        e = IsolationExpression();
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public void CastLookahead() throws ParseException {
    jj_consume_token(LPAREN);
    TypeName();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case ANY:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case DOUBLE_COLON:
      TypeName();
      break;
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      LiteralExpression();
      break;
    case THIS:
      ThisExpression();
      break;
    case HASH:
    case DOUBLE_HASH:
      ReductionOperator();
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ADDED */
  static final public Expression NonPostfixUnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      e = PrefixedExpression();
      break;
    case PLUS:
    case MINUS:
      e = NumericUnaryExpression();
      break;
    case LPAREN:
      e = CastExpression();
      break;
    case BANG:
      e = BooleanNegationExpression();
      break;
    case DOLLAR:
      e = IsolationExpression();
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public PrefixExpression PrefixedExpression() throws ParseException {
  String op;
  Expression e;
    op = AffixOperator();
    e = UnaryExpression();
    {if (true) return new PrefixExpression(op, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression BooleanNegationExpression() throws ParseException {
  Expression e;
    jj_consume_token(BANG);
    e = UnaryExpression();
    {if (true) return new UnaryExpression("!", e);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression NumericUnaryExpression() throws ParseException {
  String op;
  Expression e;
    op = NumericUnaryOperator();
    e = UnaryExpression();
    {if (true) return new UnaryExpression(op, e);}
    throw new Error("Missing return statement in function");
  }

  static final public String NumericUnaryOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression IsolationExpression() throws ParseException {
  Expression e;
    jj_consume_token(DOLLAR);
    e = UnaryExpression();
    {if (true) return new UnaryExpression("$", e);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression CastExpression() throws ParseException {
  QualifiedName t;
  Expression e;
    jj_consume_token(LPAREN);
    t = TypeName();
    jj_consume_token(RPAREN);
    e = NonNumericUnaryExpression();
    {if (true) return new CastExpression(t, e);}
    throw new Error("Missing return statement in function");
  }

/* MULTIPLICATIVE OPERATORS */
  static final public Expression MultiplicativeExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ MultiplicativeExpression() MultiplicativeOperator() ] UnaryExpression()
    */
    
      u = UnaryExpression();
    e = MultiplicativeExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression MultiplicativeExpressionCompletion(Expression u) throws ParseException {
  Expression e1 = u;
  String op;
  Expression e2;
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_25;
      }
      op = MultiplicativeOperator();
      e2 = UnaryExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String MultiplicativeOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      t = jj_consume_token(STAR);
      break;
    case SLASH:
      t = jj_consume_token(SLASH);
      break;
    case REM:
      t = jj_consume_token(REM);
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* ADDITIVE OPERATORS */
  static final public Expression AdditiveExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ AdditiveExpression() AdditiveOperator() ] MultiplicativeExpression()
    */
    
      u = UnaryExpression();
    e = AdditiveExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression AdditiveExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = MultiplicativeExpressionCompletion(u);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_26;
      }
      op = AdditiveOperator();
      e2 = MultiplicativeExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String AdditiveOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* RELATIONAL OPERATORS */
  static final public Expression RelationalExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ RelationalExpression() RelationalOperator() ] AdditiveExpression()
    */
    
      u = UnaryExpression();
    e = RelationalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression RelationalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = AdditiveExpressionCompletion(u);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_27;
      }
      op = RelationalOperator();
      e2 = AdditiveExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String RelationalOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t = jj_consume_token(LT);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ClassificationExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      RelationalExpression() [ ClassificationOperator() QualifiedName() ]
    */
    
      u = UnaryExpression();
    e = ClassificationExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ClassificationExpressionCompletion(Expression u) throws ParseException {
  Expression e;
  String op;
  QualifiedName n;
    e = RelationalExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASTYPE:
    case INSTANCEOF:
      op = ClassificationOperator();
      n = QualifiedName();
      e = new ClassificationExpression(e, op, n);
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public String ClassificationOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
      break;
    case HASTYPE:
      t = jj_consume_token(HASTYPE);
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* EQUALITY OPERATORS */
  static final public Expression EqualityExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ EqualityExpression EqualityOperator ] RelationalExpression
    */
    
      u = UnaryExpression();
    e = ClassificationExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression EqualityExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = ClassificationExpressionCompletion(u);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_28;
      }
      op = EqualityOperator();
      e2 = ClassificationExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String EqualityOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* LOGICAL OPERATORS */
  static final public Expression AndExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ AndExpression() <LOGICAL_AND> ] UnaryExpression() EqualityExpression()
    */
    
      u = UnaryExpression();
    e = AndExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression AndExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = EqualityExpressionCompletion(u);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
        ;
        break;
      default:
        jj_la1[134] = jj_gen;
        break label_29;
      }
      jj_consume_token(LOGICAL_AND);
      e2 = EqualityExpression();
      e1 = new BinaryExpression(e1, "&", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExclusiveOrExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ ExclusiveOrExpression() <XOR> ] AndExpression()
    */
    
      u = UnaryExpression();
    e = ExclusiveOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression ExclusiveOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = AndExpressionCompletion(u);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_30;
      }
      jj_consume_token(XOR);
      e2 = AndExpression();
      e1 = new BinaryExpression(e1, "^", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression InclusiveOrExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ InclusiveOrExpression() <LOGICAL_OR> ] ExclusiveOrExpression()
    */
    
      u = UnaryExpression();
    e = InclusiveOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression InclusiveOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = ExclusiveOrExpressionCompletion(u);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_31;
      }
      jj_consume_token(LOGICAL_OR);
      e2 = ExclusiveOrExpression();
      e1 = new BinaryExpression(e1, "|", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL-AND OPERATOR */
  static final public Expression ConditionalAndExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ ConditionalAndExpression() <SC_AND> ]  InclusiveOrExpression()
    */
    
      u = UnaryExpression();
    e = ConditionalAndExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression ConditionalAndExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = InclusiveOrExpressionCompletion(u);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_32;
      }
      jj_consume_token(SC_AND);
      e2 = InclusiveOrExpression();
      e1 = new ConditionalBinaryExpression(e1, "&&", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL-OR OPERATOR */
  static final public Expression ConditionalOrExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      [ ConditionalOrExpression() <SC_OR> ] ConditionalAndExpression()
    */
    
      u = UnaryExpression();
    e = ConditionalOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression ConditionalOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = ConditionalAndExpressionCompletion(u);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_33;
      }
      jj_consume_token(SC_OR);
      e2 = ConditionalAndExpression();
      e1 = new ConditionalBinaryExpression(e1, "||", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL-TEST OPERATOR */
  static final public Expression ConditionalExpression() throws ParseException {
  Expression u;
  Expression e;
    /* ORIGINAL
      ConditionalOrExpression() [ <HOOK> Expression() <COLON> ConditionalExpression() ]
    */
    
      u = UnaryExpression();
    e = ConditionalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* ADDED */
  static final public Expression ConditionalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
  Expression e3;
    e1 = ConditionalOrExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      e2 = Expression();
      jj_consume_token(COLON);
      e3 = ConditionalExpression();
      e1 = new ConditionalExpression(e1, e2, e3);
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* ASSIGNMENT OPERATORS */

/* ORIGINAL
void AssignmentExpression():
{}
{
  LeftHandSide() AssignmentOperator() Expression()
}

void LeftHandSide():
{}
{
  QualifiedName()
| FeatureReference() [ Index() ]
}
*/

/* ADDED */
  static final public Expression Assignment(LeftHandSide lhs) throws ParseException {
  String op;
  Expression e;
    op = AssignmentOperator();
    e = Expression();
    {if (true) return new AssignmentExpression(lhs, op, e);}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_3R_240() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_3R_240()) return true;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ALL_INSTANCES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DESTROY)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(ACTIVE)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ALL_INSTANCES)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_184()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_3R_55()) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_249() {
    if (jj_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_3R_164()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_3R_118()) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(SPECIALIZES)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_3R_191()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DESTROY)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DESTROY)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_3R_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_3R_191()) return true;
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_119()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(ACTIVITY)) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_3R_219()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_3R_191()) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_238() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_219() {
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(RECEIVE)) return true;
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_3R_191()) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(RECEIVE)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_251()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_124()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(THICK_ARROW)) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_3R_191()) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(DESTROY)) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_3R_268()) return true;
    if (jj_3R_269()) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    if (jj_3R_258()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(DOCUMENTATION_COMMENT)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_3R_191()) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  static private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_267() {
    if (jj_3R_275()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_3R_266()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_3R_242()) return true;
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_3R_191()) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_123()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DESTROY)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(NATURAL_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_3R_241()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_3R_279()) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_3R_230()) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_3R_273()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_3R_229()) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_3R_226()) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(REDEFINES)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_3R_225()) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_3R_54()) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_scan_token(DOCUMENTATION_COMMENT)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_3R_283()) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_3R_232()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_3R_171()) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_3R_112()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_3R_277()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_3R_111()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_3R_110()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_59()) return true;
    if (jj_3R_231()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_3R_191()) return true;
    if (jj_3R_273()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_122()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_3R_94()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_157()) return true;
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_3R_62()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    if (jj_3R_94()) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_scan_token(NONUNIQUE)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    if (jj_3R_142()) return true;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_3R_285()) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_277() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_3R_94()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_284() {
    if (jj_3R_191()) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    return false;
  }

  static private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    return false;
  }

  static private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_3R_211()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(NATURAL_LITERAL)) return true;
    if (jj_scan_token(DOUBLE_DOT)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_152()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_150()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_54()) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(ORDERED)) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(COLLECTION_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_3R_86()) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_3R_85()) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_3R_177()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_175()) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_174()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_3R_177()) return true;
    return false;
  }

  static private boolean jj_3R_216() {
    if (jj_3R_236()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_3R_192()) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_3R_175()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_3R_174()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_248() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_3R_249()) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_271() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_271()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(THICK_ARROW)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(ASSOC)) return true;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_257() {
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    if (jj_3R_265()) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(DATATYPE)) return true;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AlfParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[141];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x24680000,0x0,0x0,0x0,0x0,0x20000,0x2000000,0x2000000,0x20000,0x20000,0x24680000,0x24680000,0x0,0x400000,0x0,0x400000,0x80000,0x0,0x0,0x246a0000,0x20000,0x0,0x80000,0x80000,0x0,0x246a0000,0x0,0x0,0x20000,0x0,0x24680000,0x0,0x80000,0x0,0x20000,0x20000,0x0,0x80000,0x0,0x0,0x0,0x20000,0x80000,0x0,0x80000,0x80000,0x0,0x0,0x80000000,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x20000,0x0,0x20000,0x0,0x20000,0x20000,0x0,0x20000,0x0,0x0,0x0,0x49120000,0x20000,0x49100000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80400042,0x3800000,0x2800000,0x8000,0x2800000,0x0,0x0,0x0,0x2800000,0x0,0x80400042,0x80400042,0x40,0x0,0x40,0x0,0x0,0x20000000,0x0,0x8380004b,0x0,0x3800000,0x9,0x0,0x20000000,0x8780004b,0x10,0x0,0x0,0x3800000,0x8000004b,0x4000000,0x0,0x20000000,0x2000000,0x0,0x2000000,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x20000000,0x9,0x9,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x20000,0x0,0x0,0x0,0x8000000,0x203000,0x0,0x0,0x203000,0x40000000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x50050490,0x0,0x50050490,0x0,0x0,0x20,0x80000,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x100,0x100,0x40050000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40010000,0x0,0x0,0x40050000,0x0,0x0,0x0,0x40010000,0x0,0x0,0x0,0x40050000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40050000,0x40050000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4200,0x4200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x220,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x220,0x0,0x0,0x220,0x0,0x0,0x220,0x0,0x80220,0x0,0x0,0x220,0x0,0x0,0x0,0x220,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x220,0x220,0x0,0x80000000,0x0,0x200000,0x0,0x10000230,0x10000220,0x4000,0x0,0x0,0x4000,0x0,0x8000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x8000000,0x108ae22b,0x0,0x108ae22b,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x8,0x4000000,0x880000,0x0,0x4,0x0,0x4,0x1002e222,0x200000,0x220000,0x200000,0x2000000,0x20000000,0x2000000,0xe000,0x10020222,0xe000,0x20000,0x1002e222,0x1000000,0x1000000,0x0,0x1002e222,0x2000000,0x20200000,0x4000,0x1002e222,0x10000220,0x1000000,0x4000000,0x20000,0x1000000,0x200000,0x0,0x0,0x1002e222,0x1002e222,0x1002e222,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8001f034,0x0,0x8001f034,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80010000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x80000000,0x10000,0x0,0x8001f024,0x0,0x0,0x80000000,0x80010000,0x0,0x0,0x10000,0x8001f024,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x3000,0x8001f024,0x80010024,0x80010024,0xf024,0xc000,0x230000,0x230000,0xc000,0xc000,0x183,0x183,0x0,0x0,0x240,0x240,0x40000,0x100000,0x80000,0x800,0x400,0x8,0x7f800000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[42];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AlfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AlfParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AlfParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AlfParser(AlfParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AlfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 141; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[129];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 141; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 42; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
