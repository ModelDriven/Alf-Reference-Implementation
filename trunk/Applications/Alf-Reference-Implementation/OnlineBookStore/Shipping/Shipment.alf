namespace Shipping;

/**
A Shipment is prepared to send a customer's product selections to the 
customer.
**/
active class Shipment {

  /**
  A unique ID assigned by the bookstore to the shipment.
  */
  public shipmentID: arbitrary_id = Shipment->size();
  
  /**
  The shipping company who delivers the shipment. This attribute, together
  with the trackingNumber, also uniquely identifies a shipment.
  */
  public shippingCompany: String;
  
  /**
  The package tracking number (sometimes called the "Airbill Number") assigned
  to the shipment by the package delivery company.
  */
  public trackingNumber: ShipmentTrackingNumber;
  
  /**
  The customer to whom the shipment will be delivered;
  */
  public recipient: PersonalName;
  
  /**
  Where to deliver the order (the address on the shipment).
  */
  public deliveryAddress: MailingAddress;
  
  /**
  A telephoone number used to contact the customer about the shipment.
  */
  public contactPhone: TelephoneNumber;
  
  /**
  When the shipment was prepared (the box was packed and made ready for
  shipment).
  */
  public timePrepared: date;
  
  /**
  When the package delivery company picks up the shipment from the bookstore
  shipping department.
  */
  public timePickedUp: date;
  
  /**
  The time that the package delivery company delivers the shipment to the
  customer, as reported by the package delivery company.
  */
  public timeDelivered: date;
  
  /**
  True when a shipment is ready to be packed. This attribute is used by the
  Warehouse (Shipment assigner).
  */
  waitingToBePacked: Boolean;
  
  /*
   * Signal receptions
   */

  public receive signal RequestShipment {
    public order: Order;
  }
  
  public receive signal Packed {
    public clerk: ShippingClerk;
  }
  
  public receive signal TrackingNumberAssigned {
    public shippingCompany: String;
    public trackingNumber: ShipmentTrackingNumber;
  }
  
  public receive signal PickedUp {
  }
  
  public receive signal DeliveryConfirmed {
    public timeDelivered: date;
  }
  
  /**
  External entity references.
  */
  private EE: ExternalEntities = ExternalEntities::GetInstance();
  
  /*
   * State entry behaviors
   */
  
  private '1. Preparing Shipment'(in rcvd_evt: RequestShipment) {
    //@isolated
    {
    
    R6.createLink(rcvd_evt.order, this);
    
    this.recipient = rcvd_evt.order.recipient;
    this.deliveryAddress = rcvd_evt.order.deliveryAddress;
    this.contactPhone = rcvd_evt.order.contactPhone;
    this.waitingToBePacked = true;
    
    warehouseName = this.EE.logistics.assignWarehouse(this.shipmentID);
    warehouse = Warehouse->select selected (
      selected.warehouseName == warehouseName)[1];
    R24.createLink(this, warehouse);
    
    // Notify a shipping clerk to pack the order.
    warehouse.ShipmentReadyToPack();
    
    }
  }
  
  private '2. Packed and Awaiting Tracking Number'(in rcvd_evt: Packed) {
    //@isolated
    {
    this.timePrepared = TIM::current_date();
    
    // Relate the shipment to the clerk who packed it.
    R22.createLink(rcvd_evt.clerk, this);
    
    // Notify the shipping company to come pick up the shipment.
    this.EE.shippingCompany.ShipmentReadyForPickup();
    
    }
  }
  
  private '3. In Transit to Customer'(in rcvd_evt: PickedUp) {
    //@isolated
    {
    
    this.timePickedUp = TIM::current_date();
    
    }
  }
  
  private '4. Delivered'(in rcvd_evt: DeliveryConfirmed) {
    //@isolated
    {
    
    this.timeDelivered = rcvd_evt.timeDelivered;
    
    order = this.'delivers contents of';
    order.OrderDelivered();
    
    }
  }
  
  private '5. Number Assigned and Waiting to be Packed'(
    in rcvd_evt: TrackingNumberAssigned) {
    //@isolated
    {
    
    this.trackingNumber = rcvd_evt.trackingNumber;
    
    // Relate the shipment to the selected shipping company.
    shippingCompany = ShippingCompany->select selected (
      selected.companyName == rcvd_evt.shippingCompany)[1];
    R21.createLink(shippingCompany, this);
    
    }
  }
  
  private '6. Packed'(in rcvd_evt: Packed) {
    //@isolated
    {
    
    this.timePrepared = TIM::current_date();
    
    // Relate the shipment to the clerk who packed it.
    R22.createLink(rcvd_evt.clerk, this);
    
    // Notify the shipping company to come pick up the shipment.
    this.EE.shippingCompany.ShipmentReadyForPickup();

    }    
  }
  
  private '7. Number Assigned'(in rcvd_evt: TrackingNumberAssigned) {
    //@isolated
    {
    
    this.trackingNumber = rcvd_evt.trackingNumber;
    
    // Relate the shipment to the selected shipping company.
    shippingCompany = ShippingCompany->select selected (
      selected.companyName == rcvd_evt.shippingCompany)[1];
    R21.createLink(shippingCompany, this);
    
    }
  }
  
} do {

  accept (requestShipment: RequestShipment);
  this.'1. Preparing Shipment'(requestShipment);
  
  accept (packed: Packed) {
    this.'2. Packed and Awaiting Tracking Number'(packed);
    
    accept (trackingNumberAssigned: TrackingNumberAssigned) {
      this.'7. Number Assigned'(trackingNumberAssigned);
    }
    
  } or accept (trackingNumberAssigned: TrackingNumberAssigned) {
    this.'5. Number Assigned and Waiting to be Packed'(trackingNumberAssigned);
    
    accept (packed: Packed) {
      this.'6. Packed'(packed);
    }
    
  }
  
  accept (pickedUp: PickedUp);
  this.'3. In Transit to Customer'(pickedUp);
  
  accept (deliveryConfirmed: DeliveryConfirmed);
  this.'4. Delivered'(deliveryConfirmed);
    
}
