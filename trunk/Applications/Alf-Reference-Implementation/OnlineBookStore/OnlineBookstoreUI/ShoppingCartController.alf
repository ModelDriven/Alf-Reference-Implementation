namespace OnlineBookstoreUI;

private import Ordering::*;

active class ShoppingCartController specializes Controller {

  public cart: ShoppingCart[0..1];
  public EE: ExternalEntities = ExternalEntities::GetInstance();

  @Create
  public ShoppingCartController(in cartID: arbitrary_id[0..1]) {
    if (cartID != null) {
      this.cart = ShoppingCart->select s (s.cartID == cartID)[1];
      this.EE.onlineCustomer.registerForCart(this, cartID);
    }
  }
  
  public receive signal AddProduct {
    public productID: UniversalProductCode;
    public quantity: Count;
  }
  
  public receive signal Home {
  }
  
  public receive signal Cancel {
    public isConfirmed: Boolean;
  }
  
  public receive signal CheckOut {
    public customerEmail: String[0..1];
  }
  
  public receive signal ChangeQuantity {
    public choice: Integer;
    public quantity: Count[0..1];
  }
  
  private addProduct(
    in productID: UniversalProductCode,
    in quantity: Count
  ) {
    if (this.cart->isEmpty()) {
      this.cart = new ShoppingCart();
      this.EE.onlineCustomer.registerForCart(this, this.cart.cartID);
      this.cart.StartCart(productID, quantity);
    } else {
      this.cart.AddSelection(productID, quantity);
    }
  }
  
  private displayView() {
    if (this.cart->isEmpty()) {
      new EmptyCartView(this);
    } else {
      new ShoppingCartView(this);
    }
  }
  
} do {

  accept (Display) {
  } or accept (event:AddProduct) {
    this.addProduct(event.productID, event.quantity);
    accept (Notification);
  }  
  
  continue = true;
  do {
    this.displayView();
    
    accept (Exit) {
      continue = false;
    } or accept (Home) {
      new HomeController(this.cart.cartID).Display();
      continue = false;
    } or accept (event: CheckOut) {
      if (event.customerEmail->notEmpty()) {
        new CheckOutController(event.customerEmail, this.cart.cartID).Display();
        continue = false;
      }
    } or accept (event: Cancel) {
      if (event.isConfirmed) {
        this.cart.Cancel();
        accept (Notification);
        this.EE.onlineCustomer.unregisterForCart(this, this.cart.cartID);
        this.cart = null;
      }
    } or accept (event: ChangeQuantity) {
      if (event.quantity->notEmpty()) {
        this.cart.'includes selection'->at(event.choice).
          ChangeQuantity(event.quantity);
        accept (Notification);
      }
    }
    
    this.view.destroy();
    
  } while (continue);
  
  if (this.cart->notEmpty()) {
    this.EE.onlineCustomer.unregisterForCart(this, this.cart.cartID);
  }
}