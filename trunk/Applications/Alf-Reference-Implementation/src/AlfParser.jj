/*
   Parser for the 
   Action Language for Foundational UML (Alf)
   Version 0.09

   with construction of the Abstract Syntax Tree
   
   Written by
   Ed Seidewitz / Model Driven Solutions
   
   Copyright (c) 2010 Data Access Technologies, Inc.
*/

options {
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  OUTPUT_DIRECTORY="org/modeldriven/alf/parser";
  STATIC=false;
}

PARSER_BEGIN(AlfParser)

package org.modeldriven.alf.parser;

import org.modeldriven.alf.syntax.expressions.*;
import org.modeldriven.alf.syntax.statements.*;
import org.modeldriven.alf.syntax.units.*;

import java.util.ArrayList;

public class AlfParser {

  public static final String version = "0.09";

  private static void completeSubunits(NamespaceDefinition namespace) {
    for (Member member: namespace.getMembers()) {
      if (member instanceof NamespaceDefinition) {
        member.completeStub();
        completeSubunits((NamespaceDefinition)member);
      }
    }
  }
  
  public static UnitDefinition parse(String fileName) {
    AlfParser parser;
    
    if (fileName == null) {
      System.out.println("Reading from standard input...");
      parser = new AlfParser(System.in);
    } else {
      System.out.println("Parsing " + fileName + "...");
      try {
        parser = new AlfParser(new java.io.FileInputStream(fileName));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File not found: " + fileName);
        return null;
      }
    }
    try {
      UnitDefinition unit = parser.UnitDefinition();
      System.out.println("Parsed successfully.");
      return unit;

    } catch (Throwable e) {
      System.out.println(e.getMessage());
      if (e.getMessage()==null) {
        e.printStackTrace();
      }
      System.out.println("Encountered errors during parse.");
      return null;
    }

  }
  
  public static void main(String args[]) {
    UnitDefinition unit;
    Boolean complete;
    
    System.out.println("Alf " + version + " Parser");

    if (args.length == 0 || args.length == 1 && args[0].equals("-complete")) {
      unit = parse(null);
      complete = args.length == 1;
    } else if (args.length == 1 || args.length == 2 && args[0].equals("-complete")) {
      unit = parse(args[args.length-1]);
      complete = args.length == 2;
    } else {
      System.out.println("Usage is");
      System.out.println("         alfp [ -complete ] < inputfile");
      System.out.println("OR");
      System.out.println("         alfp [ -complete ] inputfile");
      return;
    }

    if (unit != null) {
      if (!complete) {
        unit.print();
      } else {
        unit.addImplicitImports();
        
        // Ensure all imports are resolved.
        unit.getDefinition().getAllMembers();
        
        // Recursively complete subunits.
        completeSubunits(unit.getDefinition());
        
        unit.getModelNamespace().print();
      }
    }
      
    /*
    ArrayList<Member> members = unit.getAllMembers();
    System.out.println(unit.toString());
    for (Member member: members) {
      if (member.isError()) {
        member.printChild("");
      } else {
        System.out.println(member.toString(" "));
      }
    }
    */
  }
}

PARSER_END(AlfParser)

/*********************
 * LEXICAL STRUCTURE *
 *********************/

/* WHITE SPACE */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
SKIP :
{
  " "
| "\t"
| "\f"
}

SKIP:
{
  "\n"
| "\r"
}

/* STATEMENT ANNOTATIONS */

TOKEN:
{
  < SLASH_SLASH_AT: "//@" >: IN_STATEMENT_ANNOTATION
|
  < SLASH_STAR_AT: "/*@" >: IN_IN_LINE_ANNOTATION
}

<IN_STATEMENT_ANNOTATION>
TOKEN:
{
  < EOL: ( "//" ( ~["\n","\r"] )* )? ( "\n" | "\r" ("\n")? ) >: DEFAULT
}

<IN_IN_LINE_ANNOTATION>
SKIP:
{
  < ( "//" ( ~["\n","\r"] )* )? ( "\n" | "\r" ("\n")? ) >: IN_DOCUMENTATION_COMMENT
}

/* COMMENTS */

SKIP:
{
  < "/**" ~["/"] > { input_stream.backup(1); }: IN_DOCUMENTATION_COMMENT
}

MORE:
{
  "//": IN_END_OF_LINE_COMMENT
|
  < "/*" >: IN_IN_LINE_COMMENT
}


<IN_END_OF_LINE_COMMENT>
SKIP:
{
  < END_OF_LINE_COMMENT: "\n" | "\r" ("\n")? >: DEFAULT
}

<IN_END_OF_LINE_COMMENT>
MORE:
{
  < ~[] >
}

<IN_IN_LINE_COMMENT>
MORE:
{
  < ~["*"]>
|
  "*": IN_IN_LINE_COMMENT_STAR
}

<IN_IN_LINE_COMMENT_STAR>
MORE:
{
  < ~["/"] >: IN_IN_LINE_COMMENT
}

<IN_IN_LINE_COMMENT_STAR>
SKIP:
{
  < IN_LINE_COMMENT: "/" >: DEFAULT
}

<IN_DOCUMENTATION_COMMENT>
MORE:
{
  < ~["*"]>
|
  "*": IN_DOCUMENTATION_COMMENT_STAR
}

<IN_DOCUMENTATION_COMMENT_STAR>
TOKEN:
{
  < DOCUMENTATION_COMMENT: "/" > { String t = matchedToken.image; matchedToken.image = t.substring(0, t.length()-2); }: DEFAULT
}

<IN_DOCUMENTATION_COMMENT_STAR>
MORE:
{
  < ~["/"] >: IN_DOCUMENTATION_COMMENT
}

/* RESERVED WORDS */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
TOKEN:
{
  < ABSTRACT: "abstract" > 
| < ACCEPT: "accept" >
| < ACTIVE: "active" >
| < ACTIVITY: "activity" >
| < ALL_INSTANCES: "allInstances" >
| < ANY: "any" >
| < AS: "as" >
| < ASSOC: "assoc" >
| < BREAK: "break" >
| < CASE: "case" >
| < CLASS: "class" >
| < CLASSIFY: "classify" >
| < CLEAR_ASSOC: "clearAssoc" >
| < COMPOSE: "compose" >
| < CREATE_LINK: "createLink" >
| < DATATYPE: "datatype" >
| < DEFAULT_: "default" >
| < DESTROY_LINK: "destroyLink" >
| < DO: "do">
| < ELSE: "else">
| < ENUM: "enum">
| < FOR: "for" >
| < FROM: "from" >
| < HASTYPE: "hastype">
| < IF: "if" >
| < IMPORT: "import" >
| < IN: "in">
| < INOUT: "inout" >
| < INSTANCEOF: "instanceof" >
| < LET: "let" >
| < NAMESPACE: "namespace" >
| < NEW: "new" >
| < NONUNIQUE: "nonunique" >
| < NULL: "null" >
| < OR: "or" >
| < ORDERED: "ordered" >
| < OUT: "out" >
| < PACKAGE: "package" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RECEIVE: "receive" >
| < REDEFINES: "redefines" >
| < REDUCE: "reduce" >
| < RETURN: "return" >
| < SPECIALIZES: "specializes" >
| < SUPER: "super" >
| < SIGNAL: "signal" >
| < SWITCH: "switch" >
| < THIS: "this" >
| < TO: "to" >
| < WHILE: "while" >
}

/* NAMES */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
TOKEN:
{
  < IDENTIFIER: <IDENTIFIER_LETTER> ( <IDENTIFIER_LETTER_OR_DIGIT> ) * >
|
  < #IDENTIFIER_LETTER_OR_DIGIT: <IDENTIFIER_LETTER> | <DIGIT> >
|
  < #IDENTIFIER_LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < #DIGIT: [ "0"-"9" ] >
|
  < UNRESTRICTED_NAME: "'" ( <NAME_CHARACTER> )+ "'" >
|
  < #NAME_CHARACTER: ~[ "'", "\\" ] | <ESCAPE_CHARACTER> >
|
  < #ESCAPE_CHARACTER: "\\" <ESCAPED_CHARACTER> >
|
  < #ESCAPED_CHARACTER: [ "'", "\"", "b", "f", "n", "\\" ] >
}

/* PRIMITIVE LITERALS */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
TOKEN:
{
  < BOOLEAN_LITERAL: "true" | "false" >
|
  < NATURAL_LITERAL: ( <DIGIT> )+ >
|
  < STRING_LITERAL: "\"" ( <STRING_CHARACTER> )* "\"" >
|
  < #STRING_CHARACTER: ~["\"", "\\"] >
}

/* PUNCTUATION */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < DOUBLE_DOT: ".." >
| < COLON: ":" >
| < DOUBLE_COLON: "::" >
| < ARROW: "->" >
| < THICK_ARROW: "=>" >
}

/* OPERATORS */

<DEFAULT, IN_STATEMENT_ANNOTATION, IN_IN_LINE_ANNOTATION>
TOKEN:
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < HOOK: "?" >
| < AT: "@" >
| < DOLLAR: "$" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < LOGICAL_AND: "&" >
| < LOGICAL_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
}

/***************
 *    NAMES    *
 ***************/

String Name():
{
  Token t;
}
{
  (  
    t = <IDENTIFIER>
  | t = <UNRESTRICTED_NAME> 
  )

  { return t.image; }
}

QualifiedName QualifiedName():
{
  QualifiedName q;
}
{

  q = UnqualifiedName()
  [ LOOKAHEAD(2) (
    ColonQualifiedNameCompletion(q)
  | DotQualifiedNameCompletion(q)
  ) ]
  
  { return q; }
}

QualifiedName PotentiallyAmbiguousQualifiedName():
{
  QualifiedName q;
}
{
  
  q = UnqualifiedName()
  [ LOOKAHEAD(2) (
    ColonQualifiedNameCompletion(q)
  | DotQualifiedNameCompletion(q)  { q.setIsAmbiguous(); } /* AMBIGUOUS */
  ) ]

  { return q; }
}

QualifiedName ColonQualifiedName():
{
  QualifiedName q = new QualifiedName();
}
{
  q = UnqualifiedName() ColonQualifiedNameCompletion(q)
  
  { return q; }
} 
  
void ColonQualifiedNameCompletion(QualifiedName q):
{
  NameBinding n;
}
{
  ( LOOKAHEAD(2) <DOUBLE_COLON> n = NameBinding() { q.addNameBinding(n); } )+ 
}

QualifiedName DotQualifiedName():
{
  QualifiedName q = new QualifiedName();
}
{
  q = UnqualifiedName() DotQualifiedNameCompletion(q)
  
  { return q; }
} 

void DotQualifiedNameCompletion(QualifiedName q):
{
  NameBinding n;
}
{
  ( LOOKAHEAD(2) <DOT> n = NameBinding() { q.addNameBinding(n); } )+ 
}

QualifiedName UnqualifiedName():
{
  QualifiedName q = new QualifiedName();
  NameBinding n;
}
{
  n = NameBinding() 
  { q.addNameBinding(n); 
    return q; }
}

NameBinding NameBinding():
{
  String n;
  TemplateBinding tb;
  NameBinding nb = new NameBinding();
}
{
  n = Name() { nb.setName(n); }
  [ LOOKAHEAD(TemplateBindingLookahead()) /* Unbounded lookahead */
    tb = TemplateBinding() { nb.setBinding(tb); } ]
  
  { return nb; }
}

void TemplateBindingLookahead():
{ }
{
  <LT> 
  ( LOOKAHEAD(2) QualifiedName() ( <COMMA> | <GT> )
  | Name() <THICK_ARROW>
  ) 
}

TemplateBinding TemplateBinding():
{
  TemplateBinding b;
  QualifiedName q;
}
{
  <LT>
  ( LOOKAHEAD(2) b = NamedTemplateBinding()
  | b = PositionalTemplateBinding()
  )
  <GT>
  
  { return b; }
}

PositionalTemplateBinding PositionalTemplateBinding():
{
  QualifiedName q;
  PositionalTemplateBinding b = new PositionalTemplateBinding();
}
{
  q = QualifiedName() { b.addArgumentName(q); }
  ( <COMMA> q = QualifiedName() { b.addArgumentName(q); } )* 
  { return b; }
}

NamedTemplateBinding NamedTemplateBinding():
{
  TemplateParameterSubstitution s;
  NamedTemplateBinding b = new NamedTemplateBinding();
}
{
  s = TemplateParameterSubstitution() { b.addSubstitution(s); }
  ( <COMMA> s = TemplateParameterSubstitution() { b.addSubstitution(s); } )* 
  
  { return b; }
}

TemplateParameterSubstitution TemplateParameterSubstitution():
{
  String n;
  QualifiedName q;
  TemplateParameterSubstitution s = new TemplateParameterSubstitution();
}
{
  n = Name() <THICK_ARROW> q = QualifiedName() 
  
  { s.setParameterName(n);
    s.setArgumentName(q); 
    return s;
  }
}

/***************
 * EXPRESSIONS *
 ***************/

Expression Expression():
{
  QualifiedName q;
  Expression e;
}
{
  ( q = PotentiallyAmbiguousQualifiedName() e = NameToExpressionCompletion(q)
  | e = NonNameExpression()
  )
  
  { return e; }
}

Expression NonNameExpression():
{
  QualifiedName q;
  String n;
  Expression e1;
  Expression e2;
}
{
  (
    <LPAREN>
    ( LOOKAHEAD(2)
      <ANY> <RPAREN> e1 = CastCompletion(null) e2 = ConditionalExpressionCompletion(e1)
    | q = PotentiallyAmbiguousQualifiedName()
      ( LOOKAHEAD(2)
         <RPAREN> e1 = CastCompletion(q) e2 = ConditionalExpressionCompletion(e1)
      | e1 = NameToExpressionCompletion(q) <RPAREN> e2 = ExpressionCompletion(e1)
      )
    | e1 = NonNameExpression() <RPAREN> e2 = ExpressionCompletion(e1)
    )
  | e1 = NonPostfixNonCastUnaryExpression() e2 = ConditionalExpressionCompletion(e1)
  | e1 = BaseExpression() e2 = ExpressionCompletion(e1)
  )
  
  { return e2; }
}

Expression ExpressionCompletion(Expression p):
{
  Expression i;
  Expression e;
}
{
  (
    i = Index() e = ExpressionCompletion(new SequenceAccessExpression(p, i))
  | e = NonIndexExpressionCompletion(p)
  )
  
  { return e; }
}

Expression NonIndexExpressionCompletion(Expression p):
{
  Expression e;
  FeatureReference f;
}
{
  (
    LOOKAHEAD(2) 
    f = Feature(p) e = FeatureToExpressionCompletion(f)
  | e = SequenceOperationOrReductionOrExpansion(p) e = ExpressionCompletion(e)
  | e = ConditionalExpressionCompletion(p)
  )
  
  { return e; }
}

Expression NameToExpressionCompletion(QualifiedName q):
{
  Expression e1;
  Expression e2;
}
{
  ( 
    e2 = PostfixOperationOrAssignment(new NameLeftHandSide(q, null))
  | LOOKAHEAD(2) e1 = NameToPrimaryExpressionCompletion(q) e2 = ExpressionCompletion(e1)
  | e1 = Index()
    ( e2 = PostfixOperationOrAssignment(new NameLeftHandSide(q, e1))
    | e2 = ExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), e1))
    )
  | e2 = NonIndexExpressionCompletion(new NameExpression(q))
  )
  
  { return e2; }
}

Expression FeatureToExpressionCompletion(FeatureReference f):
{
  Expression e1;
  Expression e2;
}
{
  (
    e2 = PostfixOperationOrAssignment(new FeatureLeftHandSide(f, null))
  | e1 = Index()
    ( e2 = PostfixOperationOrAssignment(new FeatureLeftHandSide(f, e1))
    | e2 = ExpressionCompletion(new SequenceAccessExpression(f, e1))
    )
  | e1 = FeatureInvocation(f) e2 = ExpressionCompletion(e1)
  | e2 = NonIndexExpressionCompletion(f)
  )
  
  { return e2; }
}

/* PRIMARY EXPRESSIONS */

Expression BaseExpression():
{
  Expression e;
}
{
  ( 
    e = LiteralExpression()
  | e = ThisExpression()
  | e = SuperInvocationExpression()
  | e = InstanceCreationOrSequenceConstructionExpression()
  | e = SequenceAnyExpression()
  )

  { return e; }
}

Expression NameToPrimaryExpressionCompletion(QualifiedName q):
{
  Expression e;
}
{
  (
    <DOT> ( e = LinkOperationCompletion(q)
          | e = ClassExtentExpressionCompletion(q)
          )
  | e = SequenceConstructionExpressionCompletion(q)
  | e = BehaviorInvocation(q)
  )
  
  { return e; }
}

Expression PrimaryExpressionCompletion(Expression e):
{}
{
  ( LOOKAHEAD(2) e = PrimaryModifier(e) )*
  { return e; }
}
  
Expression PrimaryModifier(Expression p):
{
  Expression i;
  Expression e;
}
{
  (
    e = Feature(p) [ LOOKAHEAD(2) e = FeatureInvocation((FeatureReference)e) ]
  | e = SequenceOperationOrReductionOrExpansion(p)
  | i = Index() { e = new SequenceAccessExpression(p, i); }
  )
  
  { return e; }
}

/* LITERAL EXPRESSIONS */

Expression LiteralExpression():
{
  Token t;
  Expression e;
}
{
  (
    t = <BOOLEAN_LITERAL> { e = new BooleanLiteral(t.image); }
  | t = <NATURAL_LITERAL> { e = new NaturalLiteral(t.image); }
  | t = <STRING_LITERAL>  { e = new StringLiteral(t.image); }
  | t = <STAR>            { e = new UnboundedLiteral(); }
  )
  
  { return e; }
}

/* NAME EXPRESSIONS */

Expression NameOrPrimaryExpression():
{
  QualifiedName q;
  Expression e;
}
{
  q = PotentiallyAmbiguousQualifiedName() { e = new NameExpression(q); }
  [ LOOKAHEAD(2) e = NameToPrimaryExpressionCompletion(q) ]
  { return e; }
}

/* THIS EXPRESSIONS */

Expression ThisExpression():
{
  Tuple t;
  Expression e = new ThisExpression();
}
{
  <THIS> [ t = Tuple() { e = new FeatureInvocationExpression(new FeatureReference(e, null), t); } ]
  { return e; }
}

/* PARENTHESIZED EXPRESSIONS */

Expression ParenthesizedExpression():
{
  Expression e;
}
{
  <LPAREN> e = Expression() <RPAREN>
  { return e; }
}

/* PROPERTY ACCESS EXPRESSIONS */

FeatureReference Feature(Expression c):
{
  NameBinding n;
}
{
  <DOT> n = NameBinding()
  { return new FeatureReference(c, n); }
}

/* INVOCATION EXPRESSIONS */

Tuple Tuple():
{
  Tuple t = new PositionalTuple();
}
{
  <LPAREN>
  (
    LOOKAHEAD(2) 
    t = NamedTupleExpressionList()
  | [ t = PositionalTupleExpressionList() ]
  )
  <RPAREN>
  
  { return t; }
}

PositionalTuple PositionalTupleExpressionList():
{
  Expression e;
  PositionalTuple t = new PositionalTuple();
}
{
  e = Expression() { t.addExpression(e); }
  PositionalTupleExpressionListCompletion(t)
  
  { return t; }
}

void PositionalTupleExpressionListCompletion(PositionalTuple t):
{
  Expression e;
}
{  
  ( <COMMA> e = Expression() { t.addExpression(e); } )*
}

NamedTuple NamedTupleExpressionList():
{
  NamedTuple t = new NamedTuple();
  NamedExpression n;
}
{
  n = NamedExpression() { t.addExpression(n); }
  ( <COMMA> n = NamedExpression() { t.addExpression(n); } )*
  
  { return t; }
}

NamedExpression NamedExpression():
{
  String n;
  Expression e;
}
{
  n = Name() <THICK_ARROW> e = Expression()
  { return new NamedExpression(n, e); }
}

Expression BehaviorInvocation(QualifiedName n):
{
  Tuple t;
}
{
  t = Tuple() 
  { return new BehaviorInvocationExpression(n, t); }
}

Expression FeatureInvocation(FeatureReference f):
{
  Tuple t;
}
{
  t = Tuple()
  { return new FeatureInvocationExpression(f, t); }
}

Expression SuperInvocationExpression():
{
  QualifiedName n = null;
  Tuple t;
}
{
  <SUPER> [ <DOT> n = QualifiedName() ] t = Tuple() 
  { return new SuperInvocationExpression(n, t); }

}

/* INSTANCE CREATION EXPRESSIONS */

Expression InstanceCreationOrSequenceConstructionExpression():
{
  QualifiedName n;
  Tuple t;
  Expression e;
}
{
  <NEW> n = QualifiedName() 
  ( e = SequenceConstructionExpressionCompletion(n)
  | t = Tuple() { e = new InstanceCreationExpression(n, t); } )
  { return e; }
}

/* LINK OPERATION EXPRESSIONS */

Expression LinkOperationCompletion(QualifiedName q):
{
  String op;
  Tuple t;
}
{
  op = LinkOperation() t = LinkOperationTuple()
  { return new LinkOperationExpression(q, op, t); }
}

String LinkOperation():
{
  Token t;
}
{
  (
    t = <CREATE_LINK>
  | t = <DESTROY_LINK>
  | t = <CLEAR_ASSOC>
  )
  
  { return t.image; }
}


Tuple LinkOperationTuple():
{
  QualifiedName q;
  String n;
  Expression e;
  Expression i;
  Tuple t = new PositionalTuple();
}
{
  <LPAREN>
  [ LOOKAHEAD(2)
    t = LinkOperationPositionalTuple()
  | n = Name() { q = new QualifiedName(); q.addName(n); }
    ( i = Index() 
      ( <THICK_ARROW> t = IndexedNamedExpressionListCompletion(n, i)
      | e = ExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), i))
        { ((PositionalTuple)t).addExpression(e); } 
        PositionalTupleExpressionListCompletion((PositionalTuple)t)
      )
    | <THICK_ARROW> t = IndexedNamedExpressionListCompletion(n, null)
    | e = NonIndexExpressionCompletion(new NameExpression(q))
      { ((PositionalTuple)t).addExpression(e); } 
      PositionalTupleExpressionListCompletion((PositionalTuple)t)
    )
  ]
  <RPAREN>
  
  { return t; }
}

PositionalTuple LinkOperationPositionalTuple():
{
  QualifiedName q;
  Expression e;
  PositionalTuple t = new PositionalTuple();
}
{
  (
    ( LOOKAHEAD(2) 
      q = ColonQualifiedName()
    | q = DotQualifiedName() { q.setIsAmbiguous(); } /* AMBIGUOUS */
    ) 
    e = NameToExpressionCompletion(q) 
  | e = NonNameExpression() 
  )
  { t.addExpression(e); } PositionalTupleExpressionListCompletion(t) 
  
  { return t; }
}  

NamedTuple IndexedNamedExpressionListCompletion(String n, Expression i):
{
  NamedTuple t = new NamedTuple();
  Expression e;
  NamedExpression ne;
}
{
  e = Expression() { ne = new NamedExpression(n, i, e); t.addExpression(ne); }
  ( <COMMA> ne = IndexedNamedExpression() { t.addExpression(ne); } )*
  
  { return t; }
}

NamedExpression IndexedNamedExpression():
{
  String n;
  Expression i = null;
  Expression e;
}
{
  n = Name() [ i = Index() ] <THICK_ARROW> e = Expression()
  { return new NamedExpression(n, i, e); }
}

/* CLASS EXTENT EXPRESSIONS */

Expression ClassExtentExpressionCompletion(QualifiedName q):
{}
{
  <ALL_INSTANCES> <LPAREN> <RPAREN>
  { return new ClassExtentExpression(q); }
}

/* SEQUENCE CONSTRUCTION EXPRESSIONS */

Expression SequenceAnyExpression():
{
  Expression e;
}
{
  (
    <ANY> e = SequenceConstructionExpressionCompletion(null)
  | <NULL> { e = new SequenceConstructionExpression(); }
  )
  
  { return e; }
}

Expression SequenceConstructionExpressionCompletion(QualifiedName q):
{
  SequenceConstructionExpression e = new SequenceConstructionExpression();
  SequenceElements c;
}
{
  [ MultiplicityIndicator() { e.setHasMultiplicity(); } ]
  <LBRACE> [ c = SequenceElements() { e.setElements(c); } ] <RBRACE>
  { e.setTypeName(q); 
    return e; }
}

void MultiplicityIndicator():
{}
{
  <LBRACKET> <RBRACKET>
}

SequenceElements SequenceElements():
{
  SequenceElements c;
  Expression e1;
  Expression e2;
}
{
  (
    LOOKAHEAD(2) e1 = Expression() 
    ( <DOUBLE_DOT> e2 = Expression() { c = new SequenceRange(e1, e2); }
    | c = SequenceElementListCompletion(e1) )
  | e1 = SequenceInitializationExpression() c = SequenceElementListCompletion(e1)
  )
      
  { return c; }
}

SequenceElements SequenceElementListCompletion(Expression e1):
{
  SequenceExpressionList c = new SequenceExpressionList();
  Expression e2;
}
{
  { c.addElement(e1); }
  ( <COMMA> e2 = SequenceElement() { c.addElement(e2); } )*
  
  { return c; }
}

Expression SequenceElement():
{
  Expression e;
}
{
  ( LOOKAHEAD(2) e = Expression()
  | e = SequenceInitializationExpression()
  )
  
  { return e; }
}

Expression SequenceInitializationExpression():
{
  SequenceConstructionExpression e = new SequenceConstructionExpression();
  SequenceElements c;
}
{
  [ <NEW> ] <LBRACE> c = SequenceElements() <RBRACE>
  
  { e.setElements(c);
    return e;
  }
}

/* SEQUENCE ACCESS EXPRESSIONS */

Expression Index(): 
{
  Expression e;
}
{
  <LBRACKET> e = Expression() <RBRACKET>
  { return e; }
}

/* SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS */

Expression SequenceOperationOrReductionOrExpansion(Expression p):
{
  QualifiedName q;
  Token op;
  String n;
  Tuple t;
  Expression e;
  boolean ordered = false;
}
{
  <ARROW> 
  ( LOOKAHEAD(2) 
    q = QualifiedName() t = Tuple() 
    { e = new SequenceOperationExpression(p, q, t); }
  | <REDUCE> [ <ORDERED> { ordered = true; } ] q = QualifiedName() 
    { e = new SequenceReductionExpression(p, q, ordered); }
  | op = <IDENTIFIER> n = Name() t = Tuple() 
    { e = new SequenceExpansionExpression(p, op.image, n, t); }
  )
  
  { return e; }
}


/* INCREMENT OR DECREMENT EXPRESSIONS */

Expression PostfixOperationOrAssignment(LeftHandSide lhs):
{
  Expression e1;
  Expression e2;
}
{
  (
    e1 = PostfixOperation(lhs) e2 = ConditionalExpressionCompletion(e1)
  | e2 = Assignment(lhs)
  )
  
  { return e2; }
}

Expression PostfixOperation(LeftHandSide lhs):
{
  Expression e;
  String op;
}
{
  op = AffixOperator()
  { return new IncrementOrDecrementExpression(op, lhs); }
}

Expression PrefixExpression():
{
  String op;
  LeftHandSide lhs;
  IncrementOrDecrementExpression e;
}
{
  op = AffixOperator() lhs = LeftHandSide()
  
  { e = new IncrementOrDecrementExpression(op, lhs);
    e.setIsPrefix();
    return e;
  }
}

String AffixOperator():
{
  Token t;
}
{
  (
    t = <INCR>
  | t = <DECR>
  )
  
  { return t.image; }
}

/* UNARY EXPRESSIONS */


Expression UnaryExpression():
{
  Expression e;
}
{
  (
    e = PostfixOrCastExpression()
  | e = NonPostfixNonCastUnaryExpression()
  )
  
  { return e; }
}

Expression PostfixOrCastExpression():
{
  QualifiedName q;
  Expression e1;
  Expression e2;
}
{
  ( 
    q = PotentiallyAmbiguousQualifiedName() e2 = NameToPostfixExpressionCompletion(q)
  | <LPAREN>
    ( LOOKAHEAD(2)
      <ANY> <RPAREN> e2 = CastCompletion(null)
    | q = PotentiallyAmbiguousQualifiedName() 
      ( LOOKAHEAD(2)
        <RPAREN> e2 = CastCompletion(q)
      | e1 = NameToExpressionCompletion(q) <RPAREN> e2 = PrimaryExpressionCompletion(e1)
      )
    | e1 = NonNameExpression() <RPAREN> e2 = PrimaryExpressionCompletion(e1)
    )
  | e1 = BaseExpression() e2 = PostfixExpressionCompletion(e1)
  )
  
  { return e2; }
}

Expression PostfixExpressionCompletion(Expression p) :
{
  Expression i;
  Expression e;
}
{
  (
    i = Index() e = PostfixExpressionCompletion(new SequenceAccessExpression(p, i))
  | e = NonIndexPostfixExpressionCompletion(p)
  )
  
  { return e; }
}

Expression NonIndexPostfixExpressionCompletion(Expression p):
{
  Expression e = p;
  FeatureReference f;
}
{
  [
    LOOKAHEAD(2) 
    f = Feature(p) e = FeatureToPostfixExpressionCompletion(f)
  | e = SequenceOperationOrReductionOrExpansion(p) e = PostfixExpressionCompletion(e)
  ]
  
  { return e; }
}

Expression NameToPostfixExpressionCompletion(QualifiedName q):
{
  Expression e1;
  Expression e2;
}
{
  ( 
    e2 = PostfixOperation(new NameLeftHandSide(q, null))
  | LOOKAHEAD(2) e1 = NameToPrimaryExpressionCompletion(q) e2 = PostfixExpressionCompletion(e1)
  | e1 = Index()
    ( e2 = PostfixOperation(new NameLeftHandSide(q, e1))
    | e2 = PostfixExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), e1))
    )
  | e2 = NonIndexPostfixExpressionCompletion(new NameExpression(q))
  )
  
  { return e2; }
}

Expression FeatureToPostfixExpressionCompletion(FeatureReference f):
{
  Expression e1;
  Expression e2;
}
{
  (
    e2 = PostfixOperation(new FeatureLeftHandSide(f, null))
  | e1 = Index() 
    ( e2 = PostfixOperation(new FeatureLeftHandSide(f, e1))
    | e2 = PostfixExpressionCompletion(new SequenceAccessExpression(f, e1))
    )
  | e1 = FeatureInvocation(f) e2 = PostfixExpressionCompletion(e1)
  | e2 = NonIndexPostfixExpressionCompletion(f)
  )
  
  { return e2; }
}

Expression NonPostfixNonCastUnaryExpression():
{
  Expression e;
}
{
  (
    e = PrefixExpression()
  | e = NumericUnaryExpression()
  | e = BooleanNegationExpression()
  | e = IsolationExpression()
  )
  
  { return e; }
}

Expression BooleanNegationExpression():
{
  Expression e;
}
{
  <BANG> e = UnaryExpression()
  { return new UnaryExpression("!", e); }
}

Expression NumericUnaryExpression():
{
  String op;
  Expression e;
}
{
  op = NumericUnaryOperator() e = UnaryExpression()
  { return new UnaryExpression(op, e); }
}

String NumericUnaryOperator():
{
  Token t;
}
{
  (
    t = <PLUS>
  | t = <MINUS>
  )
	
  { return t.image; }
}

Expression IsolationExpression():
{
  Expression e;
}
{
  <DOLLAR> e = UnaryExpression()
  { return new UnaryExpression("$", e); }
}

Expression CastExpression():
{
  QualifiedName q;
  Expression e;
}
{
  <LPAREN> q = TypeName() <RPAREN> e = CastCompletion(q)
  { return e; }
}

Expression CastCompletion(QualifiedName q):
{
  Expression e;
}
{
  (
    e = PostfixOrCastExpression()
  | e = BooleanNegationExpression()
  | e = IsolationExpression()
  )
  
  { return new CastExpression(q, e); }
}

/* ARITHMETIC EXPRESSIONS */

Expression MultiplicativeExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = MultiplicativeExpressionCompletion(u)
  { return e; }
}

Expression MultiplicativeExpressionCompletion(Expression u):
{
  Expression e1 = u;
  String op;
  Expression e2;
}
{
  ( op = MultiplicativeOperator() e2 = UnaryExpression() 
    { e1 = new BinaryExpression(e1, op, e2); } )*
  { return e1; }
}

String MultiplicativeOperator():
{
  Token t;
}
{
  (
    t = <STAR>
  | t = <SLASH>
  | t = <REM>
  )
  
  { return t.image; }
}

Expression AdditiveExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = AdditiveExpressionCompletion(u)
  { return e; }
}

Expression AdditiveExpressionCompletion(Expression u):
{
  Expression e1;
  String op;
  Expression e2;
}
{
  e1 = MultiplicativeExpressionCompletion(u) 
  ( op = AdditiveOperator() e2 = MultiplicativeExpression() 
    { e1 = new BinaryExpression(e1, op, e2); } )*
  { return e1; }
}  

String AdditiveOperator():
{
  Token t;
}
{
  (
    t = <PLUS>
  | t = <MINUS>
  )
  
  { return t.image; }
}

/* RELATIONAL EXPRESSIONS */

Expression RelationalExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = RelationalExpressionCompletion(u)
  { return e; }
}

Expression RelationalExpressionCompletion(Expression u):
{
  Expression e1;
  String op;
  Expression e2;
  QualifiedName q;
  TemplateBinding b;
}
{
  e1 = AdditiveExpressionCompletion(u) 
  ( op = RelationalOperator() e2 = AdditiveExpression() 
    { e1 = new BinaryExpression(e1, op, e2); } )*
  
  { return e1; }
}

String RelationalOperator():
{
  Token t;
  String s;
}
{
  (
    t = <LT> { s = t.image; }
  | s = NonLTRelationalOperator()
  )
  
  { return s; }
}

String NonLTRelationalOperator():
{
  Token t;
}
{
  (
    t = <GT>
  | t = <LE>
  | t = <GE>
  )
  
  { return t.image; }
}

/* CLASSIFICATION EXPRESSIONS */

Expression ClassificationExpression():
{
  Expression u;
  Expression e;
}
{ 
  u = UnaryExpression() e = ClassificationExpressionCompletion(u)
  { return e; }
}

Expression ClassificationExpressionCompletion(Expression u):
{
  Expression e;
  String op;
  QualifiedName n;
}
{ 
  e = RelationalExpressionCompletion(u) 
  [ op = ClassificationOperator() n = QualifiedName()
    { e = new ClassificationExpression(e, op, n); } ]
  { return e; }
}

String ClassificationOperator():
{
  Token t;
}
{
  (
    t = <INSTANCEOF>
  | t = <HASTYPE>
  )

  { return t.image; }
}

/* EQUALITY EXPRESSIONS */

Expression EqualityExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = ClassificationExpressionCompletion(u)
  { return e; }
}

Expression EqualityExpressionCompletion(Expression u):
{
  Expression e1;
  String op;
  Expression e2;
}
{
  e1 = ClassificationExpressionCompletion(u) 
  ( op = EqualityOperator() e2 = ClassificationExpression() 
    { e1 = new BinaryExpression(e1, op, e2); } )*
  { return e1; }
}

String EqualityOperator():
{
  Token t;
}
{
  (
    t = <EQ>
  | t = <NE>
  )

  { return t.image; }
}

/* LOGICAL EXPRESSIONS */

Expression AndExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = AndExpressionCompletion(u)
  { return e; }
}

Expression AndExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
}
{
  e1 = EqualityExpressionCompletion(u) 
  ( <LOGICAL_AND> e2 = EqualityExpression() 
    { e1 = new BinaryExpression(e1, "&", e2); } )*
  { return e1; }
}

Expression ExclusiveOrExpression():
{
  Expression u;
  Expression e;
}
{ 
  u = UnaryExpression() e = ExclusiveOrExpressionCompletion(u)
  { return e; }
}

Expression ExclusiveOrExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
}
{
  e1 = AndExpressionCompletion(u) 
  ( <XOR> e2 = AndExpression() 
    { e1 = new BinaryExpression(e1, "^", e2); } )*
  { return e1; }
}

Expression InclusiveOrExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = InclusiveOrExpressionCompletion(u)
  { return e; }
}

Expression InclusiveOrExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
}
{
  e1 = ExclusiveOrExpressionCompletion(u) 
  ( <LOGICAL_OR> e2 = ExclusiveOrExpression() 
    { e1 = new BinaryExpression(e1, "|", e2); } )*
  { return e1; }
}

/* CONDITIONAL LOGICAL EXPRESSIONS */

Expression ConditionalAndExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = ConditionalAndExpressionCompletion(u)
  { return e; }
}

Expression ConditionalAndExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
}
{
  e1 = InclusiveOrExpressionCompletion(u) 
  ( <SC_AND> e2 = InclusiveOrExpression() 
    { e1 = new ConditionalBinaryExpression(e1, "&&", e2); } )*
  { return e1; }
}

Expression ConditionalOrExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = ConditionalOrExpressionCompletion(u)
  { return e; }
}

Expression ConditionalOrExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
}
{
  e1 = ConditionalAndExpressionCompletion(u) 
  ( <SC_OR> e2 = ConditionalAndExpression() 
    { e1 = new ConditionalBinaryExpression(e1, "||", e2); } )*
  { return e1; }
}

/* CONDITIONAL-TEST EXPRESSIONS */

Expression ConditionalExpression():
{
  Expression u;
  Expression e;
}
{
  u = UnaryExpression() e = ConditionalExpressionCompletion(u)
  { return e; }
}

Expression ConditionalExpressionCompletion(Expression u):
{
  Expression e1;
  Expression e2;
  Expression e3;
}
{
  e1 = ConditionalOrExpressionCompletion(u) 
  [ <HOOK> e2 = Expression() <COLON> e3 = ConditionalExpression() 
    { e1 = new ConditionalExpression(e1, e2, e3); } ]
  { return e1; }
}

/* ASSIGNMENT EXPRESSIONS */

Expression Assignment(LeftHandSide lhs):
{
  String op;
  Expression e;
}
{
  op = AssignmentOperator() e = Expression() 
  { return new AssignmentExpression(lhs, op, e); }
}

LeftHandSide LeftHandSide():
{
   QualifiedName q;
   LeftHandSide lhs;
   Expression e;
}
{
  ( 
    q = PotentiallyAmbiguousQualifiedName() lhs = NameToLeftHandSideCompletion(q)
  | e = BaseExpression() lhs = LeftHandSideCompletion(e)
  | e = ParenthesizedExpression() lhs = LeftHandSideCompletion(e)
  )
  
  { return lhs; }
}

LeftHandSide LeftHandSideCompletion(Expression p) :
{
  Expression i;
  LeftHandSide lhs;
}
{
  (
    i = Index() lhs = LeftHandSideCompletion(new SequenceAccessExpression(p, i))
  | lhs = NonIndexLeftHandSideCompletion(p)
  )
  
  { return lhs; }
}

LeftHandSide NonIndexLeftHandSideCompletion(Expression p):
{
  Expression e;
  FeatureReference f;
  LeftHandSide lhs;
}
{
  (
    LOOKAHEAD(2) 
    f = Feature(p) lhs = FeatureToLeftHandSideCompletion(f)
  | e = SequenceOperationOrReductionOrExpansion(p) lhs = LeftHandSideCompletion(e)
  )
  
  { return lhs; }
}

LeftHandSide NameToLeftHandSideCompletion(QualifiedName q):
{
  Expression e;
  LeftHandSide lhs = new NameLeftHandSide(q, null);
}
{
  [ 
    LOOKAHEAD(2) e = NameToPrimaryExpressionCompletion(q) lhs = LeftHandSideCompletion(e)
  | e = Index() { lhs = new NameLeftHandSide(q, e); }
    [ lhs = LeftHandSideCompletion(new SequenceAccessExpression(new NameExpression(q), e)) ]
  | lhs = NonIndexLeftHandSideCompletion(new NameExpression(q))
  ]
  
  { return lhs; }
}

LeftHandSide FeatureToLeftHandSideCompletion(FeatureReference f):
{
  Expression e;
  LeftHandSide lhs = new FeatureLeftHandSide(f, null);
}
{
  [
    e = Index() { lhs = new FeatureLeftHandSide(f, e); }
    [ lhs = LeftHandSideCompletion(new SequenceAccessExpression(f, e)) ]
  | e = FeatureInvocation(f) lhs = LeftHandSideCompletion(e)
  | lhs = NonIndexLeftHandSideCompletion(f)
  ]
  
  { return lhs; }
}

String AssignmentOperator():
{
  Token t;
}
{
  (
    t = <ASSIGN>
  | t = <PLUSASSIGN>
  | t = <MINUSASSIGN>
  | t = <STARASSIGN>
  | t = <SLASHASSIGN>
  | t = <REMASSIGN>
  | t = <ANDASSIGN>
  | t = <ORASSIGN>
  | t = <XORASSIGN>
  )

  { return t.image; }
}

/**************
 * STATEMENTS *
 **************/

Block StatementSequence():
{
  Statement s;
  Block b = new Block();
}
{
  ( s = DocumentedStatement() { b.addStatement(s); } )* 
  { return b; }
}

Statement DocumentedStatement():
{
  Token t;
  String c = null;
  Statement s;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ] s = Statement()
  { s.addDocumentation(c);
    return s;
  }
}

Statement Statement():
{
  Statement s;
}
{
  (
    s = AnnotatedStatement()
  | s = InLineStatement()
  | s = BlockStatement()
  | s = EmptyStatement()
  | s = LocalNameDeclarationOrExpressionStatement()
  | s = LocalNameDeclarationStatement()
  | s = IfStatement()
  | s = SwitchStatement()
  | s = WhileStatement()
  | s = ForStatement()
  | s = DoStatement()
  | s = BreakStatement()
  | s = ReturnStatement()
  | s = AcceptStatement()
  | s = ClassifyStatement()
  )
  
  { return s; }
}

/* BLOCK */

Block Block():
{
  Block b;
}
{
  <LBRACE> b = StatementSequence() <RBRACE>
  { return b; }
}

/* ANNOTATED STATEMENTS */

Statement AnnotatedStatement():
{
  ArrayList<Annotation> al;
  Statement s;
}
{ 
  <SLASH_SLASH_AT> al = Annotations() <EOL>
  s = Statement()
  { 
    for (Annotation an: al) {
      s.addAnnotation(an);
    }
    return s;
  }
}

ArrayList<Annotation> Annotations():
{
  Annotation a;
  ArrayList<Annotation> al = new ArrayList<Annotation>();
}
{
   a = Annotation() { al.add(a); } ( <AT> a = Annotation() { al.add(a); } )*
   { return al; }
}

Annotation Annotation():
{
  Token t;
  NameList nl = null;
}
{
  t = <IDENTIFIER> [ <LPAREN> nl = NameList() <RPAREN> ]
  { return new Annotation(t.image, nl); }
}

NameList NameList():
{
  NameList nl = new NameList();
  String n;
}
{ 
  n = Name() { nl.add(n); } ( <COMMA> n = Name() { nl.add(n); } )*
  { return nl; }
}

/* IN-LINE STATEMENTS */

InLineStatement InLineStatement():
{ 
  Token t;
  String n;
  Token d;
}
{
  <SLASH_STAR_AT> t = <IDENTIFIER> <LPAREN> n = Name() <RPAREN>
  d = <DOCUMENTATION_COMMENT>
  { return new InLineStatement(t.image, n, d.image); }
}

/* BLOCK STATEMENTS */

BlockStatement BlockStatement():
{
  Block b;
}
{
  b = Block()
  { return new BlockStatement(b); }
}

/* EMPTY STATEMENTS */

EmptyStatement EmptyStatement():
{}
{
  <SEMICOLON>
  { return new EmptyStatement(); }
}

/* LOCAL NAME DECLARATION AND EXPRESSION STATEMENTS */

Statement LocalNameDeclarationOrExpressionStatement():
{
  QualifiedName q;
  String n;
  Expression e;
  LocalNameDeclarationStatement s1 = new LocalNameDeclarationStatement();
  Statement s2;
}
{
  (
    q = PotentiallyAmbiguousQualifiedName()
    ( LOOKAHEAD(3) 
      [ MultiplicityIndicator() { s1.setHasMultiplicity(); } ] 
      n = Name() { s1.setName(n); s1.setTypeName(q); } 
      LocalNameDeclarationStatementCompletion(s1) { s2 = s1; }
    | e = NameToExpressionCompletion(q) <SEMICOLON> { s2 = new ExpressionStatement(e); } )
  | 
    e = NonNameExpression() <SEMICOLON> { s2 = new ExpressionStatement(e); }
  )
  
  { return s2; }
}

LocalNameDeclarationStatement LocalNameDeclarationStatement():
{
  String n;
  QualifiedName q;
  LocalNameDeclarationStatement s = new LocalNameDeclarationStatement();
}
{
  <LET> n = Name() { s.setName(n); } <COLON> q = TypeName() { s.setTypeName(q); } 
  [ MultiplicityIndicator() { s.setHasMultiplicity(); } ] 
  LocalNameDeclarationStatementCompletion(s)
  { return s; }
}

void LocalNameDeclarationStatementCompletion(LocalNameDeclarationStatement s):
{
  Expression e;
}
{
  <ASSIGN>  e = InitializationExpression() { s.setExpression(e); } <SEMICOLON>
}

Expression InitializationExpression():
{
  Expression e;
}
{
  ( LOOKAHEAD(2) e = Expression()
  | LOOKAHEAD(2) e = SequenceInitializationExpression()
  | e = InstanceInitializationExpression()
  )
  
  { return e; }
}

Expression InstanceInitializationExpression():
{
  Tuple t;
}
{
  <NEW> t = Tuple()
  
  { return new InstanceCreationExpression(null, t); }
}

/* IF STATEMENTS */

IfStatement IfStatement():
{
  IfStatement s = new IfStatement();
  Block b;
}
{
  <IF> SequentialClauses(s) [ b = FinalClause() { s.setFinalClause(b); } ]
  { return s; }
}

void SequentialClauses(IfStatement s):
{
  ConcurrentClauses cs;
}
{
  cs = ConcurrentClauses() { s.addNonFinalClauses(cs); }
  ( LOOKAHEAD(2) <ELSE> <IF> cs = ConcurrentClauses() { s.addNonFinalClauses(cs); } )*
}

ConcurrentClauses ConcurrentClauses():
{
  ConcurrentClauses cs = new ConcurrentClauses();
  NonFinalClause c;
}
{
  c = NonFinalClause() { cs.addClause(c); } 
  ( <OR> <IF> c = NonFinalClause() { cs.addClause(c); } )*
  { return cs; }
}

NonFinalClause NonFinalClause():
{
  Expression e;
  Block b;
}
{
  <LPAREN> e = Expression() <RPAREN> b = Block()
  { return new NonFinalClause(e, b); }
}

Block FinalClause():
{
  Block b;
}
{
  <ELSE> b = Block()
  { return b; }
}

/* SWITCH STATEMENTS */

SwitchStatement SwitchStatement():
{
  SwitchStatement s;
  Expression e;
  SwitchClause c;
  Block b;
}
{
  <SWITCH> <LPAREN> e = Expression() <RPAREN> { s = new SwitchStatement(e); }
  <LBRACE> ( c = SwitchClause() { s.addNonDefaultClause(c); } )* 
  [ b = SwitchDefaultClause() { s.setDefaultClause(b); } ] <RBRACE>
  { return s; }
}

SwitchClause SwitchClause():
{
  SwitchClause c = new SwitchClause();
  Expression e;
  Block b;
}
{
  e = SwitchCase() { c.addCase(e); } ( e = SwitchCase() { c.addCase(e); } )* 
  b = Block() { c.setBlock(b); }
  { return c; }
}

Expression SwitchCase():
{
  Expression e;
}
{
  <CASE> e = Expression() <COLON>
  { return e; }
}

Block SwitchDefaultClause():
{
  Block b;
}
{
  <DEFAULT_> <COLON> b = Block()
  { return b; }
}

/* WHILE STATEMENTS */

WhileStatement WhileStatement():
{
  Expression e;
  Block b;
}
{
  <WHILE> <LPAREN> e = Expression() <RPAREN> b = Block()
  { return new WhileStatement(e, b); }
}

/* DO STATEMENTS */

DoStatement DoStatement():
{
  Block b;
  Expression e;
}
{
  <DO> b = Block() <WHILE> <LPAREN> e = Expression() <RPAREN> <SEMICOLON>
  { return new DoStatement(b, e); }
}

/* FOR STATEMENTS */

ForStatement ForStatement():
{
  ForStatement s = new ForStatement();
  Block b;
}
{
  <FOR> <LPAREN> ForControl(s) <RPAREN> b = Block()
  { s.setBody(b);
    return s;
  }
}

void ForControl(ForStatement s):
{
  LoopVariableDefinition d;
  Expression e;
}
{
  d = LoopVariableDefinition() { s.addVariableDefinition(d); }
  ( <COMMA> LoopVariableDefinition() { s.addVariableDefinition(d); } )*
  [ <WHILE> e = Expression() { s.setCondition(e); } ]
}

LoopVariableDefinition LoopVariableDefinition(): 
{
  String n;
  QualifiedName q = null;
  Expression e1;
  Expression e2 = null;
  LoopVariableDefinition d = new LoopVariableDefinition();
}
{
  ( LOOKAHEAD(2)
    n = Name() <IN> e1 = Expression() [ <DOUBLE_DOT> e2 = Expression() ]
  | q = QualifiedName() n = Name() <COLON> e1 = Expression()
    { d.setTypeIsInferred(); }
  )
  
  { d.setVariable(n);
    d.setTypeName(q);
    d.setExpression1(e1);
    d.setExpression2(e2);
    return d; 
  }
}

/* BREAK STATEMENTS */

BreakStatement BreakStatement():
{}
{
  <BREAK> <SEMICOLON>
  { return new BreakStatement(); }
}

/* RETURN STATEMENTS */

ReturnStatement ReturnStatement():
{
  Expression e;
}
{
  <RETURN> e = Expression() <SEMICOLON>
  { return new ReturnStatement(e); }
}

/* ACCEPT STATEMENTS */

AcceptStatement AcceptStatement():
{
  AcceptStatement s;
  AcceptBlock c;
}
{
  c = AcceptClause() 
  ( s = SimpleAcceptStatementCompletion(c) 
  | s = CompoundAcceptStatementCompletion(c) )
  { return s; }
}

AcceptStatement SimpleAcceptStatementCompletion(AcceptBlock b):
{
  AcceptStatement s = new AcceptStatement();
}
{
  <SEMICOLON>
  { s.addAcceptBlock(b);
    return s; }
}

AcceptStatement CompoundAcceptStatementCompletion(AcceptBlock a1):
{
  AcceptStatement s = new AcceptStatement();
  Block b;
  AcceptBlock a;
}
{ 
  b = Block() { a1.setBlock(b); s.addAcceptBlock(a1); }
  ( <OR> a = AcceptBlock() { s.addAcceptBlock(a); } )* 
  { return s; }
}

AcceptBlock AcceptBlock():
{
  AcceptBlock a;
  Block b;
}
{ 
  a = AcceptClause() b = Block()
  { a.setBlock(b);
    return a;
  }
}

AcceptBlock AcceptClause(): 
{
  String n = null;
  QualifiedNameList nl;
}
{
  <ACCEPT> <LPAREN> [ LOOKAHEAD(2) n = Name() <COLON> ] nl = QualifiedNameList() <RPAREN>
  { return new AcceptBlock(n, nl); }
}

QualifiedNameList ClassificationFromClause():
{
  QualifiedNameList nl;
}
{
  <FROM> nl = QualifiedNameList()
  { return nl; }
}

QualifiedNameList ClassificationToClause(): 
{
  QualifiedNameList nl;
}
{
  <TO> nl = QualifiedNameList()
  { return nl; }
}

/* CLASSIFY STATEMENTS */

ClassifyStatement ClassifyStatement():
{
  ClassifyStatement s;
  Expression e;
}
{
  <CLASSIFY> e = Expression() { s = new ClassifyStatement(e); }
  ClassificationClause(s) <SEMICOLON>
  { return s; }
}

void ClassificationClause(ClassifyStatement s):
{
  QualifiedNameList nl;
}
{
  LOOKAHEAD(2) 
  nl = ClassificationFromClause() { s.setFromList(nl); }
  [ ClassificationToClause() { s.setToList(nl); } ]
| [ ReclassifyAllClause() { s.setFromList(new QualifiedNameList()); }] 
  nl = ClassificationToClause() { s.setToList(nl); }
}

void ReclassifyAllClause():
{}
{
  <FROM> <STAR>
}

QualifiedNameList QualifiedNameList():
{
  QualifiedNameList nl = new QualifiedNameList();
  QualifiedName n;
}
{
  n = QualifiedName() { nl.add(n); }
  ( <COMMA> n = QualifiedName() { nl.add(n); } )*
  { return nl; }
}

/*********
 * UNITS *
 *********/

UnitDefinition UnitDefinition():
{
  QualifiedName n;
  ImportReference i;
  Token t;
  StereotypeAnnotationList sl;
  NamespaceDefinition d;
  UnitDefinition u = new UnitDefinition();
}
{
  [ n = NamespaceDeclaration() { u.setNamespace(n); } ] 
  ( i = ImportDeclaration() { u.addImport(i); } )*
  [ t = <DOCUMENTATION_COMMENT> { u.addDocumentation(t.image); } ] 
  sl = StereotypeAnnotations()
  d = NamespaceDefinition()
  <EOF>
  { d.setAnnotations(sl);
    u.setDefinition(d);
    return u; 
  }
}

StereotypeAnnotationList StereotypeAnnotations():
{
  StereotypeAnnotation s;
  StereotypeAnnotationList sl = new StereotypeAnnotationList();
}
{
  ( s = StereotypeAnnotation() { sl.add(s); } )*
  { return sl; }
}

StereotypeAnnotation StereotypeAnnotation():
{
  QualifiedName n;
  StereotypeAnnotation s;
}
{
  <AT> n = QualifiedName() { s = new StereotypeAnnotation(n); }
  [ <LPAREN> TaggedValues(s) <RPAREN> ]
  
  { return s; }
}

void TaggedValues(StereotypeAnnotation s):
{
  QualifiedNameList nl;
  TaggedValueList tl;
}
{ LOOKAHEAD(2)
  nl = QualifiedNameList() { s.setNames(nl); }
| tl = TaggedValueList() { s.setTaggedValues(tl); }
}

TaggedValueList TaggedValueList():
{
  TaggedValue v;
  TaggedValueList tl = new TaggedValueList();
}
{
  v = TaggedValue() { tl.add(v); }
  ( "," v = TaggedValue() { tl.add(v); } )*
  
  { return tl; }
}

TaggedValue TaggedValue():
{
  String n;
  Token t;
  String v = "";
}
{
  n = Name() <THICK_ARROW>
  (
    t = <BOOLEAN_LITERAL> { v = t.image; }
  | t = <STRING_LITERAL>  { v = t.image; }
  | t = <STAR>            { v = t.image; }
  | [ <PLUS> | <MINUS> { v = "-"; } ] t = <NATURAL_LITERAL> { v = v + t.image; }
  )
  
  { return new TaggedValue(n, v); }
}

QualifiedName NamespaceDeclaration():
{
  QualifiedName n;
}
{
  <NAMESPACE> n = QualifiedName() <SEMICOLON>
  { return n; }
}

ImportReference ImportDeclaration():
{
  String v;
  ImportReference i;
}
{
  v = ImportVisibilityIndicator() <IMPORT> i = ImportReference() <SEMICOLON>
  { i.setVisibility(v); 
    return i; }
}

String ImportVisibilityIndicator():
{
  Token t;
}
{
  (
    t = <PUBLIC>
  | t = <PRIVATE>
  )
  
  { return t.image; }
}

ImportReference ImportReference():
{
  String n;
  QualifiedName q;
  String a;
  ImportReference i;
}
{
  ( LOOKAHEAD(3)
    q = ColonQualifiedName() { i = new ImportReference(q); }
    [ <DOUBLE_COLON> <STAR> { i.setIsPackageImport(); } 
    | a = AliasDefinition() { i.setAlias(a); } ]
  | LOOKAHEAD(3)
    q = DotQualifiedName() { i = new ImportReference(q); }
    [ <DOT> <STAR> { i.setIsPackageImport(); } 
    | a = AliasDefinition() { i.setAlias(a); } ]
  |
    n = Name() { q = new QualifiedName(); q.addName(n); i = new ImportReference(q); }
    [ ( <DOUBLE_COLON> | <DOT> ) <STAR> { i.setIsPackageImport(); }
    | a = AliasDefinition() { i.setAlias(a); } ]    
  )
  { return i; }
}

String AliasDefinition():
{
  String n;
}
{
  <AS> n = Name()
  { return n; }
}

/* NAMESPACES */

NamespaceDefinition NamespaceDefinition():
{
  NamespaceDefinition d;
}
{
  (
    d = PackageDefinition()
  | d = ClassifierDefinition()
  )
  
  { return d; }
}

String VisibilityIndicator():
{
  String v;
  Token t;
}
{
  (
    v = ImportVisibilityIndicator()
  | t = <PROTECTED> { v = t.image; }
  )
  
  { return v; }
}

/* PACKAGES */

String PackageDeclaration():
{
  String n;
}
{
  <PACKAGE> n = Name()
  { return n; }
}

PackageDefinition PackageDefinition():
{
  String n;
  PackageDefinition d;
}
{
  n = PackageDeclaration() { d = new PackageDefinition(n); }
  PackageBody(d)
  
  { return d; }
}
  
PackageDefinition PackageDefinitionOrStub():
{
  String n;
  PackageDefinition d;
}
{
  n = PackageDeclaration() { d = new PackageDefinition(n); }
  ( <SEMICOLON> { d.setIsStub(); }
  | PackageBody(d)
  )

  { return d; }
}

void PackageBody(PackageDefinition d):
{
  Member m;
}
{
  <LBRACE> ( m = PackagedElement() { d.addOwnedMember(m); } )* <RBRACE>
}

Member PackagedElement():
{
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v;
  Member m;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ] 
  sl = StereotypeAnnotations()
  v = ImportVisibilityIndicator()
  m = PackagedElementDefinition()
  { m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    return m;
  }
}

Member PackagedElementDefinition():
{
  Member m;
}
{
  (
    m = PackageDefinitionOrStub()
  | m = ClassifierDefinitionOrStub()
  )
  
  { return m; }
}

/***************
 * CLASSIFIERS *
 ***************/

NamespaceDefinition ClassifierDefinition():
{
  NamespaceDefinition d;
}
{
  (
    LOOKAHEAD(2) d = ClassDefinition()
  | LOOKAHEAD(2) d = ActiveClassDefinition()
  | LOOKAHEAD(2) d = DataTypeDefinition()
  |              d = EnumerationDefinition()
  | LOOKAHEAD(2) d = AssociationDefinition()
  | LOOKAHEAD(2) d = SignalDefinition()
  |              d = ActivityDefinition()
  )
  
  { return d; }
}

NamespaceDefinition ClassifierDefinitionOrStub():
{
  NamespaceDefinition d;
}
{
  (
    LOOKAHEAD(2) d = ClassDefinitionOrStub()
  | LOOKAHEAD(2) d = ActiveClassDefinitionOrStub()
  | LOOKAHEAD(2) d = DataTypeDefinitionOrStub()
  |              d = EnumerationDefinitionOrStub()
  | LOOKAHEAD(2) d = AssociationDefinitionOrStub()
  | LOOKAHEAD(2) d = SignalDefinitionOrStub()
  |              d = ActivityDefinitionOrStub()
  )
  
  { return d; }
}

void ClassifierSignature(ClassifierDefinition d):
{
  String n;
  QualifiedNameList nl;
}
{
  n = Name() { d.setName(n); }
  [ TemplateParameters(d) ]
  [ nl = SpecializationClause() { d.setSpecialization(nl); } ]
}

void TemplateParameters(ClassifierDefinition d):
{
  ClassifierTemplateParameter p;
}
{
  <LT> p = ClassifierTemplateParameter() { d.addOwnedMember(p); }
  ( <COMMA> p = ClassifierTemplateParameter() { d.addOwnedMember(p); } )*
  <GT>
}

ClassifierTemplateParameter ClassifierTemplateParameter():
{
  Token t;
  String n;
  QualifiedName q;
  QualifiedNameList nl;
  ClassifierTemplateParameter p = new ClassifierTemplateParameter();
}
{
  [ t = <DOCUMENTATION_COMMENT> { p.addDocumentation(t.image); } ]
  n = Name() { p.setName(n); }
  [ <SPECIALIZES> q = QualifiedName() 
    { nl = new QualifiedNameList(); 
      nl.add(q);
      p.setSpecialization(nl); 
    } 
  ]
  
  { p.setVisibility("private");
    p.setIsAbstract();
    return p;
  }
}

QualifiedNameList SpecializationClause():
{
  QualifiedNameList nl;
}
{
  <SPECIALIZES> nl = QualifiedNameList()
  { return nl; }
}

/* CLASSES */

ClassDefinition ClassDeclaration():
{
  ClassDefinition d = new ClassDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT> { d.setIsAbstract(); } ] <CLASS> ClassifierSignature(d)
  
  { return d; }
}

ClassDefinition ClassDefinition():
{
  ClassDefinition d; 
}
{
  d = ClassDeclaration() ClassBody(d)
  { return d; }
}

ClassDefinition ClassDefinitionOrStub():
{
  ClassDefinition d; 
}
{
  d = ClassDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | ClassBody(d)
  )
  
  { return d; }
}

void ClassBody(ClassDefinition d):
{
  Member m;
}
{
  <LBRACE> ( m = ClassMember() { d.addOwnedMember(m); } )* <RBRACE>
}

Member ClassMember():
{
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ]
  sl = StereotypeAnnotations()
  [ v = VisibilityIndicator() ]
  m = ClassMemberDefinition()
  { m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    return m;
  }
}

Member ClassMemberDefinition():
{
  Member m;
}
{
  (
    LOOKAHEAD(2) m = ClassifierDefinitionOrStub()
  |              m = FeatureDefinitionOrStub()
  )
  
  { return m; }
}

/* ACTIVE CLASSES */

ActiveClassDefinition ActiveClassDeclaration():
{
  ActiveClassDefinition d = new ActiveClassDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT> { d.setIsAbstract(); } ] <ACTIVE> <CLASS> ClassifierSignature(d)
  
  { return d; }
}

ActiveClassDefinition ActiveClassDefinition():
{
  ActiveClassDefinition d;
}
{
  d = ActiveClassDeclaration() ActiveClassBody(d)
  { return d; }
}

ActiveClassDefinition ActiveClassDefinitionOrStub():
{
  ActiveClassDefinition d;
}
{
  d = ActiveClassDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | ActiveClassBody(d)
  )
  
  { return d; }
}

void ActiveClassBody(ActiveClassDefinition d):
{
  Member m;
  ActivityDefinition a;
}
{
  <LBRACE> ( m = ActiveClassMember() { d.addOwnedMember(m); } )* <RBRACE>
  [ <DO> a = BehaviorClause() { d.setClassifierBehavior(a); } ]
}

ActivityDefinition BehaviorClause():
{
  ActivityDefinition a = new ActivityDefinition();
  Block b;
  String n;
}
{
	(
	  b = Block() { a.setBody(b); }
	| n = Name() { a.setName(n); a.setIsStub(); }
	)
	
	{ a.setVisibility("private");
	  return a; }
}

Member ActiveClassMember():
{
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ]
  sl = StereotypeAnnotations()
  [ v = VisibilityIndicator() ]
  m = ActiveClassMemberDefinition()
  { m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    return m;
  }
}

Member ActiveClassMemberDefinition():
{
  Member m;
}
{
  (
                 m = ClassMemberDefinition()
  | LOOKAHEAD(3) m = ActiveFeatureDefinitionOrStub()
  )
  
  { return m; }
}

/* DATA TYPES */

DataTypeDefinition DataTypeDeclaration():
{
  DataTypeDefinition d = new DataTypeDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT>  { d.setIsAbstract(); } ] <DATATYPE> ClassifierSignature(d)
  
  { return d; }
}

DataTypeDefinition DataTypeDefinition():
{
  DataTypeDefinition d;
}
{
  d = DataTypeDeclaration() StructuredBody(d)
  { return d; }
}

DataTypeDefinition DataTypeDefinitionOrStub():
{
  DataTypeDefinition d;
}
{
  d = DataTypeDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | StructuredBody(d)
  )
  
  { return d; }
}

void StructuredBody(ClassifierDefinition d):
{
  Member m;
}
{
  <LBRACE> ( m = StructuredMember() { d.addOwnedMember(m); } )* <RBRACE>
}

Member StructuredMember():
{
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ]
  sl = StereotypeAnnotations()
  [ t = <PUBLIC> { v = t.image; }]    
  m = PropertyDefinition()
  { m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    return m;
  }
}

/* ASSOCIATIONS */

AssociationDefinition AssociationDeclaration():
{
  AssociationDefinition d = new AssociationDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT> { d.setIsAbstract(); } ] <ASSOC> ClassifierSignature(d)
  
  { return d; }
}

AssociationDefinition AssociationDefinition():
{
  AssociationDefinition d;
}
{
  d = AssociationDeclaration() StructuredBody(d)
  { return d; }
}

AssociationDefinition AssociationDefinitionOrStub():
{
  AssociationDefinition d;
}
{
  d = AssociationDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | StructuredBody(d)
  )
  
  { return d; }
}

/* ENUMERATIONS */

EnumerationDefinition EnumerationDeclaration():
{
  EnumerationDefinition d = new EnumerationDefinition();
  String n;
  QualifiedNameList nl;
}
{
  <ENUM> n = Name() { d.setName(n); } 
  [ nl = SpecializationClause() { d.setSpecialization(nl); } ]
  { return d; }
}

EnumerationDefinition EnumerationDefinition():
{
  EnumerationDefinition d;
}
{
  d = EnumerationDeclaration() EnumerationBody(d)
  { return d; }
}

EnumerationDefinition EnumerationDefinitionOrStub():
{
  EnumerationDefinition d;
}
{
  d = EnumerationDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | EnumerationBody(d)
  )
  
  { return d; }
}

void EnumerationBody(EnumerationDefinition d):
{
  Member m;
}
{
  <LBRACE> m = EnumerationLiteralName() { d.addOwnedMember(m); }
  ( <COMMA> m = EnumerationLiteralName() { d.addOwnedMember(m); } )* <RBRACE>
}

EnumerationLiteralName EnumerationLiteralName():
{
  Token t;
  String c = null;
  String n;
}
{
  [ t = <DOCUMENTATION_COMMENT> { c = t.image; } ]  n = Name()
  { return new EnumerationLiteralName(n, c); }
}

/* SIGNALS */

SignalDefinition SignalDeclaration():
{
  SignalDefinition d = new SignalDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT> { d.setIsAbstract(); } ] <SIGNAL> ClassifierSignature(d)
  
  { return d; }
}

SignalDefinition SignalDefinition():
{
  SignalDefinition d;
}
{
  d = SignalDeclaration() StructuredBody(d)
  { return d; }
}

SignalDefinition SignalDefinitionOrStub():
{
  SignalDefinition d;
}
{
  d = SignalDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | StructuredBody(d)
  )
  { return d; }
}

/* ACTIVITIES */

ActivityDefinition ActivityDeclaration():
{
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  ActivityDefinition d = new ActivityDefinition();
  String n;
}
{ 
  <ACTIVITY> n = Name() { d.setName(n); } 
  [ TemplateParameters(d) ] FormalParameters(d) 
  [ <COLON> TypePart(t) { p.setDirection("return"); d.addOwnedMember(p); } ]
  { return d; }
}

ActivityDefinition ActivityDefinition():
{
  ActivityDefinition a;
  Block b;
}
{
  a = ActivityDeclaration() b = Block()
  { a.setBody(b);
    return a; }
}

ActivityDefinition ActivityDefinitionOrStub():
{
  ActivityDefinition a;
  Block b;
}
{
  a = ActivityDeclaration() 
  ( <SEMICOLON> { a.setIsStub(); }
  | b = Block() { a.setBody(b); }
  )
  
  { return a; }
}

void FormalParameters(NamespaceDefinition d):
{}
{
  <LPAREN> [ FormalParameterList(d) ] <RPAREN>
}

void FormalParameterList(NamespaceDefinition d):
{
  FormalParameter p;
}
{
  p = FormalParameter() { d.addOwnedMember(p); }
  ( <COMMA> p = FormalParameter() { d.addOwnedMember(p); } )*
}

FormalParameter FormalParameter():
{
  Token t;
  StereotypeAnnotationList sl;
  String d;
  String n;
  TypedElementDeclaration e = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(e);
}
{
  [ t = <DOCUMENTATION_COMMENT> { p.addDocumentation(t.image); } ]
  sl = StereotypeAnnotations() { p.setAnnotations(sl); }
  d = ParameterDirection() { p.setDirection(d); }
  n = Name() { p.setName(n); } <COLON> TypePart(e)
  { return p; }
}

String ParameterDirection():
{
  Token t;
}
{
  (
    t = <IN> 
  | t = <OUT> 
  | t = <INOUT>
  )
  
  { return t.image; }
}

/* FEATURES */

Member FeatureDefinitionOrStub():
{
  Member m;
}
{
  (
    LOOKAHEAD(2) 
    m = AttributeDefinition()
  | m = OperationDefinitionOrStub()
  )
  
  { return m; }
}

Member ActiveFeatureDefinitionOrStub():
{
  Member m;
}
{
  (
    LOOKAHEAD(2) 
    m = ReceptionDefinition()
  | m = SignalReceptionDefinitionOrStub()
  )
  
  { return m; }
}

/* PROPERTIES */

PropertyDefinition PropertyDefinition():
{
    PropertyDefinition d;
}
{
  d = PropertyDeclaration() <SEMICOLON>
  { return d; }
}

PropertyDefinition AttributeDefinition():
{
  PropertyDefinition d;
  Expression e;
}
{
  d = PropertyDeclaration()
  [ e = AttributeInitializer() { d.setInitializer(e); } ] <SEMICOLON>
  { return d; }
}


Expression AttributeInitializer(): 
{
  Expression e;
}
{
  <ASSIGN> e = InitializationExpression()
  { return e; }
}

PropertyDefinition PropertyDeclaration():
{
  TypedElementDeclaration t = new TypedElementDeclaration();
  PropertyDefinition d = new PropertyDefinition(t);
  String n;
}
{
  n = Name() { d.setName(n); } 
  <COLON> [ <COMPOSE> { d.setIsComposite(); } ] TypePart(t)
  { return d; }
}

void TypePart(TypedElementDeclaration d):
{
  QualifiedName t;
  Token tc;
}
{
  t = TypeName() { d.setType(t); } [ Multiplicity(d) ]
}

QualifiedName TypeName():
{
  QualifiedName n = null;
}
{
  (
    n = QualifiedName()
  | <ANY>
  )
  
  { return n; }
}

void Multiplicity(TypedElementDeclaration d):
{}
{
  <LBRACKET> [ MultiplicityRange(d) ] <RBRACKET> 
  [ <ORDERED> { d.setIsOrdered(); } ] [ <NONUNIQUE> { d.setIsNonunique(); } ]
}

void MultiplicityRange(TypedElementDeclaration d):
{
  Token t;
  String n;
}
{
  [ LOOKAHEAD(2) t = <NATURAL_LITERAL> <DOUBLE_DOT> { d.setLowerBound(t.image); } ] 
  n = UnlimitedNaturalLiteral() { d.setUpperBound(n); }
}

String UnlimitedNaturalLiteral():
{
  Token t;
}
{
  (
    t = <NATURAL_LITERAL>
  | t = <STAR>
  )
  
  { return t.image; }
}

/* OPERATIONS */

OperationDefinition OperationDeclaration():
{
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  OperationDefinition d = new OperationDefinition();
  String n;
  QualifiedNameList nl;
}
{
  [ <ABSTRACT> { d.setIsAbstract(); } ] n = Name() { d.setName(n); }
  FormalParameters(d) [<COLON> TypePart(t) { p.setDirection("return"); d.addOwnedMember(p); } ] 
  [ nl = RedefinitionClause() { d.setRedefinition(nl); } ]
  { return d; }
}

OperationDefinition OperationDefinitionOrStub():
{
  OperationDefinition o;
  Block b;
}
{
  o = OperationDeclaration() 
  ( <SEMICOLON> { if (!o.isAbstract()) { o.setIsStub(); } }
  | b = Block() { o.setBody(b); }
  )
  
  { return o; }
}

QualifiedNameList RedefinitionClause():
{
  QualifiedNameList nl;
}
{
  <REDEFINES> nl = QualifiedNameList()
  { return nl; }
}

/* RECEPTIONS */

ReceptionDefinition ReceptionDefinition():
{
  QualifiedName n;
}
{ 
  <RECEIVE> n = QualifiedName() <SEMICOLON>
  { return new ReceptionDefinition(n); }
}

SignalReceptionDefinition SignalReceptionDeclaration():
{
  SignalReceptionDefinition d = new SignalReceptionDefinition();
  String n;
  QualifiedNameList nl;
}
{
  <RECEIVE> <SIGNAL> n = Name() { d.setName(n); }
  [ nl = SpecializationClause() { d.setSpecialization(nl); } ]
  { return d; }
}

SignalReceptionDefinition SignalReceptionDefinitionOrStub():
{
  SignalReceptionDefinition d;
}
{
  d = SignalReceptionDeclaration() 
  ( <SEMICOLON> { d.setIsStub(); }
  | StructuredBody(d)
  )
  
  { return d; }
}
