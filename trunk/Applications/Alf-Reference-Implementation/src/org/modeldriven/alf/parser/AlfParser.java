/* Generated By:JavaCC: Do not edit this line. AlfParser.java */
package org.modeldriven.alf.parser;

import org.modeldriven.alf.syntax.expressions.*;
import org.modeldriven.alf.syntax.statements.*;
import org.modeldriven.alf.syntax.units.*;

import java.util.ArrayList;

public class AlfParser implements AlfParserConstants {

  public static final String version = "0.09";

  private static void completeSubunits(NamespaceDefinition namespace) {
    for (Member member: namespace.getMembers()) {
      if (member instanceof NamespaceDefinition) {
        member.completeStub();
        completeSubunits((NamespaceDefinition)member);
      }
    }
  }

  public static UnitDefinition parse(String fileName) {
    AlfParser parser;

    if (fileName == null) {
      System.out.println("Reading from standard input...");
      parser = new AlfParser(System.in);
    } else {
      System.out.println("Parsing " + fileName + "...");
      try {
        parser = new AlfParser(new java.io.FileInputStream(fileName));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File not found: " + fileName);
        return null;
      }
    }
    try {
      UnitDefinition unit = parser.UnitDefinition();
      System.out.println("Parsed successfully.");
      return unit;

    } catch (Throwable e) {
      System.out.println(e.getMessage());
      if (e.getMessage()==null) {
        e.printStackTrace();
      }
      System.out.println("Encountered errors during parse.");
      return null;
    }

  }

  public static void main(String args[]) {
    UnitDefinition unit;
    Boolean complete;

    System.out.println("Alf " + version + " Parser");

    if (args.length == 0 || args.length == 1 && args[0].equals("-complete")) {
      unit = parse(null);
      complete = args.length == 1;
    } else if (args.length == 1 || args.length == 2 && args[0].equals("-complete")) {
      unit = parse(args[args.length-1]);
      complete = args.length == 2;
    } else {
      System.out.println("Usage is");
      System.out.println("         alfp [ -complete ] < inputfile");
      System.out.println("OR");
      System.out.println("         alfp [ -complete ] inputfile");
      return;
    }

    if (unit != null) {
      if (!complete) {
        unit.print();
      } else {
        unit.addImplicitImports();

        // Ensure all imports are resolved.
        unit.getDefinition().getAllMembers();

        // Recursively complete subunits.
        completeSubunits(unit.getDefinition());

        unit.getModelNamespace().print();
      }
    }

    /*
    ArrayList<Member> members = unit.getAllMembers();
    System.out.println(unit.toString());
    for (Member member: members) {
      if (member.isError()) {
        member.printChild("");
      } else {
        System.out.println(member.toString(" "));
      }
    }
    */
  }

/***************
 *    NAMES    *
 ***************/
  final public String Name() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case UNRESTRICTED_NAME:
      t = jj_consume_token(UNRESTRICTED_NAME);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName QualifiedName() throws ParseException {
  QualifiedName q;
    q = UnqualifiedName();
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_COLON:
        ColonQualifiedNameCompletion(q);
        break;
      case DOT:
        DotQualifiedNameCompletion(q);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName PotentiallyAmbiguousQualifiedName() throws ParseException {
  QualifiedName q;
    q = UnqualifiedName();
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_COLON:
        ColonQualifiedNameCompletion(q);
        break;
      case DOT:
        DotQualifiedNameCompletion(q);
                                     q.setIsAmbiguous();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName ColonQualifiedName() throws ParseException {
  QualifiedName q = new QualifiedName();
    q = UnqualifiedName();
    ColonQualifiedNameCompletion(q);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public void ColonQualifiedNameCompletion(QualifiedName q) throws ParseException {
  NameBinding n;
    label_1:
    while (true) {
      jj_consume_token(DOUBLE_COLON);
      n = NameBinding();
                                                    q.addNameBinding(n);
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
    }
  }

  final public QualifiedName DotQualifiedName() throws ParseException {
  QualifiedName q = new QualifiedName();
    q = UnqualifiedName();
    DotQualifiedNameCompletion(q);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public void DotQualifiedNameCompletion(QualifiedName q) throws ParseException {
  NameBinding n;
    label_2:
    while (true) {
      jj_consume_token(DOT);
      n = NameBinding();
                                           q.addNameBinding(n);
      if (jj_2_4(2)) {
        ;
      } else {
        break label_2;
      }
    }
  }

  final public QualifiedName UnqualifiedName() throws ParseException {
  QualifiedName q = new QualifiedName();
  NameBinding n;
    n = NameBinding();
    q.addNameBinding(n);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public NameBinding NameBinding() throws ParseException {
  String n;
  TemplateBinding tb;
  NameBinding nb = new NameBinding();
    n = Name();
               nb.setName(n);
    if (jj_2_5(2)) {
      /* TemplateBindingLookahead()) / Unbounded lookahead */
          tb = TemplateBinding();
                             nb.setBinding(tb);
    } else {
      ;
    }
    {if (true) return nb;}
    throw new Error("Missing return statement in function");
  }

  final public void LessThanExpressionLookahead() throws ParseException {
    jj_consume_token(LT);
    AdditiveExpression();
  }

  final public void TemplateBindingLookahead() throws ParseException {
    jj_consume_token(LT);
    if (jj_2_6(2)) {
      QualifiedName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        Name();
        jj_consume_token(THICK_ARROW);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public TemplateBinding TemplateBinding() throws ParseException {
  TemplateBinding b;
  QualifiedName q;
    jj_consume_token(LT);
    if (jj_2_7(2)) {
      b = NamedTemplateBinding();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        b = PositionalTemplateBinding();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(GT);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public PositionalTemplateBinding PositionalTemplateBinding() throws ParseException {
  QualifiedName q;
  PositionalTemplateBinding b = new PositionalTemplateBinding();
    q = QualifiedName();
                        b.addArgumentName(q);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      q = QualifiedName();
                                  b.addArgumentName(q);
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public NamedTemplateBinding NamedTemplateBinding() throws ParseException {
  TemplateParameterSubstitution s;
  NamedTemplateBinding b = new NamedTemplateBinding();
    s = TemplateParameterSubstitution();
                                        b.addSubstitution(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      s = TemplateParameterSubstitution();
                                                  b.addSubstitution(s);
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateParameterSubstitution TemplateParameterSubstitution() throws ParseException {
  String n;
  QualifiedName q;
  TemplateParameterSubstitution s = new TemplateParameterSubstitution();
    n = Name();
    jj_consume_token(THICK_ARROW);
    q = QualifiedName();
    s.setParameterName(n);
    s.setArgumentName(q);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/***************
 * EXPRESSIONS *
 ***************/
  final public Expression Expression() throws ParseException {
  String n;
  QualifiedName q;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      n = Name();
                 q = new QualifiedName(); q.addName(n);
      e = NameToExpressionCompletion(q);
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
      e = NonNameExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonNameExpression() throws ParseException {
  QualifiedName q;
  String n;
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_9(2)) {
        jj_consume_token(ANY);
        jj_consume_token(RPAREN);
        e1 = CastCompletion(null);
        e2 = ConditionalExpressionCompletion(e1);
      } else if (jj_2_10(2147483647)) {
        q = PotentiallyAmbiguousQualifiedName();
        jj_consume_token(RPAREN);
        if (jj_2_8(3)) {
          e1 = CastCompletion(q);
          e2 = ConditionalExpressionCompletion(e1);
        } else {
          e2 = ExpressionCompletion(new NameExpression(q));
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
        case BOOLEAN_LITERAL:
        case NATURAL_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case DOLLAR:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
          e1 = Expression();
          jj_consume_token(RPAREN);
          e2 = ExpressionCompletion(e1);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      e1 = NonPostfixNonCastUnaryExpression();
      e2 = ConditionalExpressionCompletion(e1);
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e1 = BaseExpression();
      e2 = ExpressionCompletion(e1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionCompletion(Expression p) throws ParseException {
  Expression i;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      e = ExpressionCompletion(new SequenceAccessExpression(p, i));
      break;
    default:
      jj_la1[11] = jj_gen;
      e = NonIndexExpressionCompletion(p);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonIndexExpressionCompletion(Expression p) throws ParseException {
  Expression e;
  FeatureReference f;
    if (jj_2_11(2)) {
      f = Feature(p);
      e = FeatureToExpressionCompletion(f);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        e = SequenceOperationOrReductionOrExpansion(p);
        e = ExpressionCompletion(e);
        break;
      default:
        jj_la1[12] = jj_gen;
        e = ConditionalExpressionCompletion(p);
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NameToExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  PositionalTemplateBinding b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      n = Name();
                                q.addName(n);
      e = ColonQualifiedNameToExpressionCompletion(q);
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_13(2)) {
        jj_consume_token(DOT);
        n = Name();
                                    q.addName(n); q.setIsAmbiguous();
        e = DotQualifiedNameToExpressionCompletion(q);
      } else if (jj_2_14(2147483647)) {
        jj_consume_token(LT);
        q2 = QualifiedName();
        jj_consume_token(GT);
        if (jj_2_12(2147483647)) {
          e = NonTemplateBindingToExpressionCompletion(new NameExpression(q2));
        e = new BinaryExpression(new NameExpression(q), "<", e);
        } else {
        b = new PositionalTemplateBinding(); b.addArgumentName(q2);
        q.appendBinding(b);
          e = NameToExpressionCompletion(q);
        }
      } else {
        e = QualifiedNameToExpressionCompletion(q);
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ColonQualifiedNameToExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  FeatureReference f;
  PositionalTemplateBinding b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      n = Name();
                                q.addName(n);
      e = ColonQualifiedNameToExpressionCompletion(q);
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_16(2147483647)) {
        jj_consume_token(LT);
        q2 = QualifiedName();
        jj_consume_token(GT);
        if (jj_2_15(2147483647)) {
          e = NonTemplateBindingToExpressionCompletion(new NameExpression(q2));
        e = new BinaryExpression(new NameExpression(q), "<", e);
        } else {
        b = new PositionalTemplateBinding(); b.addArgumentName(q2);
        q.appendBinding(b);
          e = ColonQualifiedNameToExpressionCompletion(q);
        }
      } else if (jj_2_17(2)) {
        f = Feature(new NameExpression(q));
        e = FeatureToExpressionCompletion(f);
      } else {
        e = QualifiedNameToExpressionCompletion(q);
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression DotQualifiedNameToExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  PositionalTemplateBinding b;
    if (jj_2_19(2)) {
      jj_consume_token(DOT);
      n = Name();
                                    q.addName(n); q.setIsAmbiguous();
      e = DotQualifiedNameToExpressionCompletion(q);
    } else if (jj_2_20(2147483647)) {
      jj_consume_token(LT);
      q2 = QualifiedName();
      jj_consume_token(GT);
      if (jj_2_18(2147483647)) {
        e = NonTemplateBindingToExpressionCompletion(new NameExpression(q2));
        e = new BinaryExpression(new NameExpression(q), "<", e);
      } else {
        b = new PositionalTemplateBinding(); b.addArgumentName(q2);
        q.appendBinding(b);
        e = DotQualifiedNameToExpressionCompletion(q);
      }
    } else {
      e = QualifiedNameToExpressionCompletion(q);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonTemplateBindingToExpressionCompletion(Expression e) throws ParseException {
  Expression e1;
  Expression e2;
  Expression e3;
  String op;
  QualifiedName n;
    e2 = AdditiveExpression();
                              e1 = new BinaryExpression(e, ">", e2);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      op = RelationalOperator();
      e2 = AdditiveExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASTYPE:
    case INSTANCEOF:
      op = ClassificationOperator();
      n = QualifiedName();
      e1 = new ClassificationExpression(e, op, n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      op = EqualityOperator();
      e2 = ClassificationExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(LOGICAL_AND);
      e2 = EqualityExpression();
      e1 = new BinaryExpression(e1, "&", e2);
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(XOR);
      e2 = AndExpression();
      e1 = new BinaryExpression(e1, "^", e2);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(LOGICAL_OR);
      e2 = ExclusiveOrExpression();
      e1 = new BinaryExpression(e1, "|", e2);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      jj_consume_token(SC_AND);
      e2 = InclusiveOrExpression();
      e1 = new ConditionalBinaryExpression(e1, "&&", e2);
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      jj_consume_token(SC_OR);
      e2 = ConditionalAndExpression();
      e1 = new ConditionalBinaryExpression(e1, "||", e2);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      e2 = Expression();
      jj_consume_token(COLON);
      e3 = ConditionalExpression();
      e1 = new ConditionalExpression(e1, e2, e3);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression QualifiedNameToExpressionCompletion(QualifiedName q) throws ParseException {
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case INCR:
    case DECR:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
      e2 = PostfixOperationOrAssignment(new NameLeftHandSide(q, null));
      break;
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_21(2)) {
        e1 = NameToPrimaryExpressionCompletion(q);
        e2 = ExpressionCompletion(e1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          e1 = Index();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
          case INCR:
          case DECR:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
            e2 = PostfixOperationOrAssignment(new NameLeftHandSide(q, e1));
            break;
          default:
            jj_la1[24] = jj_gen;
            e2 = ExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), e1));
          }
          break;
        case ARROW:
          e1 = SequenceOperationOrReductionOrExpansion(new NameExpression(q));
          e2 = ExpressionCompletion(e1);
          break;
        default:
          jj_la1[26] = jj_gen;
          e2 = ConditionalExpressionCompletion(new NameExpression(q));
        }
      }
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FeatureToExpressionCompletion(FeatureReference f) throws ParseException {
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case INCR:
    case DECR:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
      e2 = PostfixOperationOrAssignment(new FeatureLeftHandSide(f, null));
      break;
    case LBRACKET:
      e1 = Index();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
        e2 = PostfixOperationOrAssignment(new FeatureLeftHandSide(f, e1));
        break;
      default:
        jj_la1[27] = jj_gen;
        e2 = ExpressionCompletion(new SequenceAccessExpression(f, e1));
      }
      break;
    case LPAREN:
      e1 = FeatureInvocation(f);
      e2 = ExpressionCompletion(e1);
      break;
    default:
      jj_la1[28] = jj_gen;
      e2 = NonIndexExpressionCompletion(f);
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

/* PRIMARY EXPRESSIONS */
  final public Expression BaseExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e = LiteralExpression();
      break;
    case THIS:
      e = ThisExpression();
      break;
    case SUPER:
      e = SuperInvocationExpression();
      break;
    case NEW:
      e = InstanceCreationOrSequenceConstructionExpression();
      break;
    case ANY:
    case NULL:
      e = SequenceAnyExpression();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NameToPrimaryExpressionCompletion(QualifiedName q) throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLEAR_ASSOC:
      case CREATE_LINK:
      case DESTROY_LINK:
        e = LinkOperationCompletion(q);
        break;
      case ALL_INSTANCES:
        e = ClassExtentExpressionCompletion(q);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBRACE:
    case LBRACKET:
      e = SequenceConstructionExpressionCompletion(q);
      break;
    case LPAREN:
      e = BehaviorInvocation(q);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpressionCompletion(Expression e) throws ParseException {
    label_12:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_12;
      }
      e = PrimaryModifier(e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryModifier(Expression p) throws ParseException {
  Expression i;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      e = Feature(p);
      if (jj_2_23(2)) {
        e = FeatureInvocation((FeatureReference)e);
      } else {
        ;
      }
      break;
    case ARROW:
      e = SequenceOperationOrReductionOrExpansion(p);
      break;
    case LBRACKET:
      i = Index();
                  e = new SequenceAccessExpression(p, i);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* LITERAL EXPRESSIONS */
  final public Expression LiteralExpression() throws ParseException {
  Token t;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                            e = new BooleanLiteral(t.image);
      break;
    case NATURAL_LITERAL:
      t = jj_consume_token(NATURAL_LITERAL);
                            e = new NaturalLiteral(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                            e = new StringLiteral(t.image);
      break;
    case STAR:
      t = jj_consume_token(STAR);
                            e = new UnboundedLiteral();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* NAME EXPRESSIONS */
  final public Expression NameOrPrimaryExpression() throws ParseException {
  QualifiedName q;
  Expression e;
    q = PotentiallyAmbiguousQualifiedName();
                                            e = new NameExpression(q);
    if (jj_2_24(2)) {
      e = NameToPrimaryExpressionCompletion(q);
    } else {
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* THIS EXPRESSIONS */
  final public Expression ThisExpression() throws ParseException {
  Tuple t;
  Expression e = new ThisExpression();
    jj_consume_token(THIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = Tuple();
                         e = new FeatureInvocationExpression(new FeatureReference(e, null), t);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PARENTHESIZED EXPRESSIONS */
  final public Expression ParenthesizedExpression() throws ParseException {
  Expression e;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTY ACCESS EXPRESSIONS */
  final public FeatureReference Feature(Expression c) throws ParseException {
  NameBinding n;
    jj_consume_token(DOT);
    n = NameBinding();
    {if (true) return new FeatureReference(c, n);}
    throw new Error("Missing return statement in function");
  }

/* INVOCATION EXPRESSIONS */
  final public Tuple Tuple() throws ParseException {
  Tuple t = new PositionalTuple();
    jj_consume_token(LPAREN);
    if (jj_2_25(2)) {
      t = NamedTupleExpressionList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case BANG:
      case DOLLAR:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
        t = PositionalTupleExpressionList();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    }
    jj_consume_token(RPAREN);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PositionalTuple PositionalTupleExpressionList() throws ParseException {
  Expression e;
  PositionalTuple t = new PositionalTuple();
    e = Expression();
                     t.addExpression(e);
    PositionalTupleExpressionListCompletion(t);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void PositionalTupleExpressionListCompletion(PositionalTuple t) throws ParseException {
  Expression e;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      e = Expression();
                               t.addExpression(e);
    }
  }

  final public NamedTuple NamedTupleExpressionList() throws ParseException {
  NamedTuple t = new NamedTuple();
  NamedExpression n;
    n = NamedExpression();
                          t.addExpression(n);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      n = NamedExpression();
                                    t.addExpression(n);
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public NamedExpression NamedExpression() throws ParseException {
  String n;
  Expression e;
    n = Name();
    jj_consume_token(THICK_ARROW);
    e = Expression();
    {if (true) return new NamedExpression(n, e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression BehaviorInvocation(QualifiedName n) throws ParseException {
  Tuple t;
    t = Tuple();
    {if (true) return new BehaviorInvocationExpression(n, t);}
    throw new Error("Missing return statement in function");
  }

  final public Expression FeatureInvocation(FeatureReference f) throws ParseException {
  Tuple t;
    t = Tuple();
    {if (true) return new FeatureInvocationExpression(f, t);}
    throw new Error("Missing return statement in function");
  }

  final public Expression SuperInvocationExpression() throws ParseException {
  QualifiedName n = null;
  Tuple t;
    jj_consume_token(SUPER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      n = QualifiedName();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    t = Tuple();
    {if (true) return new SuperInvocationExpression(n, t);}
    throw new Error("Missing return statement in function");
  }

/* INSTANCE CREATION EXPRESSIONS */
  final public Expression InstanceCreationOrSequenceConstructionExpression() throws ParseException {
  QualifiedName n;
  Tuple t;
  Expression e;
    jj_consume_token(NEW);
    n = QualifiedName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case LBRACKET:
      e = SequenceConstructionExpressionCompletion(n);
      break;
    case LPAREN:
      t = Tuple();
                  e = new InstanceCreationExpression(n, t);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* LINK OPERATION EXPRESSIONS */
  final public Expression LinkOperationCompletion(QualifiedName q) throws ParseException {
  String op;
  Tuple t;
    op = LinkOperation();
    t = LinkOperationTuple();
    {if (true) return new LinkOperationExpression(q, op, t);}
    throw new Error("Missing return statement in function");
  }

  final public String LinkOperation() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_LINK:
      t = jj_consume_token(CREATE_LINK);
      break;
    case DESTROY_LINK:
      t = jj_consume_token(DESTROY_LINK);
      break;
    case CLEAR_ASSOC:
      t = jj_consume_token(CLEAR_ASSOC);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Tuple LinkOperationTuple() throws ParseException {
  QualifiedName q;
  String n;
  Expression e;
  Expression i;
  Tuple t = new PositionalTuple();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
      if (jj_2_26(2)) {
        t = LinkOperationPositionalTuple();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
          n = Name();
                 q = new QualifiedName(); q.addName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            i = Index();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case THICK_ARROW:
              jj_consume_token(THICK_ARROW);
              t = IndexedNamedExpressionListCompletion(n, i);
              break;
            default:
              jj_la1[41] = jj_gen;
              e = ExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), i));
          ((PositionalTuple)t).addExpression(e);
              PositionalTupleExpressionListCompletion((PositionalTuple)t);
            }
            break;
          case THICK_ARROW:
            jj_consume_token(THICK_ARROW);
            t = IndexedNamedExpressionListCompletion(n, null);
            break;
          default:
            jj_la1[42] = jj_gen;
            e = NonIndexExpressionCompletion(new NameExpression(q));
        ((PositionalTuple)t).addExpression(e);
            PositionalTupleExpressionListCompletion((PositionalTuple)t);
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PositionalTuple LinkOperationPositionalTuple() throws ParseException {
  QualifiedName q;
  Expression e;
  PositionalTuple t = new PositionalTuple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      if (jj_2_27(2)) {
        q = ColonQualifiedName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
          q = DotQualifiedName();
                               q.setIsAmbiguous();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      e = NameToExpressionCompletion(q);
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
      e = NonNameExpression();
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t.addExpression(e);
    PositionalTupleExpressionListCompletion(t);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public NamedTuple IndexedNamedExpressionListCompletion(String n, Expression i) throws ParseException {
  NamedTuple t = new NamedTuple();
  Expression e;
  NamedExpression ne;
    e = Expression();
                     ne = new NamedExpression(n, i, e); t.addExpression(ne);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      ne = IndexedNamedExpression();
                                            t.addExpression(ne);
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public NamedExpression IndexedNamedExpression() throws ParseException {
  String n;
  Expression i = null;
  Expression e;
    n = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(THICK_ARROW);
    e = Expression();
    {if (true) return new NamedExpression(n, i, e);}
    throw new Error("Missing return statement in function");
  }

/* CLASS EXTENT EXPRESSIONS */
  final public Expression ClassExtentExpressionCompletion(QualifiedName q) throws ParseException {
    jj_consume_token(ALL_INSTANCES);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new ClassExtentExpression(q);}
    throw new Error("Missing return statement in function");
  }

/* SEQUENCE CONSTRUCTION EXPRESSIONS */
  final public Expression SequenceAnyExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
      jj_consume_token(ANY);
      e = SequenceConstructionExpressionCompletion(null);
      break;
    case NULL:
      jj_consume_token(NULL);
             e = new SequenceConstructionExpression();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SequenceConstructionExpressionCompletion(QualifiedName q) throws ParseException {
  SequenceConstructionExpression e = new SequenceConstructionExpression();
  SequenceElements c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      MultiplicityIndicator();
                              e.setHasMultiplicity();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACE:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
      c = SequenceElements();
                                      e.setElements(c);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    e.setTypeName(q);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void MultiplicityIndicator() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
  }

  final public SequenceElements SequenceElements() throws ParseException {
  SequenceElements c;
  Expression e1;
  Expression e2;
    if (jj_2_28(2)) {
      e1 = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_DOT:
        jj_consume_token(DOUBLE_DOT);
        e2 = Expression();
                                       c = new SequenceRange(e1, e2);
        break;
      default:
        jj_la1[52] = jj_gen;
        c = SequenceElementListCompletion(e1);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case LBRACE:
        e1 = SequenceInitializationExpression();
        c = SequenceElementListCompletion(e1);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public SequenceElements SequenceElementListCompletion(Expression e1) throws ParseException {
  SequenceExpressionList c = new SequenceExpressionList();
  Expression e2;
    c.addElement(e1);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      e2 = SequenceElement();
                                     c.addElement(e2);
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SequenceElement() throws ParseException {
  Expression e;
    if (jj_2_29(2)) {
      e = Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case LBRACE:
        e = SequenceInitializationExpression();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SequenceInitializationExpression() throws ParseException {
  SequenceConstructionExpression e = new SequenceConstructionExpression();
  SequenceElements c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    c = SequenceElements();
    jj_consume_token(RBRACE);
    e.setElements(c);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* SEQUENCE ACCESS EXPRESSIONS */
  final public Expression Index() throws ParseException {
  Expression e;
    jj_consume_token(LBRACKET);
    e = Expression();
    jj_consume_token(RBRACKET);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS */
  final public Expression SequenceOperationOrReductionOrExpansion(Expression p) throws ParseException {
  QualifiedName q;
  Token op;
  String n;
  Tuple t;
  Expression e;
  boolean ordered = false;
    jj_consume_token(ARROW);
    if (jj_2_30(2)) {
      q = QualifiedName();
      t = Tuple();
      e = new SequenceOperationExpression(p, q, t);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REDUCE:
        jj_consume_token(REDUCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ORDERED:
          jj_consume_token(ORDERED);
                           ordered = true;
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        q = QualifiedName();
      e = new SequenceReductionExpression(p, q, ordered);
        break;
      case IDENTIFIER:
        op = jj_consume_token(IDENTIFIER);
        n = Name();
        jj_consume_token(LPAREN);
        e = Expression();
        jj_consume_token(RPAREN);
      t = new PositionalTuple(); ((PositionalTuple)t).addExpression(e);
      e = new SequenceExpansionExpression(p, op.image, n, t);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* INCREMENT OR DECREMENT EXPRESSIONS */
  final public Expression PostfixOperationOrAssignment(LeftHandSide lhs) throws ParseException {
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      e1 = PostfixOperation(lhs);
      e2 = ConditionalExpressionCompletion(e1);
      break;
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
      e2 = Assignment(lhs);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostfixOperation(LeftHandSide lhs) throws ParseException {
  Expression e;
  String op;
    op = AffixOperator();
    {if (true) return new IncrementOrDecrementExpression(op, lhs);}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrefixExpression() throws ParseException {
  String op;
  LeftHandSide lhs;
  IncrementOrDecrementExpression e;
    op = AffixOperator();
    lhs = LeftHandSide();
    e = new IncrementOrDecrementExpression(op, lhs);
    e.setIsPrefix();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String AffixOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      t = jj_consume_token(INCR);
      break;
    case DECR:
      t = jj_consume_token(DECR);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* UNARY EXPRESSIONS */
  final public Expression UnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case STAR:
      e = PostfixOrCastExpression();
      break;
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      e = NonPostfixNonCastUnaryExpression();
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostfixOrCastExpression() throws ParseException {
  String n;
  QualifiedName q;
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      n = Name();
                 q = new QualifiedName(); q.addName(n);
      e2 = NameToPostfixExpressionCompletion(q);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_31(2)) {
        jj_consume_token(ANY);
        jj_consume_token(RPAREN);
        e2 = CastCompletion(null);
      } else if (jj_2_32(2147483647)) {
        q = PotentiallyAmbiguousQualifiedName();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
        case BOOLEAN_LITERAL:
        case NATURAL_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case DOLLAR:
        case STAR:
          e2 = CastCompletion(q);
          break;
        default:
          jj_la1[62] = jj_gen;
          e2 = PrimaryExpressionCompletion(new NameExpression(q));
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case IDENTIFIER:
        case UNRESTRICTED_NAME:
        case BOOLEAN_LITERAL:
        case NATURAL_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case DOLLAR:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
          e1 = Expression();
          jj_consume_token(RPAREN);
          e2 = PrimaryExpressionCompletion(e1);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e1 = BaseExpression();
      e2 = PostfixExpressionCompletion(e1);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostfixExpressionCompletion(Expression p) throws ParseException {
  Expression i;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      e = PostfixExpressionCompletion(new SequenceAccessExpression(p, i));
      break;
    default:
      jj_la1[65] = jj_gen;
      e = NonIndexPostfixExpressionCompletion(p);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonIndexPostfixExpressionCompletion(Expression p) throws ParseException {
  Expression e = p;
  FeatureReference f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ARROW:
      if (jj_2_33(2)) {
        f = Feature(p);
        e = FeatureToPostfixExpressionCompletion(f);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW:
          e = SequenceOperationOrReductionOrExpansion(p);
          e = PostfixExpressionCompletion(e);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NameToPostfixExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  PositionalTemplateBinding b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      n = Name();
                                q.addName(n);
      e = ColonQualifiedNameToPostfixExpressionCompletion(q);
      break;
    default:
      jj_la1[68] = jj_gen;
      if (jj_2_34(2)) {
        jj_consume_token(DOT);
        n = Name();
                                    q.addName(n); q.setIsAmbiguous();
        e = DotQualifiedNameToPostfixExpressionCompletion(q);
      } else if (jj_2_35(2147483647)) {
      e = new NameExpression(q);
      } else if (jj_2_36(2147483647)) {
        jj_consume_token(LT);
        q2 = QualifiedName();
        jj_consume_token(GT);
      b = new PositionalTemplateBinding(); b.addArgumentName(q2);
      q.appendBinding(b);
        e = NameToPostfixExpressionCompletion(q);
      } else {
        e = QualifiedNameToPostfixExpressionCompletion(q);
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ColonQualifiedNameToPostfixExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  FeatureReference f;
  PositionalTemplateBinding b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      n = Name();
                                q.addName(n);
      e = ColonQualifiedNameToPostfixExpressionCompletion(q);
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_37(2147483647)) {
      e = new NameExpression(q);
      } else if (jj_2_38(2147483647)) {
        jj_consume_token(LT);
        q2 = QualifiedName();
        jj_consume_token(GT);
      b = new PositionalTemplateBinding(); b.addArgumentName(q2);
      q.appendBinding(b);
        e = ColonQualifiedNameToPostfixExpressionCompletion(q);
      } else if (jj_2_39(2)) {
        f = Feature(new NameExpression(q));
        e = FeatureToPostfixExpressionCompletion(f);
      } else {
        e = QualifiedNameToPostfixExpressionCompletion(q);
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression DotQualifiedNameToPostfixExpressionCompletion(QualifiedName q) throws ParseException {
  String n;
  QualifiedName q2;
  Expression e;
  PositionalTemplateBinding b;
    if (jj_2_40(2)) {
      jj_consume_token(DOT);
      n = Name();
                                    q.addName(n); q.setIsAmbiguous();
      e = DotQualifiedNameToPostfixExpressionCompletion(q);
    } else if (jj_2_41(2147483647)) {
      e = new NameExpression(q);
    } else if (jj_2_42(2147483647)) {
      jj_consume_token(LT);
      q2 = QualifiedName();
      jj_consume_token(GT);
      b = new PositionalTemplateBinding(); b.addArgumentName(q2);
      q.appendBinding(b);
      e = DotQualifiedNameToPostfixExpressionCompletion(q);
    } else {
      e = QualifiedNameToPostfixExpressionCompletion(q);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression QualifiedNameToPostfixExpressionCompletion(QualifiedName q) throws ParseException {
  Expression e1;
  Expression e2 = new NameExpression(q);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case DOT:
    case ARROW:
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        e2 = PostfixOperation(new NameLeftHandSide(q, null));
        break;
      default:
        jj_la1[71] = jj_gen;
        if (jj_2_43(2)) {
          e1 = NameToPrimaryExpressionCompletion(q);
          e2 = PostfixExpressionCompletion(e1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            e1 = Index();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INCR:
            case DECR:
              e2 = PostfixOperation(new NameLeftHandSide(q, e1));
              break;
            default:
              jj_la1[70] = jj_gen;
              e2 = PostfixExpressionCompletion(new SequenceAccessExpression(new NameExpression(q), e1));
            }
            break;
          case ARROW:
            e1 = SequenceOperationOrReductionOrExpansion(e2);
            e2 = PostfixExpressionCompletion(e1);
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FeatureToPostfixExpressionCompletion(FeatureReference f) throws ParseException {
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      e2 = PostfixOperation(new FeatureLeftHandSide(f, null));
      break;
    case LBRACKET:
      e1 = Index();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        e2 = PostfixOperation(new FeatureLeftHandSide(f, e1));
        break;
      default:
        jj_la1[74] = jj_gen;
        e2 = PostfixExpressionCompletion(new SequenceAccessExpression(f, e1));
      }
      break;
    case LPAREN:
      e1 = FeatureInvocation(f);
      e2 = PostfixExpressionCompletion(e1);
      break;
    default:
      jj_la1[75] = jj_gen;
      e2 = NonIndexPostfixExpressionCompletion(f);
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonPostfixNonCastUnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      e = PrefixExpression();
      break;
    case PLUS:
    case MINUS:
      e = NumericUnaryExpression();
      break;
    case BANG:
      e = BooleanNegationExpression();
      break;
    case DOLLAR:
      e = IsolationExpression();
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanNegationExpression() throws ParseException {
  Expression e;
    jj_consume_token(BANG);
    e = UnaryExpression();
    {if (true) return new UnaryExpression("!", e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression NumericUnaryExpression() throws ParseException {
  String op;
  Expression e;
    op = NumericUnaryOperator();
    e = UnaryExpression();
    {if (true) return new UnaryExpression(op, e);}
    throw new Error("Missing return statement in function");
  }

  final public String NumericUnaryOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Expression IsolationExpression() throws ParseException {
  Expression e;
    jj_consume_token(DOLLAR);
    e = UnaryExpression();
    {if (true) return new UnaryExpression("$", e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastExpression() throws ParseException {
  QualifiedName q;
  Expression e;
    jj_consume_token(LPAREN);
    q = TypeName();
    jj_consume_token(RPAREN);
    e = CastCompletion(q);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastCompletion(QualifiedName q) throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case STAR:
      e = PostfixOrCastExpression();
      break;
    case BANG:
      e = BooleanNegationExpression();
      break;
    case DOLLAR:
      e = IsolationExpression();
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new CastExpression(q, e);}
    throw new Error("Missing return statement in function");
  }

/* ARITHMETIC EXPRESSIONS */
  final public Expression MultiplicativeExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = MultiplicativeExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpressionCompletion(Expression u) throws ParseException {
  Expression e1 = u;
  String op;
  Expression e2;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_17;
      }
      op = MultiplicativeOperator();
      e2 = UnaryExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      t = jj_consume_token(STAR);
      break;
    case SLASH:
      t = jj_consume_token(SLASH);
      break;
    case REM:
      t = jj_consume_token(REM);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = AdditiveExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = MultiplicativeExpressionCompletion(u);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_18;
      }
      op = AdditiveOperator();
      e2 = MultiplicativeExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* RELATIONAL EXPRESSIONS */
  final public Expression RelationalExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = RelationalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
  QualifiedName q;
  TemplateBinding b;
    e1 = AdditiveExpressionCompletion(u);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_19;
      }
      op = RelationalOperator();
      e2 = AdditiveExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String RelationalOperator() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t = jj_consume_token(LT);
               s = t.image;
      break;
    case GT:
    case LE:
    case GE:
      s = NonLTRelationalOperator();
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String NonLTRelationalOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      t = jj_consume_token(GT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* CLASSIFICATION EXPRESSIONS */
  final public Expression ClassificationExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ClassificationExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ClassificationExpressionCompletion(Expression u) throws ParseException {
  Expression e;
  String op;
  QualifiedName n;
    e = RelationalExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASTYPE:
    case INSTANCEOF:
      op = ClassificationOperator();
      n = QualifiedName();
      e = new ClassificationExpression(e, op, n);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String ClassificationOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
      break;
    case HASTYPE:
      t = jj_consume_token(HASTYPE);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* EQUALITY EXPRESSIONS */
  final public Expression EqualityExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ClassificationExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = ClassificationExpressionCompletion(u);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_20;
      }
      op = EqualityOperator();
      e2 = ClassificationExpression();
      e1 = new BinaryExpression(e1, op, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String EqualityOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* LOGICAL EXPRESSIONS */
  final public Expression AndExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = AndExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = EqualityExpressionCompletion(u);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_21;
      }
      jj_consume_token(LOGICAL_AND);
      e2 = EqualityExpression();
      e1 = new BinaryExpression(e1, "&", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ExclusiveOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = AndExpressionCompletion(u);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_22;
      }
      jj_consume_token(XOR);
      e2 = AndExpression();
      e1 = new BinaryExpression(e1, "^", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = InclusiveOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = ExclusiveOrExpressionCompletion(u);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_23;
      }
      jj_consume_token(LOGICAL_OR);
      e2 = ExclusiveOrExpression();
      e1 = new BinaryExpression(e1, "|", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL LOGICAL EXPRESSIONS */
  final public Expression ConditionalAndExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalAndExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = InclusiveOrExpressionCompletion(u);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_24;
      }
      jj_consume_token(SC_AND);
      e2 = InclusiveOrExpression();
      e1 = new ConditionalBinaryExpression(e1, "&&", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = ConditionalAndExpressionCompletion(u);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_25;
      }
      jj_consume_token(SC_OR);
      e2 = ConditionalAndExpression();
      e1 = new ConditionalBinaryExpression(e1, "||", e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL-TEST EXPRESSIONS */
  final public Expression ConditionalExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
  Expression e3;
    e1 = ConditionalOrExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      e2 = Expression();
      jj_consume_token(COLON);
      e3 = ConditionalExpression();
      e1 = new ConditionalExpression(e1, e2, e3);
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* ASSIGNMENT EXPRESSIONS */
  final public Expression Assignment(LeftHandSide lhs) throws ParseException {
  String op;
  Expression e;
    op = AssignmentOperator();
    e = Expression();
    {if (true) return new AssignmentExpression(lhs, op, e);}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSide LeftHandSide() throws ParseException {
   QualifiedName q;
   LeftHandSide lhs;
   Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      q = PotentiallyAmbiguousQualifiedName();
      lhs = NameToLeftHandSideCompletion(q);
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e = BaseExpression();
      lhs = LeftHandSideCompletion(e);
      break;
    case LPAREN:
      e = ParenthesizedExpression();
      lhs = LeftHandSideCompletion(e);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSide LeftHandSideCompletion(Expression p) throws ParseException {
  Expression i;
  LeftHandSide lhs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      i = Index();
      lhs = LeftHandSideCompletion(new SequenceAccessExpression(p, i));
      break;
    case DOT:
    case ARROW:
      lhs = NonIndexLeftHandSideCompletion(p);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSide NonIndexLeftHandSideCompletion(Expression p) throws ParseException {
  Expression e;
  FeatureReference f;
  LeftHandSide lhs;
    if (jj_2_44(2)) {
      f = Feature(p);
      lhs = FeatureToLeftHandSideCompletion(f);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        e = SequenceOperationOrReductionOrExpansion(p);
        lhs = LeftHandSideCompletion(e);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSide NameToLeftHandSideCompletion(QualifiedName q) throws ParseException {
  Expression e;
  LeftHandSide lhs = new NameLeftHandSide(q, null);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case DOT:
    case ARROW:
      if (jj_2_45(2)) {
        e = NameToPrimaryExpressionCompletion(q);
        lhs = LeftHandSideCompletion(e);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          e = Index();
                  lhs = new NameLeftHandSide(q, e);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case DOT:
          case ARROW:
            lhs = LeftHandSideCompletion(new SequenceAccessExpression(new NameExpression(q), e));
            break;
          default:
            jj_la1[99] = jj_gen;
            ;
          }
          break;
        case DOT:
        case ARROW:
          lhs = NonIndexLeftHandSideCompletion(new NameExpression(q));
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSide FeatureToLeftHandSideCompletion(FeatureReference f) throws ParseException {
  Expression e;
  LeftHandSide lhs = new FeatureLeftHandSide(f, null);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
    case DOT:
    case ARROW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        e = Index();
                  lhs = new FeatureLeftHandSide(f, e);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case DOT:
        case ARROW:
          lhs = LeftHandSideCompletion(new SequenceAccessExpression(f, e));
          break;
        default:
          jj_la1[102] = jj_gen;
          ;
        }
        break;
      case LPAREN:
        e = FeatureInvocation(f);
        lhs = LeftHandSideCompletion(e);
        break;
      case DOT:
      case ARROW:
        lhs = NonIndexLeftHandSideCompletion(f);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public String AssignmentOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**************
 * STATEMENTS *
 **************/
  final public Block StatementSequence() throws ParseException {
  Statement s;
  Block b = new Block();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH_SLASH_AT:
      case SLASH_STAR_AT:
      case DOCUMENTATION_COMMENT:
      case ACCEPT:
      case ANY:
      case BREAK:
      case CLASSIFY:
      case DO:
      case FOR:
      case IF:
      case LET:
      case NEW:
      case NULL:
      case RETURN:
      case SUPER:
      case SWITCH:
      case THIS:
      case WHILE:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case DOLLAR:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_26;
      }
      s = DocumentedStatement();
                                b.addStatement(s);
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Statement DocumentedStatement() throws ParseException {
  Token t;
  String c = null;
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    s = Statement();
    s.addDocumentation(c);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH_SLASH_AT:
      s = AnnotatedStatement();
      break;
    case SLASH_STAR_AT:
      s = InLineStatement();
      break;
    case LBRACE:
      s = BlockStatement();
      break;
    case SEMICOLON:
      s = EmptyStatement();
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
    case BOOLEAN_LITERAL:
    case NATURAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case DOLLAR:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
      s = LocalNameDeclarationOrExpressionStatement();
      break;
    case LET:
      s = LocalNameDeclarationStatement();
      break;
    case IF:
      s = IfStatement();
      break;
    case SWITCH:
      s = SwitchStatement();
      break;
    case WHILE:
      s = WhileStatement();
      break;
    case FOR:
      s = ForStatement();
      break;
    case DO:
      s = DoStatement();
      break;
    case BREAK:
      s = BreakStatement();
      break;
    case RETURN:
      s = ReturnStatement();
      break;
    case ACCEPT:
      s = AcceptStatement();
      break;
    case CLASSIFY:
      s = ClassifyStatement();
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* BLOCK */
  final public Block Block() throws ParseException {
  Block b;
    jj_consume_token(LBRACE);
    b = StatementSequence();
    jj_consume_token(RBRACE);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* ANNOTATED STATEMENTS */
  final public Statement AnnotatedStatement() throws ParseException {
  ArrayList<Annotation> al;
  Statement s;
    jj_consume_token(SLASH_SLASH_AT);
    al = Annotations();
    jj_consume_token(EOL);
    s = Statement();
    for (Annotation an: al) {
      s.addAnnotation(an);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Annotation> Annotations() throws ParseException {
  Annotation a;
  ArrayList<Annotation> al = new ArrayList<Annotation>();
    a = Annotation();
                      al.add(a);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_27;
      }
      jj_consume_token(AT);
      a = Annotation();
                                                             al.add(a);
    }
     {if (true) return al;}
    throw new Error("Missing return statement in function");
  }

  final public Annotation Annotation() throws ParseException {
  Token t;
  NameList nl = null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      nl = NameList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    {if (true) return new Annotation(t.image, nl);}
    throw new Error("Missing return statement in function");
  }

  final public NameList NameList() throws ParseException {
  NameList nl = new NameList();
  String n;
    n = Name();
               nl.add(n);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      n = Name();
                                                   nl.add(n);
    }
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* IN-LINE STATEMENTS */
  final public InLineStatement InLineStatement() throws ParseException {
  Token t;
  String n;
  Token d;
    jj_consume_token(SLASH_STAR_AT);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    n = Name();
    jj_consume_token(RPAREN);
    d = jj_consume_token(DOCUMENTATION_COMMENT);
    {if (true) return new InLineStatement(t.image, n, d.image);}
    throw new Error("Missing return statement in function");
  }

/* BLOCK STATEMENTS */
  final public BlockStatement BlockStatement() throws ParseException {
  Block b;
    b = Block();
    {if (true) return new BlockStatement(b);}
    throw new Error("Missing return statement in function");
  }

/* EMPTY STATEMENTS */
  final public EmptyStatement EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
    {if (true) return new EmptyStatement();}
    throw new Error("Missing return statement in function");
  }

/* LOCAL NAME DECLARATION AND EXPRESSION STATEMENTS */
  final public Statement LocalNameDeclarationOrExpressionStatement() throws ParseException {
  QualifiedName q;
  String n;
  Expression e;
  LocalNameDeclarationStatement s1 = new LocalNameDeclarationStatement();
  Statement s2;
    if (jj_2_46(2147483647)) {
      q = PotentiallyAmbiguousQualifiedName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        MultiplicityIndicator();
                                s1.setHasMultiplicity();
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      n = Name();
                 s1.setName(n); s1.setTypeName(q);
      LocalNameDeclarationStatementCompletion(s1);
                                                  s2 = s1;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case BOOLEAN_LITERAL:
      case NATURAL_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case BANG:
      case DOLLAR:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
        e = Expression();
        jj_consume_token(SEMICOLON);
                                   s2 = new ExpressionStatement(e);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return s2;}
    throw new Error("Missing return statement in function");
  }

  final public LocalNameDeclarationStatement LocalNameDeclarationStatement() throws ParseException {
  String n;
  QualifiedName q;
  LocalNameDeclarationStatement s = new LocalNameDeclarationStatement();
    jj_consume_token(LET);
    n = Name();
                     s.setName(n);
    jj_consume_token(COLON);
    q = TypeName();
                                                              s.setTypeName(q);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      MultiplicityIndicator();
                              s.setHasMultiplicity();
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    LocalNameDeclarationStatementCompletion(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void LocalNameDeclarationStatementCompletion(LocalNameDeclarationStatement s) throws ParseException {
  Expression e;
    jj_consume_token(ASSIGN);
    e = InitializationExpression();
                                             s.setExpression(e);
    jj_consume_token(SEMICOLON);
  }

  final public Expression InitializationExpression() throws ParseException {
  Expression e;
    if (jj_2_47(2)) {
      e = Expression();
    } else if (jj_2_48(2)) {
      e = SequenceInitializationExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        e = InstanceInitializationExpression();
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InstanceInitializationExpression() throws ParseException {
  Tuple t;
    jj_consume_token(NEW);
    t = Tuple();
    {if (true) return new InstanceCreationExpression(null, t);}
    throw new Error("Missing return statement in function");
  }

/* IF STATEMENTS */
  final public IfStatement IfStatement() throws ParseException {
  IfStatement s = new IfStatement();
  Block b;
    jj_consume_token(IF);
    SequentialClauses(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      b = FinalClause();
                                                  s.setFinalClause(b);
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void SequentialClauses(IfStatement s) throws ParseException {
  ConcurrentClauses cs;
    cs = ConcurrentClauses();
                             s.addNonFinalClauses(cs);
    label_29:
    while (true) {
      if (jj_2_49(2)) {
        ;
      } else {
        break label_29;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      cs = ConcurrentClauses();
                                                        s.addNonFinalClauses(cs);
    }
  }

  final public ConcurrentClauses ConcurrentClauses() throws ParseException {
  ConcurrentClauses cs = new ConcurrentClauses();
  NonFinalClause c;
    c = NonFinalClause();
                         cs.addClause(c);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_30;
      }
      jj_consume_token(OR);
      jj_consume_token(IF);
      c = NonFinalClause();
                                     cs.addClause(c);
    }
    {if (true) return cs;}
    throw new Error("Missing return statement in function");
  }

  final public NonFinalClause NonFinalClause() throws ParseException {
  Expression e;
  Block b;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    {if (true) return new NonFinalClause(e, b);}
    throw new Error("Missing return statement in function");
  }

  final public Block FinalClause() throws ParseException {
  Block b;
    jj_consume_token(ELSE);
    b = Block();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* SWITCH STATEMENTS */
  final public SwitchStatement SwitchStatement() throws ParseException {
  SwitchStatement s;
  Expression e;
  SwitchClause c;
  Block b;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
                                                s = new SwitchStatement(e);
    jj_consume_token(LBRACE);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_31;
      }
      c = SwitchClause();
                                  s.addNonDefaultClause(c);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_:
      b = SwitchDefaultClause();
                                s.setDefaultClause(b);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchClause SwitchClause() throws ParseException {
  SwitchClause c = new SwitchClause();
  Expression e;
  Block b;
    e = SwitchCase();
                     c.addCase(e);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_32;
      }
      e = SwitchCase();
                                                          c.addCase(e);
    }
    b = Block();
                c.setBlock(b);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SwitchCase() throws ParseException {
  Expression e;
    jj_consume_token(CASE);
    e = Expression();
    jj_consume_token(COLON);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Block SwitchDefaultClause() throws ParseException {
  Block b;
    jj_consume_token(DEFAULT_);
    jj_consume_token(COLON);
    b = Block();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* WHILE STATEMENTS */
  final public WhileStatement WhileStatement() throws ParseException {
  Expression e;
  Block b;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    {if (true) return new WhileStatement(e, b);}
    throw new Error("Missing return statement in function");
  }

/* DO STATEMENTS */
  final public DoStatement DoStatement() throws ParseException {
  Block b;
  Expression e;
    jj_consume_token(DO);
    b = Block();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return new DoStatement(b, e);}
    throw new Error("Missing return statement in function");
  }

/* FOR STATEMENTS */
  final public ForStatement ForStatement() throws ParseException {
  ForStatement s = new ForStatement();
  Block b;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    ForControl(s);
    jj_consume_token(RPAREN);
    b = Block();
    s.setBody(b);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void ForControl(ForStatement s) throws ParseException {
  LoopVariableDefinition d;
  Expression e;
    d = LoopVariableDefinition();
                                 s.addVariableDefinition(d);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      LoopVariableDefinition();
                                       s.addVariableDefinition(d);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      e = Expression();
                               s.setCondition(e);
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
  }

  final public LoopVariableDefinition LoopVariableDefinition() throws ParseException {
  String n;
  QualifiedName q = null;
  Expression e1;
  Expression e2 = null;
  LoopVariableDefinition d = new LoopVariableDefinition();
    if (jj_2_50(2)) {
      n = Name();
      jj_consume_token(IN);
      e1 = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_DOT:
        jj_consume_token(DOUBLE_DOT);
        e2 = Expression();
        break;
      default:
        jj_la1[123] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        q = QualifiedName();
        n = Name();
        jj_consume_token(COLON);
        e1 = Expression();
      d.setTypeIsInferred();
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    d.setVariable(n);
    d.setTypeName(q);
    d.setExpression1(e1);
    d.setExpression2(e2);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* BREAK STATEMENTS */
  final public BreakStatement BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
    {if (true) return new BreakStatement();}
    throw new Error("Missing return statement in function");
  }

/* RETURN STATEMENTS */
  final public ReturnStatement ReturnStatement() throws ParseException {
  Expression e;
    jj_consume_token(RETURN);
    e = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ReturnStatement(e);}
    throw new Error("Missing return statement in function");
  }

/* ACCEPT STATEMENTS */
  final public AcceptStatement AcceptStatement() throws ParseException {
  AcceptStatement s;
  AcceptBlock c;
    c = AcceptClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      s = SimpleAcceptStatementCompletion(c);
      break;
    case LBRACE:
      s = CompoundAcceptStatementCompletion(c);
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AcceptStatement SimpleAcceptStatementCompletion(AcceptBlock b) throws ParseException {
  AcceptStatement s = new AcceptStatement();
    jj_consume_token(SEMICOLON);
    s.addAcceptBlock(b);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AcceptStatement CompoundAcceptStatementCompletion(AcceptBlock a1) throws ParseException {
  AcceptStatement s = new AcceptStatement();
  Block b;
  AcceptBlock a;
    b = Block();
                a1.setBlock(b); s.addAcceptBlock(a1);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_34;
      }
      jj_consume_token(OR);
      a = AcceptBlock();
                             s.addAcceptBlock(a);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AcceptBlock AcceptBlock() throws ParseException {
  AcceptBlock a;
  Block b;
    a = AcceptClause();
    b = Block();
    a.setBlock(b);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public AcceptBlock AcceptClause() throws ParseException {
  String n = null;
  QualifiedNameList nl;
    jj_consume_token(ACCEPT);
    jj_consume_token(LPAREN);
    if (jj_2_51(2)) {
      n = Name();
      jj_consume_token(COLON);
    } else {
      ;
    }
    nl = QualifiedNameList();
    jj_consume_token(RPAREN);
    {if (true) return new AcceptBlock(n, nl);}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedNameList ClassificationFromClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(FROM);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedNameList ClassificationToClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(TO);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* CLASSIFY STATEMENTS */
  final public ClassifyStatement ClassifyStatement() throws ParseException {
  ClassifyStatement s;
  Expression e;
    jj_consume_token(CLASSIFY);
    e = Expression();
                                s = new ClassifyStatement(e);
    ClassificationClause(s);
    jj_consume_token(SEMICOLON);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassificationClause(ClassifyStatement s) throws ParseException {
  QualifiedNameList nl;
    if (jj_2_52(2)) {
      nl = ClassificationFromClause();
                                    s.setFromList(nl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        ClassificationToClause();
                               s.setToList(nl);
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
      case TO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ReclassifyAllClause();
                            s.setFromList(new QualifiedNameList());
          break;
        default:
          jj_la1[128] = jj_gen;
          ;
        }
        nl = ClassificationToClause();
                                  s.setToList(nl);
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReclassifyAllClause() throws ParseException {
    jj_consume_token(FROM);
    jj_consume_token(STAR);
  }

  final public QualifiedNameList QualifiedNameList() throws ParseException {
  QualifiedNameList nl = new QualifiedNameList();
  QualifiedName n;
    n = QualifiedName();
                        nl.add(n);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      n = QualifiedName();
                                  nl.add(n);
    }
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/*********
 * UNITS *
 *********/
  final public UnitDefinition UnitDefinition() throws ParseException {
  QualifiedName n;
  ImportReference i;
  Token t;
  StereotypeAnnotationList sl;
  NamespaceDefinition d;
  UnitDefinition u = new UnitDefinition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      n = NamespaceDeclaration();
                                 u.setNamespace(n);
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_36;
      }
      i = ImportDeclaration();
                              u.addImport(i);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  u.addDocumentation(t.image);
      break;
    default:
      jj_la1[133] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    d = NamespaceDefinition();
    jj_consume_token(0);
    d.setAnnotations(sl);
    u.setDefinition(d);
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public StereotypeAnnotationList StereotypeAnnotations() throws ParseException {
  StereotypeAnnotation s;
  StereotypeAnnotationList sl = new StereotypeAnnotationList();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[134] = jj_gen;
        break label_37;
      }
      s = StereotypeAnnotation();
                                 sl.add(s);
    }
    {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  final public StereotypeAnnotation StereotypeAnnotation() throws ParseException {
  QualifiedName n;
  StereotypeAnnotation s;
    jj_consume_token(AT);
    n = QualifiedName();
                             s = new StereotypeAnnotation(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      TaggedValues(s);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void TaggedValues(StereotypeAnnotation s) throws ParseException {
  QualifiedNameList nl;
  TaggedValueList tl;
    if (jj_2_53(2)) {
      nl = QualifiedNameList();
                             s.setNames(nl);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        tl = TaggedValueList();
                           s.setTaggedValues(tl);
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public TaggedValueList TaggedValueList() throws ParseException {
  TaggedValue v;
  TaggedValueList tl = new TaggedValueList();
    v = TaggedValue();
                      tl.add(v);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_38;
      }
      jj_consume_token(COMMA);
      v = TaggedValue();
                            tl.add(v);
    }
    {if (true) return tl;}
    throw new Error("Missing return statement in function");
  }

  final public TaggedValue TaggedValue() throws ParseException {
  String n;
  Token t;
  String v = "";
    n = Name();
    jj_consume_token(THICK_ARROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                            v = t.image;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                            v = t.image;
      break;
    case STAR:
      t = jj_consume_token(STAR);
                            v = t.image;
      break;
    case NATURAL_LITERAL:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
                         v = "-";
          break;
        default:
          jj_la1[138] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      t = jj_consume_token(NATURAL_LITERAL);
                                                              v = v + t.image;
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TaggedValue(n, v);}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName NamespaceDeclaration() throws ParseException {
  QualifiedName n;
    jj_consume_token(NAMESPACE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ImportReference ImportDeclaration() throws ParseException {
  String v;
  ImportReference i;
    v = ImportVisibilityIndicator();
    jj_consume_token(IMPORT);
    i = ImportReference();
    jj_consume_token(SEMICOLON);
    i.setVisibility(v);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String ImportVisibilityIndicator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      t = jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ImportReference ImportReference() throws ParseException {
  String n;
  QualifiedName q;
  String a;
  ImportReference i;
    if (jj_2_54(3)) {
      q = ColonQualifiedName();
                               i = new ImportReference(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case DOUBLE_COLON:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_COLON:
          jj_consume_token(DOUBLE_COLON);
          jj_consume_token(STAR);
                              i.setIsPackageImport();
          break;
        case AS:
          a = AliasDefinition();
                              i.setAlias(a);
          break;
        default:
          jj_la1[142] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[143] = jj_gen;
        ;
      }
    } else if (jj_2_55(3)) {
      q = DotQualifiedName();
                             i = new ImportReference(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(STAR);
                     i.setIsPackageImport();
          break;
        case AS:
          a = AliasDefinition();
                              i.setAlias(a);
          break;
        default:
          jj_la1[144] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[145] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        n = Name();
                 q = new QualifiedName(); q.addName(n); i = new ImportReference(q);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
        case DOT:
        case DOUBLE_COLON:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case DOUBLE_COLON:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOUBLE_COLON:
              jj_consume_token(DOUBLE_COLON);
              break;
            case DOT:
              jj_consume_token(DOT);
              break;
            default:
              jj_la1[146] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(STAR);
                                          i.setIsPackageImport();
            break;
          case AS:
            a = AliasDefinition();
                              i.setAlias(a);
            break;
          default:
            jj_la1[147] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[148] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String AliasDefinition() throws ParseException {
  String n;
    jj_consume_token(AS);
    n = Name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/* NAMESPACES */
  final public NamespaceDefinition NamespaceDefinition() throws ParseException {
  NamespaceDefinition d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      d = PackageDefinition();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case DATATYPE:
    case ENUM:
    case SIGNAL:
      d = ClassifierDefinition();
      break;
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public String VisibilityIndicator() throws ParseException {
  String v;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PUBLIC:
      v = ImportVisibilityIndicator();
      break;
    case PROTECTED:
      t = jj_consume_token(PROTECTED);
                      v = t.image;
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/* PACKAGES */
  final public String PackageDeclaration() throws ParseException {
  String n;
    jj_consume_token(PACKAGE);
    n = Name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public PackageDefinition PackageDefinition() throws ParseException {
  String n;
  PackageDefinition d;
    n = PackageDeclaration();
                             d = new PackageDefinition(n);
    PackageBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public PackageDefinition PackageDefinitionOrStub() throws ParseException {
  String n;
  PackageDefinition d;
    n = PackageDeclaration();
                             d = new PackageDefinition(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      PackageBody(d);
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void PackageBody(PackageDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PRIVATE:
      case PUBLIC:
      case AT:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_39;
      }
      m = PackagedElement();
                                     d.addOwnedMember(m);
    }
    jj_consume_token(RBRACE);
  }

  final public Member PackagedElement() throws ParseException {
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    v = ImportVisibilityIndicator();
    m = PackagedElementDefinition();
    m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member PackagedElementDefinition() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      m = PackageDefinitionOrStub();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case DATATYPE:
    case ENUM:
    case SIGNAL:
      m = ClassifierDefinitionOrStub();
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/***************
 * CLASSIFIERS *
 ***************/
  final public NamespaceDefinition ClassifierDefinition() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_56(2)) {
      d = ClassDefinition();
    } else if (jj_2_57(2)) {
      d = ActiveClassDefinition();
    } else if (jj_2_58(2)) {
      d = DataTypeDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDefinition();
        break;
      default:
        jj_la1[156] = jj_gen;
        if (jj_2_59(2)) {
          d = AssociationDefinition();
        } else if (jj_2_60(2)) {
          d = SignalDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDefinition();
            break;
          default:
            jj_la1[157] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public NamespaceDefinition ClassifierDefinitionOrStub() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_61(2)) {
      d = ClassDefinitionOrStub();
    } else if (jj_2_62(2)) {
      d = ActiveClassDefinitionOrStub();
    } else if (jj_2_63(2)) {
      d = DataTypeDefinitionOrStub();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDefinitionOrStub();
        break;
      default:
        jj_la1[158] = jj_gen;
        if (jj_2_64(2)) {
          d = AssociationDefinitionOrStub();
        } else if (jj_2_65(2)) {
          d = SignalDefinitionOrStub();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDefinitionOrStub();
            break;
          default:
            jj_la1[159] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassifierSignature(ClassifierDefinition d) throws ParseException {
  String n;
  QualifiedNameList nl;
    n = Name();
               d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TemplateParameters(d);
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
  }

  final public void TemplateParameters(ClassifierDefinition d) throws ParseException {
  ClassifierTemplateParameter p;
    jj_consume_token(LT);
    p = ClassifierTemplateParameter();
                                           d.addOwnedMember(p);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[162] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      p = ClassifierTemplateParameter();
                                                d.addOwnedMember(p);
    }
    jj_consume_token(GT);
  }

  final public ClassifierTemplateParameter ClassifierTemplateParameter() throws ParseException {
  Token t;
  String n;
  QualifiedName q;
  QualifiedNameList nl;
  ClassifierTemplateParameter p = new ClassifierTemplateParameter();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  p.addDocumentation(t.image);
      break;
    default:
      jj_la1[163] = jj_gen;
      ;
    }
    n = Name();
               p.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      jj_consume_token(SPECIALIZES);
      q = QualifiedName();
      nl = new QualifiedNameList();
      nl.add(q);
      p.setSpecialization(nl);
      break;
    default:
      jj_la1[164] = jj_gen;
      ;
    }
    p.setVisibility("private");
    p.setIsAbstract();
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedNameList SpecializationClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(SPECIALIZES);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* CLASSES */
  final public ClassDefinition ClassDeclaration() throws ParseException {
  ClassDefinition d = new ClassDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[165] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    ClassifierSignature(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ClassDefinition ClassDefinition() throws ParseException {
  ClassDefinition d;
    d = ClassDeclaration();
    ClassBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ClassDefinition ClassDefinitionOrStub() throws ParseException {
  ClassDefinition d;
    d = ClassDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      ClassBody(d);
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassBody(ClassDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case ASSOC:
      case CLASS:
      case DATATYPE:
      case ENUM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SIGNAL:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case AT:
        ;
        break;
      default:
        jj_la1[167] = jj_gen;
        break label_41;
      }
      m = ClassMember();
                                 d.addOwnedMember(m);
    }
    jj_consume_token(RBRACE);
  }

  final public Member ClassMember() throws ParseException {
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      v = VisibilityIndicator();
      break;
    default:
      jj_la1[169] = jj_gen;
      ;
    }
    m = ClassMemberDefinition();
    m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member ClassMemberDefinition() throws ParseException {
  Member m;
    if (jj_2_66(2)) {
      m = ClassifierDefinitionOrStub();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        m = FeatureDefinitionOrStub();
        break;
      default:
        jj_la1[170] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ACTIVE CLASSES */
  final public ActiveClassDefinition ActiveClassDeclaration() throws ParseException {
  ActiveClassDefinition d = new ActiveClassDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[171] = jj_gen;
      ;
    }
    jj_consume_token(ACTIVE);
    jj_consume_token(CLASS);
    ClassifierSignature(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActiveClassDefinition ActiveClassDefinition() throws ParseException {
  ActiveClassDefinition d;
    d = ActiveClassDeclaration();
    ActiveClassBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActiveClassDefinition ActiveClassDefinitionOrStub() throws ParseException {
  ActiveClassDefinition d;
    d = ActiveClassDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      ActiveClassBody(d);
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ActiveClassBody(ActiveClassDefinition d) throws ParseException {
  Member m;
  ActivityDefinition a;
    jj_consume_token(LBRACE);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case ASSOC:
      case CLASS:
      case DATATYPE:
      case ENUM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RECEIVE:
      case SIGNAL:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case AT:
        ;
        break;
      default:
        jj_la1[173] = jj_gen;
        break label_42;
      }
      m = ActiveClassMember();
                                       d.addOwnedMember(m);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      a = BehaviorClause();
                                d.setClassifierBehavior(a);
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
  }

  final public ActivityDefinition BehaviorClause() throws ParseException {
  ActivityDefinition a = new ActivityDefinition();
  Block b;
  String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      b = Block();
                        a.setBody(b);
      break;
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      n = Name();
                       a.setName(n); a.setIsStub();
      break;
    default:
      jj_la1[175] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          a.setVisibility("private");
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Member ActiveClassMember() throws ParseException {
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      v = VisibilityIndicator();
      break;
    default:
      jj_la1[177] = jj_gen;
      ;
    }
    m = ActiveClassMemberDefinition();
    m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member ActiveClassMemberDefinition() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case ASSOC:
    case CLASS:
    case DATATYPE:
    case ENUM:
    case SIGNAL:
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      m = ClassMemberDefinition();
      break;
    default:
      jj_la1[178] = jj_gen;
      if (jj_2_67(3)) {
        m = ActiveFeatureDefinitionOrStub();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* DATA TYPES */
  final public DataTypeDefinition DataTypeDeclaration() throws ParseException {
  DataTypeDefinition d = new DataTypeDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                  d.setIsAbstract();
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    jj_consume_token(DATATYPE);
    ClassifierSignature(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public DataTypeDefinition DataTypeDefinition() throws ParseException {
  DataTypeDefinition d;
    d = DataTypeDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public DataTypeDefinition DataTypeDefinitionOrStub() throws ParseException {
  DataTypeDefinition d;
    d = DataTypeDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      StructuredBody(d);
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void StructuredBody(ClassifierDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PUBLIC:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
      case AT:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_43;
      }
      m = StructuredMember();
                                      d.addOwnedMember(m);
    }
    jj_consume_token(RBRACE);
  }

  final public Member StructuredMember() throws ParseException {
  Token t;
  String c = null;
  StereotypeAnnotationList sl;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[182] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
                   v = t.image;
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
    m = PropertyDefinition();
    m.addDocumentation(c);
    m.setAnnotations(sl);
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ASSOCIATIONS */
  final public AssociationDefinition AssociationDeclaration() throws ParseException {
  AssociationDefinition d = new AssociationDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
    jj_consume_token(ASSOC);
    ClassifierSignature(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationDefinition AssociationDefinition() throws ParseException {
  AssociationDefinition d;
    d = AssociationDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationDefinition AssociationDefinitionOrStub() throws ParseException {
  AssociationDefinition d;
    d = AssociationDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      StructuredBody(d);
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* ENUMERATIONS */
  final public EnumerationDefinition EnumerationDeclaration() throws ParseException {
  EnumerationDefinition d = new EnumerationDefinition();
  String n;
  QualifiedNameList nl;
    jj_consume_token(ENUM);
    n = Name();
                      d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[186] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EnumerationDefinition EnumerationDefinition() throws ParseException {
  EnumerationDefinition d;
    d = EnumerationDeclaration();
    EnumerationBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EnumerationDefinition EnumerationDefinitionOrStub() throws ParseException {
  EnumerationDefinition d;
    d = EnumerationDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      EnumerationBody(d);
      break;
    default:
      jj_la1[187] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void EnumerationBody(EnumerationDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    m = EnumerationLiteralName();
                                          d.addOwnedMember(m);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[188] = jj_gen;
        break label_44;
      }
      jj_consume_token(COMMA);
      m = EnumerationLiteralName();
                                           d.addOwnedMember(m);
    }
    jj_consume_token(RBRACE);
  }

  final public EnumerationLiteralName EnumerationLiteralName() throws ParseException {
  Token t;
  String c = null;
  String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[189] = jj_gen;
      ;
    }
    n = Name();
    {if (true) return new EnumerationLiteralName(n, c);}
    throw new Error("Missing return statement in function");
  }

/* SIGNALS */
  final public SignalDefinition SignalDeclaration() throws ParseException {
  SignalDefinition d = new SignalDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[190] = jj_gen;
      ;
    }
    jj_consume_token(SIGNAL);
    ClassifierSignature(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public SignalDefinition SignalDefinition() throws ParseException {
  SignalDefinition d;
    d = SignalDeclaration();
    StructuredBody(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public SignalDefinition SignalDefinitionOrStub() throws ParseException {
  SignalDefinition d;
    d = SignalDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      StructuredBody(d);
      break;
    default:
      jj_la1[191] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* ACTIVITIES */
  final public ActivityDefinition ActivityDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  ActivityDefinition d = new ActivityDefinition();
  String n;
    jj_consume_token(ACTIVITY);
    n = Name();
                          d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TemplateParameters(d);
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypePart(t);
                          p.setDirection("return"); d.addOwnedMember(p);
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActivityDefinition ActivityDefinition() throws ParseException {
  ActivityDefinition a;
  Block b;
    a = ActivityDeclaration();
    b = Block();
    a.setBody(b);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ActivityDefinition ActivityDefinitionOrStub() throws ParseException {
  ActivityDefinition a;
  Block b;
    a = ActivityDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  a.setIsStub();
      break;
    case LBRACE:
      b = Block();
                  a.setBody(b);
      break;
    default:
      jj_la1[194] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void FormalParameters(NamespaceDefinition d) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
    case IN:
    case INOUT:
    case OUT:
    case AT:
      FormalParameterList(d);
      break;
    default:
      jj_la1[195] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FormalParameterList(NamespaceDefinition d) throws ParseException {
  FormalParameter p;
    p = FormalParameter();
                          d.addOwnedMember(p);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[196] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      p = FormalParameter();
                                    d.addOwnedMember(p);
    }
  }

  final public FormalParameter FormalParameter() throws ParseException {
  Token t;
  StereotypeAnnotationList sl;
  String d;
  String n;
  TypedElementDeclaration e = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  p.addDocumentation(t.image);
      break;
    default:
      jj_la1[197] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
                                 p.setAnnotations(sl);
    d = ParameterDirection();
                             p.setDirection(d);
    n = Name();
               p.setName(n);
    jj_consume_token(COLON);
    TypePart(e);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public String ParameterDirection() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      t = jj_consume_token(IN);
      break;
    case OUT:
      t = jj_consume_token(OUT);
      break;
    case INOUT:
      t = jj_consume_token(INOUT);
      break;
    default:
      jj_la1[198] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* FEATURES */
  final public Member FeatureDefinitionOrStub() throws ParseException {
  Member m;
    if (jj_2_68(2)) {
      m = AttributeDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case IDENTIFIER:
      case UNRESTRICTED_NAME:
        m = OperationDefinitionOrStub();
        break;
      default:
        jj_la1[199] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member ActiveFeatureDefinitionOrStub() throws ParseException {
  Member m;
    if (jj_2_69(2)) {
      m = ReceptionDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECEIVE:
        m = SignalReceptionDefinitionOrStub();
        break;
      default:
        jj_la1[200] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTIES */
  final public PropertyDefinition PropertyDefinition() throws ParseException {
    PropertyDefinition d;
    d = PropertyDeclaration();
    jj_consume_token(SEMICOLON);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDefinition AttributeDefinition() throws ParseException {
  PropertyDefinition d;
  Expression e;
    d = PropertyDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      e = AttributeInitializer();
                                 d.setInitializer(e);
      break;
    default:
      jj_la1[201] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AttributeInitializer() throws ParseException {
  Expression e;
    jj_consume_token(ASSIGN);
    e = InitializationExpression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDefinition PropertyDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  PropertyDefinition d = new PropertyDefinition(t);
  String n;
    n = Name();
               d.setName(n);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPOSE:
      jj_consume_token(COMPOSE);
                        d.setIsComposite();
      break;
    default:
      jj_la1[202] = jj_gen;
      ;
    }
    TypePart(t);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void TypePart(TypedElementDeclaration d) throws ParseException {
  QualifiedName t;
  Token tc;
    t = TypeName();
                   d.setType(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      Multiplicity(d);
      break;
    default:
      jj_la1[203] = jj_gen;
      ;
    }
  }

  final public QualifiedName TypeName() throws ParseException {
  QualifiedName n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case UNRESTRICTED_NAME:
      n = QualifiedName();
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void Multiplicity(TypedElementDeclaration d) throws ParseException {
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_LITERAL:
    case STAR:
      MultiplicityRange(d);
      break;
    default:
      jj_la1[205] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NONUNIQUE:
    case ORDERED:
    case SEQUENCE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERED:
        jj_consume_token(ORDERED);
                d.setIsOrdered();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NONUNIQUE:
          jj_consume_token(NONUNIQUE);
                                                    d.setIsNonunique();
          break;
        default:
          jj_la1[206] = jj_gen;
          ;
        }
        break;
      case NONUNIQUE:
        jj_consume_token(NONUNIQUE);
                  d.setIsNonunique();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ORDERED:
          jj_consume_token(ORDERED);
                                                      d.setIsOrdered();
          break;
        default:
          jj_la1[207] = jj_gen;
          ;
        }
        break;
      case SEQUENCE:
        jj_consume_token(SEQUENCE);
                 d.setIsNonunique(); d.setIsOrdered();
        break;
      default:
        jj_la1[208] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[209] = jj_gen;
      ;
    }
  }

  final public void MultiplicityRange(TypedElementDeclaration d) throws ParseException {
  Token t;
  String n;
    if (jj_2_70(2)) {
      t = jj_consume_token(NATURAL_LITERAL);
      jj_consume_token(DOUBLE_DOT);
                                                      d.setLowerBound(t.image);
    } else {
      ;
    }
    n = UnlimitedNaturalLiteral();
                                  d.setUpperBound(n);
  }

  final public String UnlimitedNaturalLiteral() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_LITERAL:
      t = jj_consume_token(NATURAL_LITERAL);
      break;
    case STAR:
      t = jj_consume_token(STAR);
      break;
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* OPERATIONS */
  final public OperationDefinition OperationDeclaration() throws ParseException {
  TypedElementDeclaration t = new TypedElementDeclaration();
  FormalParameter p = new FormalParameter(t);
  OperationDefinition d = new OperationDefinition();
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract();
      break;
    default:
      jj_la1[211] = jj_gen;
      ;
    }
    n = Name();
                                                     d.setName(n);
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypePart(t);
                                             p.setDirection("return"); d.addOwnedMember(p);
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REDEFINES:
      nl = RedefinitionClause();
                                d.setRedefinition(nl);
      break;
    default:
      jj_la1[213] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public OperationDefinition OperationDefinitionOrStub() throws ParseException {
  OperationDefinition o;
  Block b;
    o = OperationDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  if (!o.isAbstract()) { o.setIsStub(); }
      break;
    case LBRACE:
      b = Block();
                  o.setBody(b);
      break;
    default:
      jj_la1[214] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedNameList RedefinitionClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(REDEFINES);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* RECEPTIONS */
  final public ReceptionDefinition ReceptionDefinition() throws ParseException {
  QualifiedName n;
    jj_consume_token(RECEIVE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    {if (true) return new ReceptionDefinition(n);}
    throw new Error("Missing return statement in function");
  }

  final public SignalReceptionDefinition SignalReceptionDeclaration() throws ParseException {
  SignalReceptionDefinition d = new SignalReceptionDefinition();
  String n;
  QualifiedNameList nl;
    jj_consume_token(RECEIVE);
    jj_consume_token(SIGNAL);
    n = Name();
                                  d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[215] = jj_gen;
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public SignalReceptionDefinition SignalReceptionDefinitionOrStub() throws ParseException {
  SignalReceptionDefinition d;
    d = SignalReceptionDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub();
      break;
    case LBRACE:
      StructuredBody(d);
      break;
    default:
      jj_la1[216] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_216()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_277()) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_287()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_304()) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_305()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_330()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_61()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_136()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) return true;
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_59()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_56()) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_scan_token(ACTIVE)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_261() {
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_56()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_136()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_56()) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_137()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_136()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_183()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_56()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) return true;
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_131()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_200()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ANY)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_137()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_58()) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_183()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_200()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(ANY)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_58()) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_214()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_283()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(ORDERED)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(REDUCE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_52()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(RECEIVE)) return true;
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(ARROW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_61()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(RECEIVE)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_91()) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_59()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_91()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_114()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_136()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_56()) return true;
    if (jj_3R_341()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_137()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_266()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_183()) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_70()) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_200()) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(NATURAL_LITERAL)) return true;
    if (jj_scan_token(DOUBLE_DOT)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_301()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(ANY)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_57()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(ALL_INSTANCES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_366()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_157()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_57()) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_238()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_365()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_194()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_365()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_57()) return true;
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) return true;
    }
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_355() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_208()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_57()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_230()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_190()) return true;
    if (jj_3R_349()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_57()) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_277()) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_57()) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(ACTIVITY)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(THICK_ARROW)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_287()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_315()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_275()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_57()) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_65()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_343()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_304()) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_319()) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_302()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(NATURAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_57()) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    if (jj_scan_token(ASSOC)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_342() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_342()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_57()) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_61()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) return true;
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(DATATYPE)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_136()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_59()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_239()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AlfParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[217];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x8000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x912000c0,0x200000,0x910000c0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x20000000,0x20000000,0x0,0x46800000,0x0,0x0,0x200000,0x200000,0x46800000,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x200000,0x0,0x800000,0x0,0x46a00000,0x200000,0x0,0x800000,0x800000,0x0,0x46a00000,0x0,0x0,0x200000,0x0,0x46800000,0x800000,0x0,0x200000,0x200000,0x0,0x800000,0x0,0x0,0x0,0x0,0x200000,0x800000,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x800000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400000,0x1400000,0x1400000,0x0,0x0,0x0,0x0,0x0,0x84000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400000,0x128,0x0,0x0,0x0,0x0,0x1400000,0x0,0x0,0x0,0x0,0x128,0x0,0x0,0x0,0x1400000,0x0,0x1400000,0x0,0x0,0x1000000,0x0,0x1400000,0x0,0x400000,0x0,0x400000,0x400000,0x4000000,0x0,0x0,0x0,0x1400000,0x1400000,0x1400000,0x1400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x84000,0x84000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1509204,0x0,0x1509204,0x0,0x0,0x0,0x0,0x1400000,0x0,0x400000,0x400,0x2000000,0x1,0x80,0x1,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000,0x2000,0x0,0x200000,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000842,0xe0000000,0x0,0xa0000000,0x0,0x10000842,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000842,0x0,0xe0000000,0x0,0x0,0x0,0xe0000842,0x200,0x0,0x0,0xe0000000,0x842,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8060000,0x0,0x0,0x8060000,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x800000,0x4000000,0x4800000,0x4800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x11000,0x0,0x0,0x80000000,0x11000,0x11000,0x80000000,0x80000000,0x1711240,0x1711240,0x1700240,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x11000000,0x700240,0x0,0x15000000,0x10000000,0x700000,0x1000000,0x1711240,0x80000000,0x80000000,0x0,0x15000000,0x0,0x0,0x10000000,0x11000,0x1711240,0x11000,0x1711240,0x80000000,0x10000000,0x0,0x10000000,0x5711240,0x0,0x4000000,0x80000000,0x4000000,0x0,0x0,0x1004,0x0,0x0,0x1711240,0x1711240,0x1711240,0x1711240,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x15000000,0x0,0x11000000,0x0,0x0,0x1711240,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1711240,0x10000000,0x0,0x10000000,0x10000000,0x15000000,0x10000000,0x11000000,0x11000000,0x0,0x45711b48,0x0,0x45711b48,0x0,0x1000000,0x80000000,0x10000000,0x1711240,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x800,0x0,0x11000,0x44000000,0x0,0x400,0x0,0x400,0x80000000,0x0,0x0,0x0,0x0,0x1000000,0x11000,0x80000000,0x0,0x0,0x700000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11000,0x80,0x0,0x44000000,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x20,0x80000000,0x0,0x20,0x0,0x44000000,0x11080,0x0,0x0,0x11000,0x0,0x44000000,0x11081,0x0,0x4011000,0x0,0x0,0x11080,0x0,0x44000000,0x11000,0x0,0x0,0x0,0x44000000,0x20,0x44000000,0x80000000,0x0,0x0,0x44000000,0x0,0x0,0x44000000,0x0,0x80000000,0x0,0x0,0x11000,0x1,0x0,0x0,0x10000000,0x11000,0x200000,0x0,0x0,0x10,0x10,0x200000,0x0,0x0,0x2,0x44000000,0x20,0x44000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x9,0x9,0x80,0x0,0x0,0x0,0x0,0xf81200,0xf81200,0xf81200,0x0,0x10,0x8,0x8,0xc180,0x0,0x12000,0x2000000,0x8000000,0x4000000,0x40000,0x20000,0x400,0xc0180040,0xc0180040,0x10,0xc0180040,0xc0180040,0x800000,0x0,0x1,0x11,0x800000,0x0,0xf81200,0x0,0x0,0x1,0x0,0x0,0x20,0x20,0x0,0xf81200,0x0,0xf81200,0x0,0x0,0x0,0x0,0xf81200,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0xc0180040,0x180000,0xf81200,0x801200,0xf81200,0x800000,0x0,0x10,0x11,0x8,0x8,0x180000,0x180000,0x10,0x180011,0x180000,0x180000,0x781200,0x600000,0x801200,0x11800000,0x11800000,0x600000,0x600000,0xc180,0xc180,0xc080,0x0,0x0,0x12000,0x12000,0x2000000,0x8000000,0x4000000,0x40000,0x20000,0x400,0x800000,0x11,0x10,0x11,0x11,0x11,0x11,0x11,0x11,0xc0000040,0xf81200,0x0,0xf81200,0x800,0x0,0x0,0x0,0xf81200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x600000,0x600000,0xe00000,0x0,0x8,0x8,0x1,0x1,0x9,0x9,0x9,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x4,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x4,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x3f,0x0,0x3f,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[70];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AlfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AlfParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AlfParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AlfParser(AlfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AlfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 217; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[134];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 217; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 134; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 70; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
