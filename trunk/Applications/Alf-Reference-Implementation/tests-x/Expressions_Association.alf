/**
 * Test association-related expressions.
 **/
active class Expressions_Association {

    // Supporting declarations *************************************************
    
      class Person { 
          public name: String = "Jack";
          @Create public Person(in name: String[0..1]) {
              this.name = name;
          }
      }
      class House { 
          public id: Integer;
          @Create public House(in id: Integer) {
              this.id = id;
          }
      }
      class Player specializes Person { 
          @Create public Player(in name: String[0..1]) {
              super(name);
          }
      }
      class Team { 
          public name: String;
          @Create public Team(in name: String) {
              this.name = name;
          }
      }
      class Season { 
          public year: Integer;
          @Create public Season(in year: Integer) {
              this.year = year;
          }
      }
      
      assoc Owns {
          owner: Person;
          house: House;
      }
      
      assoc Owns1 {
          owner1: Person;
          house1: House[*] ordered;
      }
      
      assoc Roster {
          player: Player[*];
          team: Team;
          season: Season[*];
    }
      
    //**************************************************************************

    test(
       out owner: Person, out house: House, 
       out house_a: House, out house_b: House[0..1], 
       out owner1_a: Person, out house1_a: House[*],
       out owner1_b: Person, out house1_b: House[*], out house1_c: House[*],
       out players1_a: Player[*], out players2_a: Player[*],
       out players1_b: Player[*], out players2_b: Player[*]) 
    {
      
      jack = new Person();
      oldHouse = new House(1);
      newHouse = new House(2);
      
      Owns.createLink(jack, oldHouse);
      Owns.createLink(owner=>jack, house=>oldHouse);
      
      house = jack.house;
      owner = Owns::owner(oldHouse);
      
      Owns.createLink(oldHouse.owner, newHouse);
      Owns.createLink(Owns.owner(oldHouse), newHouse);
      
      house_a = jack.house;
      
      Owns.destroyLink(owner=>jack, house=>newHouse);
      
      house_b = jack.house;
      
      Owns1.createLink(owner1=>jack, house1[1]=>oldHouse);
      Owns1.createLink(owner1=>jack, house1[2]=>newHouse);
      Owns1.createLink(owner1=>jack, house1[1]=>newHouse);
      
      house1_a = jack.house1;
      owner1_a = Owns1::owner1(newHouse);
      
      Owns1.createLink(owner1=>new Person("Jane"), house1[1]=>newHouse);
      
      house1_b = jack.house1;
      owner1_b = Owns1::owner1(newHouse);
      
      Owns1.createLink(owner1=>jack, house1[2]=>new House(3));
      
      house1_c = jack.house1;

      Owns.clearAssoc(jack);
      
      p1 = new Player("Fred");
      p2 = new Player("Marvin");
      t1 = new Team("A");
      t2 = new Team("B");
      y = new Season(2011);
      
      Roster.createLink(p1, t1, y);
      Roster.createLink(p2, t1, y);
      
      players1_a = Roster.player(t1, y);
      players2_a = Roster.player(t2, y);
      
      Roster.createLink(p1, t2, y);
      
      players1_b = Roster.player(t1, y);
      players2_b = Roster.player(t2, y);
    }

} do {
    this.test();
}