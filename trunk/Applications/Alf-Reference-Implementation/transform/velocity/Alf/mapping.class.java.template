#**
*mapping.class.java template for Alf project
@projectPath /src/org/modeldriven/alf/mapping/fuml/${object.owner.qualifiedName.substring(13).toLowerCase().replace("::","/")}/gen/${object.name}Mapping.java 
@artifactContext GenClass 
*#
#macro( mappingPackageName $object )
org.modeldriven.alf.mapping.fuml.${object.owner.qualifiedName.substring(13).toLowerCase().replace("::",".")}.gen
#end
#parse( "uml.fragment" )
${copyrightBoilerPlate}
package #mappingPackageName($object);

#if( ${object.superClasses.size()}==0 )
	import org.modeldriven.alf.mapping.fuml.FumlMapping;
#else
#foreach ( $superclass in ${object.superClasses} )
    import #mappingPackageName($superclass).#name(${superclass.name})Mapping; 
#end
#end

import #qualifiedName($object);

#if ( !${object.isAbstract()} )
import fUML.Syntax.Classes.Kernel.Element;

import java.util.ArrayList;
import java.util.List;
#end

public #abstract(${object}) class ${object.name}Mapping extends
#if( ${object.superClasses.size()}==0 )
	FumlMapping
#else
#foreach ( $superclass in ${object.superClasses} )
    #name(${superclass.name})Mapping 
#end
#end
{

#if( !${object.isAbstract()} )
public ${object.name}Mapping() {
	this.setErrorMessage("${object.name}Mapping not yet implemented.");
}

public List<Element> getModelElements() {
	// TODO: Auto-generated stub
	return new ArrayList<Element>();
}
#end

public #name(${object.name}) get#name(${object.name})() {
	return (#name(${object.name}))this.getSource();
}

} //${object.name}Mapping
