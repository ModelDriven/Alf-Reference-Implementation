#**
*impl.class.java template for uml project
@projectPath /src/org/modeldriven/${object.owner.qualifiedName.toLowerCase().replace("::","/")}/impl/gen/${object.name}.java 
@artifactContext GenClass 
*#
#parse( "uml.fragment" )
${copyrightBoilerPlate}
${packageDeclaration}.impl.gen;
#imports()
#comments(${object})

#macro( class $object)
## #classJavaDoc(${object}) 

#visibility(${object}) #abstract(${object}) class #name(${object.name})
#foreach ( $superclass in ${object.superClasses} )
    extends #qualifiedPackageName(${superclass.owner}).impl.gen.#name(${superclass.name}) 
#end
 implements #qualifiedPackageName(${object.owner}).impl.I#name(${object.name})Impl
    {
## #foreach( $behavior in ${object.ownedBehaviors} )
## #if( ${behavior.eClass().name}=="Activity" )
## #class(${behavior})
## #end
## #end

#if( ${object.superClasses.size()}==0 )
  protected #qualifiedName(${object}) base;
#end

#if( !${object.isAbstract()} )
public #name(${object.name})() {
  this.base = new #qualifiedName(${object})();
}
#end

public #qualifiedName(${object}) getBase() {
  return (#qualifiedName(${object}))this.base;
}

#foreach( $feature in ${object.ownedAttributes} )
  #if( ${feature.isStatic()} )
  #visibility(${feature}) static #type(${feature}) #name(${feature.name}) = #defaultValue(${feature});
  #elseif( ${feature.isDerived()} )
  private #type(${feature}) #name(${feature.name}) = #defaultValue(${feature});
  #end  
#end

#foreach ( $attribute in ${object.ownedAttributes} )
  #if( !${attribute.isStatic()} )
  #implGetter(${attribute})
  #implSetter(${attribute})
  #end  
#end

#foreach ( $rule in ${object.ownedRules} )
  #comments(${rule})
  #constraint(${rule} ${object})
#end
    
#foreach ( $operation in ${object.ownedOperations} )
  ## #featureJavaDoc("operation ${operation.name}" ${operation})
  #comments(${operation})
  #visibility(${operation}) #abstract(${operation}) #static(${operation}) #operationType(${operation.returnResult} ${operation} ${object}) #name(${operation.name})(#operationParameters(${operation})) #throws(${operation})#body(${operation} ${object})
#end

#printOperations(${object} true)
} //${object.name}
#end

#class(${object})