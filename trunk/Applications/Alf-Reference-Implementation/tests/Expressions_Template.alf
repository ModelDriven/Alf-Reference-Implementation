/**
 * Test expressions involving templates.
 **/
package Expressions_Template {

	public activity A<T>(in x: T): Integer { 
		y = (T)x;
		return y->size();
	}
	public class B { }
	public class C<T> {
		p: T;
		q: Boolean = this.p instanceof T; 
		r(): T { return (T)this.p; }
		
		activity D() { }
		activity E(in x: T) { }
		activity F<U>(in x: U) { }
	}
	public class G { 
		class G1 { }
	}
	public active class H<T> {
		class I<U> {
			activity J() { }
		}
	} do {
		new C<T>().r();
	}
	
	public class IntegerList specializes List<Integer> { }

	public activity test() {
	
	  b = new B();
	  g = new G();
	  
	  x = 1;
	  
	  A<B>(b);
	  C<B>.D();
	  C<B>.E(b);
	  C<B>.F<G>(g);
	  x + A<B>(b);
	  H<B>::I<G::G1>::J();
	  H<B>.I<G.G1>.J();

	  Set<Integer> s = new Set<Integer>(null);
	  IntegerList list = {1, 2, 3};
	  Integer[] list1 = list;
	  Bag<B> bag = new { b, b, b };
	  Map<Key=>String, Value=>Integer> m = new(null);
	  list1 = m.toSequence().value;
	  new Map<String,Integer>(m).keys();
	  new List< List<String> >(null);
	  new Set<Integer>(Integer[]{1,2,3});
	  Set<Integer>{1, 3, 45, 2, 3};
	  new List< List<String> >{{"apple","orange"},{"strawberry","raspberry"}};
	  	  
	  including<Integer>(Integer[]{1,2,3}, 4);
	  including(s,1);
	  s->including(1);
	  s.add(1);
	  
	}
}
