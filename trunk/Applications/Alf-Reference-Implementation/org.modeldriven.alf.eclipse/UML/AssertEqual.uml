<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="20110701" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/4.0.0/UML" xmi:id="_SCHH4K1MEeOdBunZhTRw1w" name="Model" visibility="package">
  <packagedElement xmi:type="uml:Activity" xmi:id="_SCHH4a1MEeOdBunZhTRw1w" name="AssertEqual" group="_SCHu9a1MEeOdBunZhTRw1w" node="_SCHH-q1MEeOdBunZhTRw1w _SCHu8K1MEeOdBunZhTRw1w _SCHu8a1MEeOdBunZhTRw1w _SCHu8q1MEeOdBunZhTRw1w _SCHu861MEeOdBunZhTRw1w _SCHu9K1MEeOdBunZhTRw1w _SCHu9a1MEeOdBunZhTRw1w">
    <packageImport xmi:id="_SCHH4q1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes"/>
    </packageImport>
    <packageImport xmi:id="_SCHH461MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors"/>
    </packageImport>
    <packageImport xmi:id="_SCHH5K1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-BasicInputOutput"/>
    </packageImport>
    <packageImport xmi:id="_SCHH5a1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-CollectionFunctions"/>
    </packageImport>
    <packageImport xmi:id="_SCHH5q1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-CollectionClasses"/>
    </packageImport>
    <ownedParameter xmi:id="_SCHH561MEeOdBunZhTRw1w" name="label" visibility="package">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHH6K1MEeOdBunZhTRw1w" value="1"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHH6a1MEeOdBunZhTRw1w" value="1"/>
    </ownedParameter>
    <ownedParameter xmi:id="_SCHH6q1MEeOdBunZhTRw1w" name="value1" visibility="package">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHH661MEeOdBunZhTRw1w"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHH7K1MEeOdBunZhTRw1w" value="1"/>
    </ownedParameter>
    <ownedParameter xmi:id="_SCHH7a1MEeOdBunZhTRw1w" name="value2" visibility="package">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHH7q1MEeOdBunZhTRw1w"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHH761MEeOdBunZhTRw1w" value="1"/>
    </ownedParameter>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH8K1MEeOdBunZhTRw1w" source="_SCHH-q1MEeOdBunZhTRw1w" target="_SCHu8K1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH8a1MEeOdBunZhTRw1w" source="_SCHu8a1MEeOdBunZhTRw1w" target="_SCHu8q1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH8q1MEeOdBunZhTRw1w" source="_SCHu861MEeOdBunZhTRw1w" target="_SCHu9K1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH861MEeOdBunZhTRw1w" source="_SCHu8q1MEeOdBunZhTRw1w" target="_SCHvAa1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH9K1MEeOdBunZhTRw1w" source="_SCHu9K1MEeOdBunZhTRw1w" target="_SCHvCa1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH9a1MEeOdBunZhTRw1w" source="_SCHu8K1MEeOdBunZhTRw1w" target="_SCIWBK1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH9q1MEeOdBunZhTRw1w" source="_SCHu9K1MEeOdBunZhTRw1w" target="_SCIWJa1MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH961MEeOdBunZhTRw1w" source="_SCHu9K1MEeOdBunZhTRw1w" target="_SCIWN61MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH-K1MEeOdBunZhTRw1w" source="_SCHu9K1MEeOdBunZhTRw1w" target="_SCI9H61MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCHH-a1MEeOdBunZhTRw1w" source="_SCHu9K1MEeOdBunZhTRw1w" target="_SCI9Q61MEeOdBunZhTRw1w"/>
    <structuredNode xmi:id="_SCHu9a1MEeOdBunZhTRw1w" name="Body(AssertEqual)">
      <node xmi:type="uml:ConditionalNode" xmi:id="_SCHu9q1MEeOdBunZhTRw1w" name="IfStatement@48c144d7">
        <node xmi:type="uml:TestIdentityAction" xmi:id="_SCHu961MEeOdBunZhTRw1w" name="Test(==)" incoming="_SCJkSq1MEeOdBunZhTRw1w">
          <first xmi:id="_SCHu-K1MEeOdBunZhTRw1w" name="Test(==).first" incoming="_SCJkQa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHu-a1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHu-q1MEeOdBunZhTRw1w" value="1"/>
          </first>
          <result xmi:id="_SCHu-61MEeOdBunZhTRw1w" name="Test(==).result" outgoing="_SCJkVK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHu_K1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHu_a1MEeOdBunZhTRw1w" value="1"/>
          </result>
          <second xmi:id="_SCHu_q1MEeOdBunZhTRw1w" name="Test(==).second" incoming="_SCJkQ61MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHu_61MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvAK1MEeOdBunZhTRw1w" value="1"/>
          </second>
        </node>
        <node xmi:type="uml:ForkNode" xmi:id="_SCHvAa1MEeOdBunZhTRw1w" name="Fork(Fork(value1))" outgoing="_SCJkQa1MEeOdBunZhTRw1w _SCJkQq1MEeOdBunZhTRw1w" incoming="_SCHH861MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvAq1MEeOdBunZhTRw1w" name="Call(NotEmpty)">
          <argument xmi:id="_SCHvA61MEeOdBunZhTRw1w" name="Call(NotEmpty).argument(seq)" incoming="_SCJkQq1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvBK1MEeOdBunZhTRw1w"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvBa1MEeOdBunZhTRw1w" value="*"/>
          </argument>
          <result xmi:id="_SCHvBq1MEeOdBunZhTRw1w" name="Call(NotEmpty).result()" outgoing="_SCJkRa1MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvB61MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvCK1MEeOdBunZhTRw1w" value="1"/>
          </result>
          <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-NotEmpty"/>
        </node>
        <node xmi:type="uml:ForkNode" xmi:id="_SCHvCa1MEeOdBunZhTRw1w" name="Fork(Fork(value2))" outgoing="_SCJkQ61MEeOdBunZhTRw1w _SCJkRK1MEeOdBunZhTRw1w" incoming="_SCHH9K1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvCq1MEeOdBunZhTRw1w" name="Call(NotEmpty)">
          <argument xmi:id="_SCHvC61MEeOdBunZhTRw1w" name="Call(NotEmpty).argument(seq)" incoming="_SCJkRK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvDK1MEeOdBunZhTRw1w"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvDa1MEeOdBunZhTRw1w" value="*"/>
          </argument>
          <result xmi:id="_SCHvDq1MEeOdBunZhTRw1w" name="Call(NotEmpty).result()" outgoing="_SCJkRq1MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvD61MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvEK1MEeOdBunZhTRw1w" value="1"/>
          </result>
          <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-NotEmpty"/>
        </node>
        <node xmi:type="uml:InitialNode" xmi:id="_SCHvEa1MEeOdBunZhTRw1w" name="Initial(Test(==))" outgoing="_SCJkTq1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:ForkNode" xmi:id="_SCHvEq1MEeOdBunZhTRw1w" name="Fork(Call(NotEmpty).result())" outgoing="_SCJkR61MEeOdBunZhTRw1w _SCJkT61MEeOdBunZhTRw1w" incoming="_SCJkRa1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:ForkNode" xmi:id="_SCHvE61MEeOdBunZhTRw1w" name="Fork(Call(NotEmpty).result())" outgoing="_SCJkSK1MEeOdBunZhTRw1w _SCJkSa1MEeOdBunZhTRw1w" incoming="_SCJkRq1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvFK1MEeOdBunZhTRw1w" name="Call(Not)" incoming="_SCJkTK1MEeOdBunZhTRw1w">
          <argument xmi:id="_SCHvFa1MEeOdBunZhTRw1w" name="Call(Not).argument(x)" incoming="_SCJkR61MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvFq1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvF61MEeOdBunZhTRw1w" value="1"/>
          </argument>
          <result xmi:id="_SCHvGK1MEeOdBunZhTRw1w" name="Call(Not).result(result)" outgoing="_SCJkVa1MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvGa1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvGq1MEeOdBunZhTRw1w" value="1"/>
          </result>
          <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-BooleanFunctions-Not"/>
        </node>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvG61MEeOdBunZhTRw1w" name="Call(Not)" incoming="_SCJkUq1MEeOdBunZhTRw1w">
          <argument xmi:id="_SCHvHK1MEeOdBunZhTRw1w" name="Call(Not).argument(x)" incoming="_SCJkSK1MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvHa1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvHq1MEeOdBunZhTRw1w" value="1"/>
          </argument>
          <result xmi:id="_SCHvH61MEeOdBunZhTRw1w" name="Call(Not).result(result)" outgoing="_SCJkVq1MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvIK1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvIa1MEeOdBunZhTRw1w" value="1"/>
          </result>
          <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-BooleanFunctions-Not"/>
        </node>
        <node xmi:type="uml:DecisionNode" xmi:id="_SCHvIq1MEeOdBunZhTRw1w" name="Decision(Call(NotEmpty).result())" outgoing="_SCJkSq1MEeOdBunZhTRw1w _SCJkTK1MEeOdBunZhTRw1w" incoming="_SCJkSa1MEeOdBunZhTRw1w _SCJkUK1MEeOdBunZhTRw1w" decisionInputFlow="_SCJkSa1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:DecisionNode" xmi:id="_SCHvI61MEeOdBunZhTRw1w" name="Decision(Call(NotEmpty).result())" outgoing="_SCJkUK1MEeOdBunZhTRw1w _SCJkUq1MEeOdBunZhTRw1w" incoming="_SCJkTq1MEeOdBunZhTRw1w _SCJkT61MEeOdBunZhTRw1w" decisionInputFlow="_SCJkT61MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:MergeNode" xmi:id="_SCHvJK1MEeOdBunZhTRw1w" name="Merge(Test(==).result, !Call(NotEmpty).result() &amp;&amp; !Call(NotEmpty).result())" outgoing="_SCJkV61MEeOdBunZhTRw1w" incoming="_SCJkVK1MEeOdBunZhTRw1w _SCJkVa1MEeOdBunZhTRw1w _SCJkVq1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvJa1MEeOdBunZhTRw1w" name="Call(Not)">
          <argument xmi:id="_SCHvJq1MEeOdBunZhTRw1w" name="Call(Not).argument(x)" incoming="_SCJkV61MEeOdBunZhTRw1w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvJ61MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvKK1MEeOdBunZhTRw1w" value="1"/>
          </argument>
          <result xmi:id="_SCHvKa1MEeOdBunZhTRw1w" name="Call(Not).result(result)">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvKq1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvK61MEeOdBunZhTRw1w" value="1"/>
          </result>
          <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-BooleanFunctions-Not"/>
        </node>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCHvLK1MEeOdBunZhTRw1w" name="ExpressionStatement@2ea66284" outgoing="_SCJkWK1MEeOdBunZhTRw1w">
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCHvLa1MEeOdBunZhTRw1w" name="Call(Write)" incoming="_SCIWHa1MEeOdBunZhTRw1w" behavior="_SCJkXK1MEeOdBunZhTRw1w">
            <argument xmi:id="_SCHvLq1MEeOdBunZhTRw1w" name="Call(Write).argument(value)" incoming="_SCIWHK1MEeOdBunZhTRw1w">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvL61MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvMK1MEeOdBunZhTRw1w" value="1"/>
            </argument>
          </node>
          <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCHvMa1MEeOdBunZhTRw1w" name="Tuple@76ff9786" outgoing="_SCIWHa1MEeOdBunZhTRw1w">
            <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCHvMq1MEeOdBunZhTRw1w" name="Value(&quot;FAILED: &quot;)">
              <result xmi:id="_SCHvM61MEeOdBunZhTRw1w" name="Value(&quot;FAILED: &quot;).result" outgoing="_SCIWGa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCHvNK1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCHvNa1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <value xmi:type="uml:LiteralString" xmi:id="_SCHvNq1MEeOdBunZhTRw1w" value="FAILED: ">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </value>
            </node>
            <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCIWAK1MEeOdBunZhTRw1w" name="Call(Concat)">
              <argument xmi:id="_SCIWAa1MEeOdBunZhTRw1w" name="Call(Concat).argument(x)" incoming="_SCIWGa1MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWAq1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWA61MEeOdBunZhTRw1w" value="1"/>
              </argument>
              <argument xmi:id="_SCIWBK1MEeOdBunZhTRw1w" name="Call(Concat).argument(y)" incoming="_SCHH9a1MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWBa1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWBq1MEeOdBunZhTRw1w" value="1"/>
              </argument>
              <result xmi:id="_SCIWB61MEeOdBunZhTRw1w" name="Call(Concat).result(result)" outgoing="_SCIWGq1MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWCK1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWCa1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
            </node>
            <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCIWCq1MEeOdBunZhTRw1w" name="Value(&quot;==&quot;)">
              <result xmi:id="_SCIWC61MEeOdBunZhTRw1w" name="Value(&quot;==&quot;).result" outgoing="_SCIWG61MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWDK1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWDa1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <value xmi:type="uml:LiteralString" xmi:id="_SCIWDq1MEeOdBunZhTRw1w" value="==">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </value>
            </node>
            <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCIWD61MEeOdBunZhTRw1w" name="Call(Concat)">
              <argument xmi:id="_SCIWEK1MEeOdBunZhTRw1w" name="Call(Concat).argument(x)" incoming="_SCIWGq1MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWEa1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWEq1MEeOdBunZhTRw1w" value="1"/>
              </argument>
              <argument xmi:id="_SCIWE61MEeOdBunZhTRw1w" name="Call(Concat).argument(y)" incoming="_SCIWG61MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWFK1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWFa1MEeOdBunZhTRw1w" value="1"/>
              </argument>
              <result xmi:id="_SCIWFq1MEeOdBunZhTRw1w" name="Call(Concat).result(result)" outgoing="_SCIWHK1MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWF61MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWGK1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
            </node>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCIWGa1MEeOdBunZhTRw1w" source="_SCHvM61MEeOdBunZhTRw1w" target="_SCIWAa1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCIWGq1MEeOdBunZhTRw1w" source="_SCIWB61MEeOdBunZhTRw1w" target="_SCIWEK1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCIWG61MEeOdBunZhTRw1w" source="_SCIWC61MEeOdBunZhTRw1w" target="_SCIWE61MEeOdBunZhTRw1w"/>
          </node>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCIWHK1MEeOdBunZhTRw1w" source="_SCIWFq1MEeOdBunZhTRw1w" target="_SCHvLq1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ControlFlow" xmi:id="_SCIWHa1MEeOdBunZhTRw1w" source="_SCHvMa1MEeOdBunZhTRw1w" target="_SCHvLa1MEeOdBunZhTRw1w"/>
        </node>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCIWHq1MEeOdBunZhTRw1w" name="ExpressionStatement@11c76237" outgoing="_SCJkWa1MEeOdBunZhTRw1w" incoming="_SCJkWK1MEeOdBunZhTRw1w">
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCIWH61MEeOdBunZhTRw1w" name="Call(Write)" incoming="_SCJkK61MEeOdBunZhTRw1w" behavior="_SCJkXK1MEeOdBunZhTRw1w">
            <argument xmi:id="_SCIWIK1MEeOdBunZhTRw1w" name="Call(Write).argument(value)" incoming="_SCJkKq1MEeOdBunZhTRw1w">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWIa1MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWIq1MEeOdBunZhTRw1w" value="1"/>
            </argument>
          </node>
          <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCIWI61MEeOdBunZhTRw1w" name="Tuple@6b4fb71e" outgoing="_SCJkK61MEeOdBunZhTRw1w">
            <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCIWJK1MEeOdBunZhTRw1w" name="Call(IsEmpty)">
              <argument xmi:id="_SCIWJa1MEeOdBunZhTRw1w" name="Call(IsEmpty).argument(seq)" incoming="_SCHH9q1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWJq1MEeOdBunZhTRw1w"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWJ61MEeOdBunZhTRw1w" value="*"/>
              </argument>
              <result xmi:id="_SCIWKK1MEeOdBunZhTRw1w" name="Call(IsEmpty).result()" outgoing="_SCJkI61MEeOdBunZhTRw1w">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWKa1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWKq1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-IsEmpty"/>
            </node>
            <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCIWK61MEeOdBunZhTRw1w" name="ConditionalTestExpression@3131ce6c.operand2" incoming="_SCJkJK1MEeOdBunZhTRw1w">
              <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCIWLK1MEeOdBunZhTRw1w" name="Value(&quot;null&quot;)">
                <result xmi:id="_SCIWLa1MEeOdBunZhTRw1w" name="Value(&quot;null&quot;).result" outgoing="_SCIWNK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWLq1MEeOdBunZhTRw1w" value="1"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWL61MEeOdBunZhTRw1w" value="1"/>
                </result>
                <value xmi:type="uml:LiteralString" xmi:id="_SCIWMK1MEeOdBunZhTRw1w" value="null">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </value>
              </node>
              <structuredNodeOutput xmi:id="_SCIWMa1MEeOdBunZhTRw1w" name="ConditionalTestExpression@3131ce6c.operand2.result" outgoing="_SCJkKK1MEeOdBunZhTRw1w" incoming="_SCIWNK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWMq1MEeOdBunZhTRw1w"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWM61MEeOdBunZhTRw1w" value="*"/>
              </structuredNodeOutput>
              <edge xmi:type="uml:ObjectFlow" xmi:id="_SCIWNK1MEeOdBunZhTRw1w" source="_SCIWLa1MEeOdBunZhTRw1w" target="_SCIWMa1MEeOdBunZhTRw1w"/>
            </node>
            <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCIWNa1MEeOdBunZhTRw1w" name="ConditionalTestExpression@3131ce6c.operand3" incoming="_SCJkJq1MEeOdBunZhTRw1w">
              <node xmi:type="uml:ReadIsClassifiedObjectAction" xmi:id="_SCIWNq1MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String)">
                <classifier xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <object xmi:id="_SCIWN61MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String).object" incoming="_SCHH961MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWOK1MEeOdBunZhTRw1w" value="1"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWOa1MEeOdBunZhTRw1w" value="1"/>
                </object>
                <result xmi:id="_SCIWOq1MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String).result" outgoing="_SCI9T61MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWO61MEeOdBunZhTRw1w" value="1"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWPK1MEeOdBunZhTRw1w" value="1"/>
                </result>
              </node>
              <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCIWPa1MEeOdBunZhTRw1w" name="ConditionalTestExpression@66fac898.operand2" incoming="_SCI9UK1MEeOdBunZhTRw1w">
                <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCIWPq1MEeOdBunZhTRw1w" name="Value(&quot;&quot;&quot;)">
                  <result xmi:id="_SCIWP61MEeOdBunZhTRw1w" name="Value(&quot;&quot;&quot;).result" outgoing="_SCI9Pa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCIWQK1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCIWQa1MEeOdBunZhTRw1w" value="1"/>
                  </result>
                  <value xmi:type="uml:LiteralString" xmi:id="_SCIWQq1MEeOdBunZhTRw1w" value="&quot;">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </value>
                </node>
                <node xmi:type="uml:ExpansionRegion" xmi:id="_SCIWQ61MEeOdBunZhTRw1w" name="CastExpression@deb4e02" mode="parallel" outputElement="_SCI9IK1MEeOdBunZhTRw1w" inputElement="_SCI9H61MEeOdBunZhTRw1w">
                  <node xmi:type="uml:MergeNode" xmi:id="_SCIWRK1MEeOdBunZhTRw1w" name="Merge(CastExpression@deb4e02.operand)" outgoing="_SCI9Hq1MEeOdBunZhTRw1w" incoming="_SCI9G61MEeOdBunZhTRw1w"/>
                  <node xmi:type="uml:ReadIsClassifiedObjectAction" xmi:id="_SCIWRa1MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String)">
                    <classifier xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <object xmi:id="_SCI9EK1MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String).object" incoming="_SCI9GK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Ea1MEeOdBunZhTRw1w" value="1"/>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Eq1MEeOdBunZhTRw1w" value="1"/>
                    </object>
                    <result xmi:id="_SCI9E61MEeOdBunZhTRw1w" name="ReadIsClassifiedObject(String).result" outgoing="_SCI9Gq1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9FK1MEeOdBunZhTRw1w" value="1"/>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Fa1MEeOdBunZhTRw1w" value="1"/>
                    </result>
                  </node>
                  <node xmi:type="uml:ForkNode" xmi:id="_SCI9Fq1MEeOdBunZhTRw1w" name="Fork(ReadIsClassifiedObject(String).object)" outgoing="_SCI9GK1MEeOdBunZhTRw1w _SCI9Ga1MEeOdBunZhTRw1w" incoming="_SCI9Ha1MEeOdBunZhTRw1w"/>
                  <node xmi:type="uml:DecisionNode" xmi:id="_SCI9F61MEeOdBunZhTRw1w" name="Decision(ReadIsClassifiedObject(String).result)" outgoing="_SCI9G61MEeOdBunZhTRw1w" incoming="_SCI9Ga1MEeOdBunZhTRw1w _SCI9Gq1MEeOdBunZhTRw1w" decisionInputFlow="_SCI9Gq1MEeOdBunZhTRw1w"/>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9GK1MEeOdBunZhTRw1w" source="_SCI9Fq1MEeOdBunZhTRw1w" target="_SCI9EK1MEeOdBunZhTRw1w"/>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Ga1MEeOdBunZhTRw1w" source="_SCI9Fq1MEeOdBunZhTRw1w" target="_SCI9F61MEeOdBunZhTRw1w"/>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Gq1MEeOdBunZhTRw1w" source="_SCI9E61MEeOdBunZhTRw1w" target="_SCI9F61MEeOdBunZhTRw1w"/>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9G61MEeOdBunZhTRw1w" source="_SCI9F61MEeOdBunZhTRw1w" target="_SCIWRK1MEeOdBunZhTRw1w">
                    <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCI9HK1MEeOdBunZhTRw1w" name="Value(true)" value="true"/>
                  </edge>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Ha1MEeOdBunZhTRw1w" source="_SCI9H61MEeOdBunZhTRw1w" target="_SCI9Fq1MEeOdBunZhTRw1w"/>
                  <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Hq1MEeOdBunZhTRw1w" source="_SCIWRK1MEeOdBunZhTRw1w" target="_SCI9IK1MEeOdBunZhTRw1w"/>
                </node>
                <node xmi:type="uml:ExpansionNode" xmi:id="_SCI9H61MEeOdBunZhTRw1w" name="CastExpression@deb4e02.inputElement" outgoing="_SCI9Ha1MEeOdBunZhTRw1w" incoming="_SCHH-K1MEeOdBunZhTRw1w" regionAsInput="_SCIWQ61MEeOdBunZhTRw1w"/>
                <node xmi:type="uml:ExpansionNode" xmi:id="_SCI9IK1MEeOdBunZhTRw1w" name="CastExpression@deb4e02.outputElement" outgoing="_SCI9Pq1MEeOdBunZhTRw1w" incoming="_SCI9Hq1MEeOdBunZhTRw1w" regionAsOutput="_SCIWQ61MEeOdBunZhTRw1w">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </node>
                <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCI9Ia1MEeOdBunZhTRw1w" name="Call(Concat)">
                  <argument xmi:id="_SCI9Iq1MEeOdBunZhTRw1w" name="Call(Concat).argument(x)" incoming="_SCI9Pa1MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9I61MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9JK1MEeOdBunZhTRw1w" value="1"/>
                  </argument>
                  <argument xmi:id="_SCI9Ja1MEeOdBunZhTRw1w" name="Call(Concat).argument(y)" incoming="_SCI9Pq1MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Jq1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9J61MEeOdBunZhTRw1w" value="1"/>
                  </argument>
                  <result xmi:id="_SCI9KK1MEeOdBunZhTRw1w" name="Call(Concat).result(result)" outgoing="_SCI9P61MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Ka1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Kq1MEeOdBunZhTRw1w" value="1"/>
                  </result>
                  <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
                </node>
                <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCI9K61MEeOdBunZhTRw1w" name="Value(&quot;&quot;&quot;)">
                  <result xmi:id="_SCI9LK1MEeOdBunZhTRw1w" name="Value(&quot;&quot;&quot;).result" outgoing="_SCI9QK1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9La1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Lq1MEeOdBunZhTRw1w" value="1"/>
                  </result>
                  <value xmi:type="uml:LiteralString" xmi:id="_SCI9L61MEeOdBunZhTRw1w" value="&quot;">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </value>
                </node>
                <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCI9MK1MEeOdBunZhTRw1w" name="Call(Concat)">
                  <argument xmi:id="_SCI9Ma1MEeOdBunZhTRw1w" name="Call(Concat).argument(x)" incoming="_SCI9P61MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Mq1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9M61MEeOdBunZhTRw1w" value="1"/>
                  </argument>
                  <argument xmi:id="_SCI9NK1MEeOdBunZhTRw1w" name="Call(Concat).argument(y)" incoming="_SCI9QK1MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Na1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Nq1MEeOdBunZhTRw1w" value="1"/>
                  </argument>
                  <result xmi:id="_SCI9N61MEeOdBunZhTRw1w" name="Call(Concat).result(result)" outgoing="_SCI9Qa1MEeOdBunZhTRw1w">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9OK1MEeOdBunZhTRw1w" value="1"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Oa1MEeOdBunZhTRw1w" value="1"/>
                  </result>
                  <behavior xmi:type="uml:FunctionBehavior" href="Libraries/fUML.library.uml#PrimitiveBehaviors-StringFunctions-Concat"/>
                </node>
                <structuredNodeOutput xmi:id="_SCI9Oq1MEeOdBunZhTRw1w" name="ConditionalTestExpression@66fac898.operand2.result" outgoing="_SCI9VK1MEeOdBunZhTRw1w" incoming="_SCI9Qa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9O61MEeOdBunZhTRw1w"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9PK1MEeOdBunZhTRw1w" value="*"/>
                </structuredNodeOutput>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Pa1MEeOdBunZhTRw1w" source="_SCIWP61MEeOdBunZhTRw1w" target="_SCI9Iq1MEeOdBunZhTRw1w"/>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Pq1MEeOdBunZhTRw1w" source="_SCI9IK1MEeOdBunZhTRw1w" target="_SCI9Ja1MEeOdBunZhTRw1w"/>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9P61MEeOdBunZhTRw1w" source="_SCI9KK1MEeOdBunZhTRw1w" target="_SCI9Ma1MEeOdBunZhTRw1w"/>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9QK1MEeOdBunZhTRw1w" source="_SCI9LK1MEeOdBunZhTRw1w" target="_SCI9NK1MEeOdBunZhTRw1w"/>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Qa1MEeOdBunZhTRw1w" source="_SCI9N61MEeOdBunZhTRw1w" target="_SCI9Oq1MEeOdBunZhTRw1w"/>
              </node>
              <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCI9Qq1MEeOdBunZhTRw1w" name="ConditionalTestExpression@66fac898.operand3" incoming="_SCI9Uq1MEeOdBunZhTRw1w">
                <node xmi:type="uml:MergeNode" xmi:id="_SCI9Q61MEeOdBunZhTRw1w" name="Merge(Fork(value2))" outgoing="_SCI9R61MEeOdBunZhTRw1w" incoming="_SCHH-a1MEeOdBunZhTRw1w"/>
                <structuredNodeOutput xmi:id="_SCI9RK1MEeOdBunZhTRw1w" name="ConditionalTestExpression@66fac898.operand3.result" outgoing="_SCI9Va1MEeOdBunZhTRw1w" incoming="_SCI9R61MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9Ra1MEeOdBunZhTRw1w"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Rq1MEeOdBunZhTRw1w" value="*"/>
                </structuredNodeOutput>
                <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9R61MEeOdBunZhTRw1w" source="_SCI9Q61MEeOdBunZhTRw1w" target="_SCI9RK1MEeOdBunZhTRw1w"/>
              </node>
              <node xmi:type="uml:InitialNode" xmi:id="_SCI9SK1MEeOdBunZhTRw1w" name="Initial(ConditionalTestExpression@66fac898)" outgoing="_SCI9Tq1MEeOdBunZhTRw1w"/>
              <node xmi:type="uml:DecisionNode" xmi:id="_SCI9Sa1MEeOdBunZhTRw1w" name="Decision(ConditionalTestExpression@66fac898)" outgoing="_SCI9UK1MEeOdBunZhTRw1w _SCI9Uq1MEeOdBunZhTRw1w" incoming="_SCI9Tq1MEeOdBunZhTRw1w _SCI9T61MEeOdBunZhTRw1w" decisionInputFlow="_SCI9T61MEeOdBunZhTRw1w"/>
              <node xmi:type="uml:MergeNode" xmi:id="_SCI9Sq1MEeOdBunZhTRw1w" name="Merge(ConditionalTestExpression@66fac898.result)" outgoing="_SCI9Vq1MEeOdBunZhTRw1w" incoming="_SCI9VK1MEeOdBunZhTRw1w _SCI9Va1MEeOdBunZhTRw1w"/>
              <structuredNodeOutput xmi:id="_SCI9S61MEeOdBunZhTRw1w" name="ConditionalTestExpression@3131ce6c.operand3.result" outgoing="_SCJkKa1MEeOdBunZhTRw1w" incoming="_SCI9Vq1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCI9TK1MEeOdBunZhTRw1w"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCI9Ta1MEeOdBunZhTRw1w" value="*"/>
              </structuredNodeOutput>
              <edge xmi:type="uml:ControlFlow" xmi:id="_SCI9Tq1MEeOdBunZhTRw1w" source="_SCI9SK1MEeOdBunZhTRw1w" target="_SCI9Sa1MEeOdBunZhTRw1w"/>
              <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9T61MEeOdBunZhTRw1w" source="_SCIWOq1MEeOdBunZhTRw1w" target="_SCI9Sa1MEeOdBunZhTRw1w"/>
              <edge xmi:type="uml:ControlFlow" xmi:id="_SCI9UK1MEeOdBunZhTRw1w" source="_SCI9Sa1MEeOdBunZhTRw1w" target="_SCIWPa1MEeOdBunZhTRw1w">
                <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCI9Ua1MEeOdBunZhTRw1w" name="Value(true)" value="true"/>
              </edge>
              <edge xmi:type="uml:ControlFlow" xmi:id="_SCI9Uq1MEeOdBunZhTRw1w" source="_SCI9Sa1MEeOdBunZhTRw1w" target="_SCI9Qq1MEeOdBunZhTRw1w">
                <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCI9U61MEeOdBunZhTRw1w" name="Value(false)"/>
              </edge>
              <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9VK1MEeOdBunZhTRw1w" source="_SCI9Oq1MEeOdBunZhTRw1w" target="_SCI9Sq1MEeOdBunZhTRw1w"/>
              <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Va1MEeOdBunZhTRw1w" source="_SCI9RK1MEeOdBunZhTRw1w" target="_SCI9Sq1MEeOdBunZhTRw1w"/>
              <edge xmi:type="uml:ObjectFlow" xmi:id="_SCI9Vq1MEeOdBunZhTRw1w" source="_SCI9Sq1MEeOdBunZhTRw1w" target="_SCI9S61MEeOdBunZhTRw1w"/>
            </node>
            <node xmi:type="uml:InitialNode" xmi:id="_SCI9V61MEeOdBunZhTRw1w" name="Initial(ConditionalTestExpression@3131ce6c)" outgoing="_SCJkIq1MEeOdBunZhTRw1w"/>
            <node xmi:type="uml:DecisionNode" xmi:id="_SCJkIK1MEeOdBunZhTRw1w" name="Decision(ConditionalTestExpression@3131ce6c)" outgoing="_SCJkJK1MEeOdBunZhTRw1w _SCJkJq1MEeOdBunZhTRw1w" incoming="_SCJkIq1MEeOdBunZhTRw1w _SCJkI61MEeOdBunZhTRw1w" decisionInputFlow="_SCJkI61MEeOdBunZhTRw1w"/>
            <node xmi:type="uml:MergeNode" xmi:id="_SCJkIa1MEeOdBunZhTRw1w" name="Merge(ConditionalTestExpression@3131ce6c.result)" outgoing="_SCJkKq1MEeOdBunZhTRw1w" incoming="_SCJkKK1MEeOdBunZhTRw1w _SCJkKa1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkIq1MEeOdBunZhTRw1w" source="_SCI9V61MEeOdBunZhTRw1w" target="_SCJkIK1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkI61MEeOdBunZhTRw1w" source="_SCIWKK1MEeOdBunZhTRw1w" target="_SCJkIK1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkJK1MEeOdBunZhTRw1w" source="_SCJkIK1MEeOdBunZhTRw1w" target="_SCIWK61MEeOdBunZhTRw1w">
              <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkJa1MEeOdBunZhTRw1w" name="Value(true)" value="true"/>
            </edge>
            <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkJq1MEeOdBunZhTRw1w" source="_SCJkIK1MEeOdBunZhTRw1w" target="_SCIWNa1MEeOdBunZhTRw1w">
              <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkJ61MEeOdBunZhTRw1w" name="Value(false)"/>
            </edge>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkKK1MEeOdBunZhTRw1w" source="_SCIWMa1MEeOdBunZhTRw1w" target="_SCJkIa1MEeOdBunZhTRw1w"/>
            <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkKa1MEeOdBunZhTRw1w" source="_SCI9S61MEeOdBunZhTRw1w" target="_SCJkIa1MEeOdBunZhTRw1w"/>
          </node>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkKq1MEeOdBunZhTRw1w" source="_SCJkIa1MEeOdBunZhTRw1w" target="_SCIWIK1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkK61MEeOdBunZhTRw1w" source="_SCIWI61MEeOdBunZhTRw1w" target="_SCIWH61MEeOdBunZhTRw1w"/>
        </node>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCJkLK1MEeOdBunZhTRw1w" name="ExpressionStatement@1951012f" incoming="_SCJkWa1MEeOdBunZhTRw1w">
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCJkLa1MEeOdBunZhTRw1w" name="Call(WriteLine)" incoming="_SCJkO61MEeOdBunZhTRw1w">
            <argument xmi:id="_SCJkLq1MEeOdBunZhTRw1w" name="Call(WriteLine).argument(value)" incoming="_SCJkOq1MEeOdBunZhTRw1w">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCJkL61MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCJkMK1MEeOdBunZhTRw1w" value="1"/>
            </argument>
            <result xmi:id="_SCJkMa1MEeOdBunZhTRw1w" name="Call(WriteLine).result(errorStatus)">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCJkMq1MEeOdBunZhTRw1w"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCJkM61MEeOdBunZhTRw1w" value="1"/>
            </result>
            <behavior xmi:type="uml:Activity" href="Libraries/fUML.library.uml#BasicInputOutput-WriteLine"/>
          </node>
          <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCJkNK1MEeOdBunZhTRw1w" name="Tuple@438c1676" outgoing="_SCJkO61MEeOdBunZhTRw1w">
            <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCJkNa1MEeOdBunZhTRw1w" name="Value(&quot;&quot;)">
              <result xmi:id="_SCJkNq1MEeOdBunZhTRw1w" name="Value(&quot;&quot;).result" outgoing="_SCJkOq1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCJkN61MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCJkOK1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <value xmi:type="uml:LiteralString" xmi:id="_SCJkOa1MEeOdBunZhTRw1w" value="">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </value>
            </node>
          </node>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkOq1MEeOdBunZhTRw1w" source="_SCJkNq1MEeOdBunZhTRw1w" target="_SCJkLq1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkO61MEeOdBunZhTRw1w" source="_SCJkNK1MEeOdBunZhTRw1w" target="_SCJkLa1MEeOdBunZhTRw1w"/>
        </node>
        <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCJkPK1MEeOdBunZhTRw1w" name="Value(true)">
          <result xmi:id="_SCJkPa1MEeOdBunZhTRw1w" name="Value(true).result" isOrdered="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCJkPq1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCJkP61MEeOdBunZhTRw1w" value="1"/>
          </result>
          <value xmi:type="uml:LiteralBoolean" xmi:id="_SCJkQK1MEeOdBunZhTRw1w" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </value>
        </node>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkQa1MEeOdBunZhTRw1w" source="_SCHvAa1MEeOdBunZhTRw1w" target="_SCHu-K1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkQq1MEeOdBunZhTRw1w" source="_SCHvAa1MEeOdBunZhTRw1w" target="_SCHvA61MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkQ61MEeOdBunZhTRw1w" source="_SCHvCa1MEeOdBunZhTRw1w" target="_SCHu_q1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkRK1MEeOdBunZhTRw1w" source="_SCHvCa1MEeOdBunZhTRw1w" target="_SCHvC61MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkRa1MEeOdBunZhTRw1w" source="_SCHvBq1MEeOdBunZhTRw1w" target="_SCHvEq1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkRq1MEeOdBunZhTRw1w" source="_SCHvDq1MEeOdBunZhTRw1w" target="_SCHvE61MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkR61MEeOdBunZhTRw1w" source="_SCHvEq1MEeOdBunZhTRw1w" target="_SCHvFa1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkSK1MEeOdBunZhTRw1w" source="_SCHvE61MEeOdBunZhTRw1w" target="_SCHvHK1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkSa1MEeOdBunZhTRw1w" source="_SCHvE61MEeOdBunZhTRw1w" target="_SCHvIq1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkSq1MEeOdBunZhTRw1w" source="_SCHvIq1MEeOdBunZhTRw1w" target="_SCHu961MEeOdBunZhTRw1w">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkS61MEeOdBunZhTRw1w" name="Value(true)" value="true"/>
        </edge>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkTK1MEeOdBunZhTRw1w" source="_SCHvIq1MEeOdBunZhTRw1w" target="_SCHvFK1MEeOdBunZhTRw1w">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkTa1MEeOdBunZhTRw1w" name="Value(false)"/>
        </edge>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkTq1MEeOdBunZhTRw1w" source="_SCHvEa1MEeOdBunZhTRw1w" target="_SCHvI61MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkT61MEeOdBunZhTRw1w" source="_SCHvEq1MEeOdBunZhTRw1w" target="_SCHvI61MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkUK1MEeOdBunZhTRw1w" source="_SCHvI61MEeOdBunZhTRw1w" target="_SCHvIq1MEeOdBunZhTRw1w">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkUa1MEeOdBunZhTRw1w" name="Value(true)" value="true"/>
        </edge>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkUq1MEeOdBunZhTRw1w" source="_SCHvI61MEeOdBunZhTRw1w" target="_SCHvG61MEeOdBunZhTRw1w">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_SCJkU61MEeOdBunZhTRw1w" name="Value(false)"/>
        </edge>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkVK1MEeOdBunZhTRw1w" source="_SCHu-61MEeOdBunZhTRw1w" target="_SCHvJK1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkVa1MEeOdBunZhTRw1w" source="_SCHvGK1MEeOdBunZhTRw1w" target="_SCHvJK1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkVq1MEeOdBunZhTRw1w" source="_SCHvH61MEeOdBunZhTRw1w" target="_SCHvJK1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCJkV61MEeOdBunZhTRw1w" source="_SCHvJK1MEeOdBunZhTRw1w" target="_SCHvJq1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkWK1MEeOdBunZhTRw1w" source="_SCHvLK1MEeOdBunZhTRw1w" target="_SCIWHq1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCJkWa1MEeOdBunZhTRw1w" source="_SCIWHq1MEeOdBunZhTRw1w" target="_SCJkLK1MEeOdBunZhTRw1w"/>
        <clause xmi:id="_SCJkWq1MEeOdBunZhTRw1w" body="_SCHvLK1MEeOdBunZhTRw1w _SCIWHq1MEeOdBunZhTRw1w _SCJkLK1MEeOdBunZhTRw1w" decider="_SCHvKa1MEeOdBunZhTRw1w" successorClause="_SCJkW61MEeOdBunZhTRw1w" test="_SCHu961MEeOdBunZhTRw1w _SCHvAq1MEeOdBunZhTRw1w _SCHvCq1MEeOdBunZhTRw1w _SCHvFK1MEeOdBunZhTRw1w _SCHvG61MEeOdBunZhTRw1w _SCHvJa1MEeOdBunZhTRw1w"/>
        <clause xmi:id="_SCJkW61MEeOdBunZhTRw1w" decider="_SCJkPa1MEeOdBunZhTRw1w" predecessorClause="_SCJkWq1MEeOdBunZhTRw1w" test="_SCJkPK1MEeOdBunZhTRw1w"/>
      </node>
    </structuredNode>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_SCHH-q1MEeOdBunZhTRw1w" name="Input(label)" outgoing="_SCHH8K1MEeOdBunZhTRw1w" parameter="_SCHH561MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ForkNode" xmi:id="_SCHu8K1MEeOdBunZhTRw1w" name="Fork(label)" outgoing="_SCHH9a1MEeOdBunZhTRw1w" incoming="_SCHH8K1MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_SCHu8a1MEeOdBunZhTRw1w" name="Input(value1)" outgoing="_SCHH8a1MEeOdBunZhTRw1w" parameter="_SCHH6q1MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ForkNode" xmi:id="_SCHu8q1MEeOdBunZhTRw1w" name="Fork(value1)" outgoing="_SCHH861MEeOdBunZhTRw1w" incoming="_SCHH8a1MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_SCHu861MEeOdBunZhTRw1w" name="Input(value2)" outgoing="_SCHH8q1MEeOdBunZhTRw1w" parameter="_SCHH7a1MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ForkNode" xmi:id="_SCHu9K1MEeOdBunZhTRw1w" name="Fork(value2)" outgoing="_SCHH9K1MEeOdBunZhTRw1w _SCHH9q1MEeOdBunZhTRw1w _SCHH961MEeOdBunZhTRw1w _SCHH-K1MEeOdBunZhTRw1w _SCHH-a1MEeOdBunZhTRw1w" incoming="_SCHH8q1MEeOdBunZhTRw1w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Activity" xmi:id="_SCJkXK1MEeOdBunZhTRw1w" name="Write" group="_SCKLOK1MEeOdBunZhTRw1w" node="_SCKLNq1MEeOdBunZhTRw1w _SCKLN61MEeOdBunZhTRw1w _SCKLOK1MEeOdBunZhTRw1w">
    <packageImport xmi:id="_SCJkXa1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes"/>
    </packageImport>
    <packageImport xmi:id="_SCJkXq1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors"/>
    </packageImport>
    <packageImport xmi:id="_SCJkX61MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-BasicInputOutput"/>
    </packageImport>
    <packageImport xmi:id="_SCJkYK1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-CollectionFunctions"/>
    </packageImport>
    <packageImport xmi:id="_SCKLMK1MEeOdBunZhTRw1w" visibility="private">
      <importedPackage href="Libraries/Alf.library.uml#Alf-Library-CollectionClasses"/>
    </packageImport>
    <ownedParameter xmi:id="_SCKLMa1MEeOdBunZhTRw1w" name="value" visibility="package">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLMq1MEeOdBunZhTRw1w" value="1"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLM61MEeOdBunZhTRw1w" value="1"/>
    </ownedParameter>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLNK1MEeOdBunZhTRw1w" source="_SCKLNq1MEeOdBunZhTRw1w" target="_SCKLN61MEeOdBunZhTRw1w"/>
    <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLNa1MEeOdBunZhTRw1w" source="_SCKLN61MEeOdBunZhTRw1w" target="_SCKLRa1MEeOdBunZhTRw1w"/>
    <structuredNode xmi:id="_SCKLOK1MEeOdBunZhTRw1w" name="Body(Write)">
      <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCKLOa1MEeOdBunZhTRw1w" name="ExpressionStatement@cafc815">
        <node xmi:type="uml:ExpansionRegion" xmi:id="_SCKLOq1MEeOdBunZhTRw1w" name="Collect(Call(write))" incoming="_SCKLZq1MEeOdBunZhTRw1w" mode="parallel" inputElement="_SCKLSq1MEeOdBunZhTRw1w">
          <node xmi:type="uml:CallOperationAction" xmi:id="_SCKLO61MEeOdBunZhTRw1w" name="Call(write)">
            <argument xmi:id="_SCKLPK1MEeOdBunZhTRw1w" name="Call(write).argument(value)" incoming="_SCKLSK1MEeOdBunZhTRw1w">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLPa1MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLPq1MEeOdBunZhTRw1w" value="1"/>
            </argument>
            <result xmi:id="_SCKLP61MEeOdBunZhTRw1w" name="Call(write).result(errorStatus)">
              <type xmi:type="uml:DataType" href="Libraries/fUML.library.uml#Common-Status"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLQK1MEeOdBunZhTRw1w"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLQa1MEeOdBunZhTRw1w" value="1"/>
            </result>
            <operation href="Libraries/fUML.library.uml#BasicInputOutput-OutputChannel-write"/>
            <target xmi:id="_SCKLQq1MEeOdBunZhTRw1w" name="Call(write).target" incoming="_SCKLSa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
              <type xmi:type="uml:Class" href="Libraries/fUML.library.uml#BasicInputOutput-OutputChannel"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLQ61MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLRK1MEeOdBunZhTRw1w" value="1"/>
            </target>
          </node>
          <structuredNodeInput xmi:id="_SCKLRa1MEeOdBunZhTRw1w" name="Collect(Call(write)).input(Fork(value))" outgoing="_SCKLSK1MEeOdBunZhTRw1w" incoming="_SCKLNa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLRq1MEeOdBunZhTRw1w" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLR61MEeOdBunZhTRw1w" value="1"/>
          </structuredNodeInput>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLSK1MEeOdBunZhTRw1w" source="_SCKLRa1MEeOdBunZhTRw1w" target="_SCKLPK1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLSa1MEeOdBunZhTRw1w" source="_SCKLSq1MEeOdBunZhTRw1w" target="_SCKLQq1MEeOdBunZhTRw1w"/>
        </node>
        <node xmi:type="uml:ExpansionNode" xmi:id="_SCKLSq1MEeOdBunZhTRw1w" name="Collect(Call(write)).inputElement" outgoing="_SCKLSa1MEeOdBunZhTRw1w" incoming="_SCKLZa1MEeOdBunZhTRw1w" regionAsInput="_SCKLOq1MEeOdBunZhTRw1w"/>
        <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCKLS61MEeOdBunZhTRw1w" name="Feature(Call(At).result())" outgoing="_SCKLZq1MEeOdBunZhTRw1w">
          <node xmi:type="uml:CallBehaviorAction" xmi:id="_SCKLTK1MEeOdBunZhTRw1w" name="Call(At)" incoming="_SCKLY61MEeOdBunZhTRw1w">
            <argument xmi:id="_SCKLTa1MEeOdBunZhTRw1w" name="Call(At).argument(seq)" incoming="_SCKLYa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLTq1MEeOdBunZhTRw1w"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLT61MEeOdBunZhTRw1w" value="*"/>
            </argument>
            <argument xmi:id="_SCKLUK1MEeOdBunZhTRw1w" name="Call(At).argument(index)" incoming="_SCKLZK1MEeOdBunZhTRw1w">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLUa1MEeOdBunZhTRw1w" value="1"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLUq1MEeOdBunZhTRw1w" value="1"/>
            </argument>
            <result xmi:id="_SCKLU61MEeOdBunZhTRw1w" name="Call(At).result()" outgoing="_SCKLZa1MEeOdBunZhTRw1w">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLVK1MEeOdBunZhTRw1w"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLVa1MEeOdBunZhTRw1w" value="1"/>
            </result>
            <behavior xmi:type="uml:Activity" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveBehaviors-SequenceFunctions-At"/>
          </node>
          <node xmi:type="uml:StructuredActivityNode" xmi:id="_SCKLVq1MEeOdBunZhTRw1w" name="Tuple@1d9a9243" outgoing="_SCKLY61MEeOdBunZhTRw1w">
            <node xmi:type="uml:ReadExtentAction" xmi:id="_SCKLV61MEeOdBunZhTRw1w" name="ReadExtent(StandardOutputChannel)">
              <classifier xmi:type="uml:Class" href="Libraries/fUML.library.uml#BasicInputOutput-StandardOutputChannel"/>
              <result xmi:id="_SCKLWK1MEeOdBunZhTRw1w" name="ReadExtent(StandardOutputChannel).result" outgoing="_SCKLYa1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <type xmi:type="uml:Class" href="Libraries/fUML.library.uml#BasicInputOutput-StandardOutputChannel"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLWa1MEeOdBunZhTRw1w"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLWq1MEeOdBunZhTRw1w" value="*"/>
              </result>
            </node>
            <node xmi:type="uml:ValueSpecificationAction" xmi:id="_SCKLW61MEeOdBunZhTRw1w" name="Value(1)">
              <result xmi:id="_SCKLXK1MEeOdBunZhTRw1w" name="Value(1).result" outgoing="_SCKLYq1MEeOdBunZhTRw1w" isOrdered="true" isUnique="false">
                <type xmi:type="uml:PrimitiveType" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes-Natural"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SCKLXa1MEeOdBunZhTRw1w" value="1"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_SCKLXq1MEeOdBunZhTRw1w" value="1"/>
              </result>
              <value xmi:type="uml:LiteralInteger" xmi:id="_SCKLX61MEeOdBunZhTRw1w" value="1">
                <type xmi:type="uml:PrimitiveType" href="Libraries/Alf.library.uml#Alf-Library-PrimitiveTypes-Natural"/>
              </value>
            </node>
          </node>
          <node xmi:type="uml:ForkNode" xmi:id="_SCKLYK1MEeOdBunZhTRw1w" name="Fork(Call(At).argument(index))" outgoing="_SCKLZK1MEeOdBunZhTRw1w" incoming="_SCKLYq1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLYa1MEeOdBunZhTRw1w" source="_SCKLWK1MEeOdBunZhTRw1w" target="_SCKLTa1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLYq1MEeOdBunZhTRw1w" source="_SCKLXK1MEeOdBunZhTRw1w" target="_SCKLYK1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ControlFlow" xmi:id="_SCKLY61MEeOdBunZhTRw1w" source="_SCKLVq1MEeOdBunZhTRw1w" target="_SCKLTK1MEeOdBunZhTRw1w"/>
          <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLZK1MEeOdBunZhTRw1w" source="_SCKLYK1MEeOdBunZhTRw1w" target="_SCKLUK1MEeOdBunZhTRw1w"/>
        </node>
        <edge xmi:type="uml:ObjectFlow" xmi:id="_SCKLZa1MEeOdBunZhTRw1w" source="_SCKLU61MEeOdBunZhTRw1w" target="_SCKLSq1MEeOdBunZhTRw1w"/>
        <edge xmi:type="uml:ControlFlow" xmi:id="_SCKLZq1MEeOdBunZhTRw1w" source="_SCKLS61MEeOdBunZhTRw1w" target="_SCKLOq1MEeOdBunZhTRw1w"/>
      </node>
    </structuredNode>
    <node xmi:type="uml:ActivityParameterNode" xmi:id="_SCKLNq1MEeOdBunZhTRw1w" name="Input(value)" outgoing="_SCKLNK1MEeOdBunZhTRw1w" parameter="_SCKLMa1MEeOdBunZhTRw1w"/>
    <node xmi:type="uml:ForkNode" xmi:id="_SCKLN61MEeOdBunZhTRw1w" name="Fork(value)" outgoing="_SCKLNa1MEeOdBunZhTRw1w" incoming="_SCKLNK1MEeOdBunZhTRw1w"/>
  </packagedElement>
  <profileApplication xmi:id="_SCKLZ61MEeOdBunZhTRw1w">
    <eAnnotations xmi:id="_SCKLaK1MEeOdBunZhTRw1w" source="http://www.eclipse.org/uml2/2.0.0/UML">
      <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/StandardL2.profile.uml#_QLYqEHJLEeKLR_U6HVChUg"/>
    </eAnnotations>
    <appliedProfile href="pathmap://UML_PROFILES/StandardL2.profile.uml#_0"/>
  </profileApplication>
</uml:Model>
