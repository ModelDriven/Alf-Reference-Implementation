namespace 'Property Management'::'Service Model'::
                           'Property Management Service Implementation';

private import 'Property Management'::'Data Model'::Properties::*;
private import 'Property Management'::'Data Model'::Locations::Location;
private import 'Property Management'::'Message Model'::*;

/** Update the acquisition information for an existing property. */
activity acquire (
  in request: 'Property Acquisition Notification',
  out reply: 'Property Management Success Reply' [0..1],
  out error: 'Error Reply' [0..1] ) {

  property = 
    Property -> select p (p.identifier == request.'property identifier')[1]; 

  reply = null;
  error = null;
  let location: Location = null;

  if (property -> isEmpty()) {
    error = new 'Error Reply' (
      identifier           => request.identifier + "/error",
      'request identifier' => request.identifier,
      'error code'         => "PAN-001",
      'error message'      => "Property not found." );

  } else if (property.status == 'Property Status'::disposed) {
    error = new 'Error Reply' (
      identifier           => request.identifier + "/error",
      'request identifier' => request.identifier,
      'error code'         => "PAN-002",
      'error message'      => "Property already disposed." );

  } else if (!(Location -> exists loc 
                (loc.identifier == request.'property location identifier'))) {
    error = new 'Error Reply' (
      identifier           => request.identifier + "/error",
      'request identifier' => request.identifier,
      'error code'         => "PAN-004",
      'error message'      => "Location not found." );

  } else {
    location = Location -> select loc 
                 (loc.identifier == request.'property location identifier')[1];
    'Property Location'.createLink(property, location);
 
    property.'acquisition data' = request.'property acquisition data';    
    property.'update status'();

    reply = this.'create reply'(request.identifier, property);
  }
}
