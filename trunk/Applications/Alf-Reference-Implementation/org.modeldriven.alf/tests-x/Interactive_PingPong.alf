active class Interactive_PingPong {

  active class A {
  
    receive signal Start {
      public b: B;
    }
    receive signal Ping { }
    
  } do {
  
    accept (start: Start);
    WriteLine("Starting A");
    b = start.b;
    
    while (true) {
      accept (Ping);
      WriteLine("Ping!");
      b.Pong();
    }
  }
  
  active class B {
  
    receive signal Start { 
      public a: A;
      public n: Integer;
    }
    receive signal Pong { }
    
  } do {
  
    accept (start: Start);
    WriteLine("Starting B");
    a = start.a;

    for (i in 1..start.n) {
      WriteLine("i = " + IntegerFunctions::ToString(i));
      a.Ping();
      accept (Pong);
      WriteLine("Pong!");
    }
  }
  
} do {

  a = new A();
  b = new B();

  Write("Enter n: ");
  n = IntegerFunctions::ToInteger(ReadLine(error));
      
  if (n->notEmpty()) { 
    a.Start(b);
    b.Start(a, n);
  }
  
}
    