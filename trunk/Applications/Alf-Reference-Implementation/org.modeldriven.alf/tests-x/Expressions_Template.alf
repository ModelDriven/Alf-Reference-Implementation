/**
 * Test expressions involving templates.
 **/
class Expressions_Template specializes Test {

	@Create public Expressions_Template() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
   		new TestRunner(this).Start();
	}

    public activity A<T specializes B>(in x: T): Integer { 
      return x.i;
    }
    
    public class B {
      public i: Integer;
      @Create public B(in i: Integer) { this.i = i; }
    }
    
    public class C<T> {
        p: T;
        
        @Create public C(in p: T) { this.p = p; }
        r(): T { return this.p; }
        
        activity E(in x: T): T { return x; }
    }
    
    public active class H<T> {
        public a: T;
        public b: T;
        public t: TestRunner;
        @Create public H(in a: T, in t: TestRunner) { 
          this.a = a; 
          this.t = t;
        }
    } do {
        $(this.b = new C<T>(this.a).r());
        this.t.Continue();
    }
    
    public active class TestRunner {
    	
      private outer : Test;
      
      @Create public TestRunner(in outer: Test) {
      	this.outer = outer;
      }
      
      public receive signal Start { }
      public receive signal Continue { }
      
      public test(
        out i: Integer, out j: Integer, out h: H<B>,
        out s: Set<Integer>, out list: List<Integer>) {
        
        b = new B(1);
        
        i = A<B>(b);
        j = C<B>.E(b).i;
        h = new H<B>(b, this);      
  
        s = new Set<Integer>(null);
        s.add(1);
        
        list = List<Integer>{1, 2, 3};
      }
      
    } do {
      accept (Start);
      this.test(i, j, h, s, list);
      accept (Continue);
      
      AssertEqual("i", i, 1);
      AssertEqual("j", j, 1);
      AssertEqual("h.b.i", h.b.i, 1);
      
      AssertList("s", s.toSequence(), 1);
      AssertList("list", list.toSequence(), Integer[]{1,2,3});
      
      this.outer.done();
    }
}