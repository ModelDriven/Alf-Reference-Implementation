/**
 * Test non-indexed feature assignment expressions
 **/
class Expressions_Assignment_Feature specializes Test {
	
	@Create public run(in tester : Tester[0..1]) {
		super(tester);
	    this.test(c,d,n,m,self);
	    
	    AssertEqual("c.x", c.x, 2);
	    AssertEqual("c.y[1]", c.y[1], 1);
	    AssertEqual("c.y[2]", c.y[2], 2);
	    AssertEqual("c.n", c.n, 3);
	    AssertEqual("n", n, 3);    
	    
	    AssertEqual("d.x", d.x, 2);
	    AssertEqual("d.y[1]", d.y[1], 1);
	    AssertEqual("d.y[2]", d.y[2], 2);
	    AssertEqual("d.m", d.m, 3);
	    AssertEqual("m", m, 3); 
	    
	    AssertEqual("self.x", self.x, 2);
	    AssertEqual("self.y[1]", self.y[1], 1);
	    AssertEqual("self.y[2]", self.y[2], 2);
	
	    this.done();
	}

	@Create public Expressions_Assignment_Feature() {
		this.run(null);
	}

    private x: Integer;
    private y: Integer[] sequence;
    
    private class C {
        public x: Integer;
        public y: Integer[] sequence;
    }
    
    private datatype D {
        public x: Integer;
        public y: Integer[] sequence;
    }
    
    private assoc A {
        public c: C;
        public n: Integer;
    }

    private assoc B {
        public d: D;
        public m: Integer;
    }

    public test(out c: C, out d: D, out n: Integer, out m: Integer,
        out self: Expressions_Assignment_Feature) {  
      c = new C();
      c.x = 2;
      c.y = 1;
      c.y = null;
      c.y = Integer[]{1,2};
      
      c.n = 3;
      n = A::n(c);
      
      d = new D(0, null);
      d.x = 2;
      d.y = 1;
      d.y = null;
      d.y = Integer[]{1,2};
      
      d.m = 3;
      m = B::m(d);
      
      this.x = 2;
      this.y = 1;
      this.y = null;
      this.y = Integer[]{1,2};
      self = this;
    }
}
      