/**
 * Test for statements.
 **/
class Statements_For_Looping specializes Test {

	@Create public Statements_For_Looping() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);

		this.test(readings, sum, outgoingEdges, SnEven, SnOdd);
		
		AssertList("readings", readings, Integer[]{1,2});
		AssertEqual("sum", sum, 55);
		AssertList("outgoingEdges.token", outgoingEdges.token, Integer[]{2,4});
		AssertList("SnEven", SnEven, Integer[]{5,7,9});
		AssertList("SnOdd", SnOdd, Integer[]{30,60,90});
	
	  	this.done();
	}

    // Supporting declarations *************************************************
    
	private class Sensor {
		private reading: Integer[0..1];
		@Create public Sensor(in reading: Integer[0..1]) {
			this.reading = reading;
		}
		public getNextReading(): Integer[0..1] { return this.reading; }
    }
	private class ActivityEdgeInstance {
		public token: Integer;
		public sendOffer(in token: Integer) {
			this.token = token;
		}
	}
	
    private activity processRecord(in index: Integer) { }
    
	//**************************************************************************

    public test(
    	out readings: Integer[*], out sum1: Integer,
    	out outgoingEdges: ActivityEdgeInstance[*],
    	out SnEven: Integer[*], out SnOdd: Integer[*]) {
    
      // Setup
  	  noiseLimit = 0;
  	  sensors = Sensor[]{new Sensor(1), new Sensor(2), new Sensor(null), new Sensor(3)};
  	  reading = +0;
  	  readings = null;
  	  recordCount = 10;
  	  let sum: Integer = 0; // Make sure assigned values work right for local declaration statements.
  	  outgoingEdges = ActivityEdgeInstance[]{new ActivityEdgeInstance(), new ActivityEdgeInstance()};
  	  tokens = Integer[]{1, 2, 3};
  	  SLower = Integer[]{4, 5, 6};
  	  SUpper = Integer[]{1, 2, 3};
  	  SnEven = null;
  	  SnOdd = null;
  	  V = Integer[]{10, 20, 30};
	    // *****
	      
  	  for (s in sensors) {
        reading = s.getNextReading();
  	    if (reading->isEmpty()) {
  	      break;
  	    }
  	    if (reading > noiseLimit) {
  	      readings->add(reading);
  	    }
  	  }
  	  
  	  for (j in 1..recordCount) {
  	    sum = sum + j;
  	  }
  	  sum1 = sum;
  	  
  	  for (ActivityEdgeInstance outgoingEdge: outgoingEdges, Integer token: tokens) {
  	    outgoingEdge.sendOffer(token);
  	  }
  	  
  	  //@parallel 
  	  for (outgoingEdge in outgoingEdges, token in tokens) {
  	    outgoingEdge.sendOffer(outgoingEdge.token + token);
  	  }
  	  
  	  //@parallel(SnEven,SnOdd)
  	  for (lower in SLower, upper in SUpper, root in V) {
  	    //@parallel 
  	    {
  	      add(SnEven, lower+upper);
  	      SnOdd->add((lower-upper)*root);
  	    }
  	  }
  	  
    }
}
