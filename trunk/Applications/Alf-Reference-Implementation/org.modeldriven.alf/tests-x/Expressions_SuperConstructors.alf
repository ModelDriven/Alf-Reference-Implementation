/**
 * Test super constructor invocation expressions.
 **/
active class Expressions_SuperConstructors {

    // Supporting declarations *************************************************
    class Super1 {
    
      public x: Integer = 0;

      @Create public Super1() { }
      @Create public create(in x: Integer) { 
        this.x = x;
      }
    }
    
    class Sub1 specializes Super1 {
    
      public z1: Integer = this.x + 1;
      
      @Create public Sub1() {
        super();
      }
      @Create public a() {
        this.b(1);
      }
      @Create public b(in x: Integer) {
        super.create(x);
      }
    }
    
    class Super2 {
    
      public y: Integer = 0;
        
      @Create public Super2() { }
      @Create public create(in y: Integer) {
        this.y = y;
      }
    }
    
    class Sub2 specializes Super1, Super2 {
    
      public z2: Integer = this.x + this.y;
    
      @Create public Sub2() { }
      @Create public create1(in x: Integer) {
        super.Super1::create(x);
      }
      @Create public create2(in x: Integer, in y: Integer) {
        super.Super1::create(x);
        super.Super2::create(y);
      }
    }
    
    class Sub3 specializes Sub1, Sub2 {  
      @Create public Sub3() {
        super.Sub1::b(3);
        super.Sub2::create2(1,2);
      }
    }
    
    //**************************************************************************

    test(
      out super0: Super1, out super1: Super1, 
      out s0: Sub1, out s1: Sub1, out s2: Sub1,
      out s00: Sub2, out s10: Sub2, out s11: Sub2,
      out s3: Sub3) {
    
      super0 = new Super1();
      super1 = new Super1::create(1);
      
      s0 = new Sub1();
      s1 = new Sub1::a();
      s2 = new Sub1::b(2);
      
      s00 = new Sub2();
      s10 = new Sub2::create1(1);
      s11 = new Sub2::create2(1,1);
      
      s3 = new Sub3();
    }
      
} do {
  this.test(super0, super1, s0, s1, s2, s00, s10, s11, s3);
  
  AssertEqual("super0.x", super0.x, 0);
  AssertEqual("super1.x", super1.x, 1);
  
  AssertEqual("s0.x", s0.x, 0);
  AssertEqual("s0.z1", s0.z1, 1);
  AssertEqual("s1.x", s1.x, 1);
  AssertEqual("s1.z1", s1.z1, 2);
  AssertEqual("s2.x", s2.x, 2);
  AssertEqual("s2.z1", s2.z1, 3);
  
  AssertEqual("s00.x", s00.x, 0);
  AssertEqual("s00.y", s00.y, 0);
  AssertEqual("s00.z2", s00.z2, 0);
  AssertEqual("s10.x", s10.x, 1);
  AssertEqual("s10.y", s10.y, 0);
  AssertEqual("s10.z2", s10.z2, 1);
  AssertEqual("s11.x", s11.x, 1);
  AssertEqual("s11.y", s11.y, 1);
  AssertEqual("s11.z2", s11.z2, 2);
  
  AssertEqual("s3.x", s3.x, 3);
  AssertEqual("s3.y", s3.y, 2);
  AssertEqual("s3.z1", s3.z1, 4);
  AssertEqual("s3.z2", s3.z2, 5);

  WriteLine("Done");
}
    