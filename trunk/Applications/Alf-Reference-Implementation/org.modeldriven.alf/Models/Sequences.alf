private import Alf::Library::PrimitiveBehaviors::IntegerFunctions::ToString;
private import Alf::Library::CollectionClasses::List;
activity Sequences() {
	// This is the basic kind of sequence, basically a type with multiplicity.
	// Such sequences are always flat, they cannot be nested.
	seq1 = Integer[]{1, 2, 3};
	WriteLine("seq1[2] = " + ToString(seq1[2]));
	
	// This is the construction of a list as an instance of a collection class.
	// This creates a single object that contains the list, but various syntactic
	// shortcuts let you often use it much like a sequence.
	seq2 = List<Integer>{1, 2, 3};
	WriteLine("seq2[2] = " + ToString(seq2.at(2)));
	
	// Lists of the above sort can be nested.
	// Note: The space is necessary in the closing angle brackets, because the
	// lexer sees ">>" as a single token (a right shift operator).
	seq3 = List< List<Integer> >{ {1,2,3}, {4,5} };
	WriteLine("seq3[1,2] = " + ToString(seq3.at(1).at(2)));
}