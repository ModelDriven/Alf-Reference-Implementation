namespace Ordering;

/**
A shopping cart contains a customer's product selections. A cart is started when
a customer selects a first product. Additional products may be added to the
cart. The customer then checks out the cart to place an order.
*/
active class ShoppingCart {

  /**
  An arbitrary ID to refer to a specific cart.
  */
  public cartID: arbitrary_id = ShoppingCart->size(); // isID
  
  /**
  The total value of all of the items in the cart.
  */
  public totalValue: Money = new (0,0);  // derived
  
  /**
  External entity references.
  */
  private EE: ExternalEntities = ExternalEntities::GetInstance();
  
  /*
   * Signal receptions
   */
   
  public receive signal StartCart {
    public productID: UniversalProductCode;
    public quantity: Count;
  }
  
  public receive signal AddSelection {
    public productID: UniversalProductCode;
    public quantity: Count;
  }
  
  public receive signal CartUpdated {
  }
  
  public receive signal Cancel {
  }
  
  public receive signal CheckOut {
    public accountNumber: BankCardAccountNumber;
    public billingAddress: MailingAddress;
    public cardExpirationDate: MonthYear;
    public cardholderName: PersonalName;
    public customerEmail: InternetEmailAddress;
    public customerName: PersonalName;
    public customerPhone: TelephoneNumber;
    public shippingAddress: MailingAddress;
  }
  
  /*
   * State entry behaviors
   */
   
  private '1. New Order'(in rcvd_evt: StartCart) {
    // Add the first selection to the order.
    this.AddSelection(
      productID => rcvd_evt.productID,
      quantity => rcvd_evt.quantity
    );
  }
  
  private '2. Adding Selection to Cart'(in rcvd_evt: AddSelection) {
    // Add the next selection to the cart.
    productSelection = this.'includes selection'-> select selected (
      selected.'is selection of'.productID == rcvd_evt.productID)[1];
    if (productSelection->isEmpty()) {
      new ProductSelection().AddSelection(
        cartID =>    this.cartID,
        productID => rcvd_evt.productID,
        quantity =>  rcvd_evt.quantity
      );
    } else {
      productSelection.ChangeQuantity(
        quantity => productSelection.quantity + rcvd_evt.quantity
      );
    }
  }
  
  private '2a. Updating Cart'(in rcvd_evt: CartUpdated) {
    //@isolated
    {
    
    // Update derived attribute.
    productSelections = this.'includes selection';
    this.totalValue = productSelections.selectionValue->reduce Add;
    
    this.EE.onlineCustomer.ShoppingCartUpdated(this.cartID);
    
    }
  }
  
  private '3. Establishing Customer and Verifying Payment'(in rcvd_evt: CheckOut) {
    //@isolated
    {
    
    new Order().CheckOut(
      cart => this,
      accountNumber =>      rcvd_evt.accountNumber,
      billingAddress =>     rcvd_evt.billingAddress,
      cardExpirationDate => rcvd_evt.cardExpirationDate,
      cardholderName =>     rcvd_evt.cardholderName,
      customerName =>       rcvd_evt.customerName,
      customerPhone =>      rcvd_evt.customerPhone,
      customerEmail =>      rcvd_evt.customerEmail,
      shippingAddress =>    rcvd_evt.shippingAddress
    );
    
    this.EE.onlineCustomer.ShoppingCartUpdated(this.cartID);
    
    }
  }
  
  private '4. Canceling Entire Cart'(in rcvd_evt: Cancel) {
    //@isolated
    {
    
    // Delete all the selections in the cart.
    this.'includes selection'.destroy();
    
    this.totalValue = new Money(0,0);
    
    this.EE.onlineCustomer.ShoppingCartUpdated(this.cartID);
    
    }
  }
    
} do  {

  accept (startCart: StartCart);
  this.'1. New Order'(startCart);
  
  accept (addSelection1: AddSelection);
  this.'2. Adding Selection to Cart'(addSelection1);

  do {  
    
    accept (cartUpdated1: CartUpdated);
    this.'2a. Updating Cart'(cartUpdated1);
    
    do {
      accept (cartUpdated2: CartUpdated) {
        this.'2a. Updating Cart'(cartUpdated2);
        
      } or accept (addSelection2: AddSelection) {
        this.'2. Adding Selection to Cart'(addSelection2);
        break;
        
      } or accept (checkOut: CheckOut) {
        this.'3. Establishing Customer and Verifying Payment'(checkOut);
        return;
        
      } or accept (cancel: Cancel) {
        this.'4. Canceling Entire Cart'(cancel);
        return;
        
      } 

    } while(true);
    
  } while (true);
}