namespace Shipping;

/**
A Shipping Clerk is a Warehouse Clerk who is assigned to pack and ship customer
orders.

The Shipping Clerk, once assigned to pack a shipment, gets the stock for the
shipment, packs the box, affixes the shipping label (with a tracking number 
assigned by the delivery company), and puts the shipment in a bin for pickup
by the delivery company.

The actual assignment of clerks to shipments is handled by the state machine for
the Warehouse class. Only shipping clerks on duty at a given warehouse may be
assigned to shipments that originate from that warehouse.
*/
active class ShippingClerk specializes WarehouseClerk {

  /**
  True if the shipping clerk is idle and able to be assigned to another shipping
  job.
  */
  public awaitingAssignment: Boolean;
  
  @Create
  public ShippingClerk(
    in clerkName: PersonalName,
    in warehouse: Warehouse
  ) {
    super(clerkName, warehouse);
  }
  
  /*
   * Signal receptions
   */
   
  public receive signal StartShipping {
  }

  public receive signal ClerkAssigned {
  }
  
  public receive signal BooksSelected {
  }
  
  public receive signal BoxPacked {
  }
  
  public receive signal BoxSealed {
  }
  
  public receive signal ShippingLabelAttached {
  }
  
  public receive signal BoxAtLoadingDock {
  }
  
  public receive signal OffDuty {
  }
  
  /**
  External entity references.
  */
  private EE: ExternalEntities = ExternalEntities::GetInstance();
  
  /*
   * State entry behaviors
   */
  
  private '1. Waiting for a Job'() {
    //@isolated
    {
    
    this.awaitingAssignment = true;
    myWarehouse = ((WarehouseClerk)this).'works in';
    myWarehouse.ClerkFree();
    
    }
  }
  
  private '2. Selecting Books'() {
    this.EE.shippingClerk.ShipmentReadyToPack(
      clerkID => this.clerkID
    );
  }
  
  private '3. Packing Box'() {
  }
  
  private '4. Sealing Box'() {
  }
  
  private '5. Attaching Shipping Label'() {
  }
  
  private '6. Delivering Box to Loading Dock'() {
  }
  
  private '7. Completing Job'() {
    //@isolated
    {
    
    currentShipment = this.'is currently packing';
    currentShipment.Packed(
      clerk => this
    );
    
    if (this.goOffDutyAtEndOfJob) {
      this.OffDuty();
      myWarehouse = null; // Required to allow assignment in else part.
    } else {
      this.awaitingAssignment = true;
      myWarehouse = this.'works in';
      myWarehouse.ClerkFree();
    }
    
    }
  }
  
  private '8. Off Duty'() {
    //@isolated
    {
    
    classify (WarehouseClerk)this from ShippingClerk to OffDutyClerk;
    
    }
  }
  
} do {

  accept (StartShipping);
  this.'1. Waiting for a Job'();
  
  while (true) {
    accept (ClerkAssigned) {
      this.'2. Selecting Books'();
      
      accept (BooksSelected);
      this.'3. Packing Box'();
      
      accept (BoxPacked);
      this.'4. Sealing Box'();
      
      accept (BoxSealed);
      this.'5. Attaching Shipping Label'();
      
      accept (ShippingLabelAttached);
      this.'6. Delivering Box to Loading Dock'();
      
      accept (BoxAtLoadingDock);
      this.'7. Completing Job'();
      
    } or accept (OffDuty) {
      this.'8. Off Duty'();
      break;
      
    }
  }
   
}
