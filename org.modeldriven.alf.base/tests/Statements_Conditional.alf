private import Testing::*;
/**
 * Test if and switch statements.
 **/  
class Statements_Conditional specializes Test {

	@Create public Statements_Conditional() {
		this.run(null);
	}

	@Create public run(in tester: Tester[0..1]) {
		super(tester);
		
		this.test(
			reading, condition1, condition2, condition3, 
			empty, nonEmpty
		);
		
		AssertEqual("reading", reading, 150);
		AssertEqual("condition1", condition1, Condition::alert);
		AssertEqual("condition2", condition2, Condition::critical);
		AssertEqual("condition3", condition3, Condition::critical);
		AssertEqual("empty", empty, null);
		AssertEqual("nonEmpty", nonEmpty, 1);
	
	  	this.done();
	}

    // Supporting declarations *************************************************
    
    private class Monitor { 
    		public raiseAlarm(in sensorId: Integer) { }
    		public cleanUp() { }
    }
    private enum Condition { normal, alert, critical, error }
    
    //**************************************************************************

    public test(out reading1 : Integer, 
    	 out condition1: Condition[0..1], out condition2: Condition, out condition3: Condition,
    	 out empty: Integer[0..1], out nonEmpty: Integer[0..1] ) {
    
      // Setup
      reading1 = 0;
      reading = 150;
      threshold = 10;
      safeLimit = 100;
      criticalLimit = 200;
      errorLimit = 1000;
      sensorId = 1;
      monitor = new Monitor();
      // *****
      
      if ((reading1 = reading) > threshold) {
         monitor.raiseAlarm(sensorId); 
      }
      
      if (reading <= safeLimit) {
        condition1 = Condition::normal; }
      else if (reading > safeLimit && reading <= criticalLimit) {
        condition1 = Condition::alert; }
      else if (reading > criticalLimit) {
        condition1 = Condition::critical; }
      
      reading = 500;
      
      if (reading <= safeLimit) {
        condition2 = Condition::normal; 
      }
      else if (reading <= criticalLimit) {
        condition2 = Condition::alert; 
      }
      else {
        condition2 = Condition::critical; 
      }
      
      if (reading <= safeLimit) {
        condition3 = Condition::normal; }
      else if (reading > safeLimit && reading <= criticalLimit) {
        condition3 = Condition::alert; }
      else if (reading > criticalLimit && reading < errorLimit) {
        condition3 = Condition::critical; }
      else {
        condition3 = Condition::error; }
        
      if (false) {
        a = 0;
      } else {
        b = 1;
      }
      
      if (1/0 > 2 == true) {
        a = 1;
      }
      
 	  empty = a;
	  nonEmpty = b;
    }
}