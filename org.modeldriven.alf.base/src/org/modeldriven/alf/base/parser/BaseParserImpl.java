/* Generated By:JavaCC: Do not edit this line. BaseParserImpl.java */
package org.modeldriven.alf.base.parser;

import org.modeldriven.alf.parser.ParsedElement;
import org.modeldriven.alf.parser.Parser;
import org.modeldriven.alf.syntax.common.*;
import org.modeldriven.alf.syntax.expressions.*;
import org.modeldriven.alf.syntax.statements.*;
import org.modeldriven.alf.syntax.units.*;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("all")
public class BaseParserImpl implements Parser, BaseParserImplConstants {

  private String fileName = "";

  public BaseParserImpl(String fileName) throws java.io.FileNotFoundException {
    this(fileName == null? System.in: new java.io.FileInputStream(fileName));
    this.setFileName(fileName == null? "System.in": fileName);
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public String getFileName() {
    return this.fileName;
  }

  public void setTabSize(int tabSize) {
    this.jj_input_stream.setTabSize(tabSize);
  }

  public int getTabSize() {
    return this.jj_input_stream.getTabSize();
  }

  public int getLine() {
    return this.token.beginLine;
  }

  public int getColumn() {
    return this.token.beginColumn;
  }

  public void provideInfo(ParsedElement element, boolean fromNextToken) {
    Token token = this.getToken(0);
    if (fromNextToken && token.next != null) {
      token = token.next;
        }
        element.setParserInfo(this.fileName,
                token.beginLine, token.beginColumn,
                token.endLine, token.endColumn);
  }

  public void provideBegin(ParsedElement element, Token token) {
    element.setBegin(token.beginLine, token.beginColumn);
  }

  public void provideEnd(ParsedElement element) {
    Token token = this.getToken(0);
    element.setEnd(token.endLine, token.endColumn);
  }

  private String errorMessage(String message) {
    return "[" + this.getLine() + ":" + this.getColumn() + "] " +
           message;
  }

  private ParseException generateParseException(Token token, String message) {
    return new ParseException(token, errorMessage(message));
  }

/***************
 *    NAMES    *
 ***************/
  final public String Name() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName QualifiedName() throws ParseException {
  QualifiedName q = new QualifiedName(this);
  NameBinding n;
    n = NameBinding();
                      q.addNameBinding(n);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(DOUBLE_COLON);
      n = NameBinding();
                                                    q.addNameBinding(n);
    }
    this.provideEnd(q);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public NameBinding NameBinding() throws ParseException {
  String n;
  TemplateBinding tb;
  NameBinding nb = new NameBinding(this);
    n = Name();
               nb.setName(n);
    this.provideEnd(nb);
    {if (true) return nb;}
    throw new Error("Missing return statement in function");
  }

/***************
 * EXPRESSIONS *
 ***************/
  final public Expression Expression() throws ParseException {
  Expression e;
    e = UnaryExpression();
    e = ExpressionCompletion(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* For use in the parsing of OpaqueExpressions. */
  final public Expression ExpressionEOF() throws ParseException {
  Expression e;
    e = Expression();
    jj_consume_token(0);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonNameExpression() throws ParseException {
  Expression e;
    e = NonNameUnaryExpression();
    e = ExpressionCompletion(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NameToExpressionCompletion(QualifiedName q) throws ParseException {
  Expression e = new NameExpression(q);
    ((NameExpression) e).setName(q);
    if (jj_2_2(2)) {
      e = NameToPrimaryExpression(q);
    } else {
      ;
    }
    e = PrimaryToExpressionCompletion(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryToExpressionCompletion(Expression p) throws ParseException {
  Expression e;
    e = PrimaryExpressionCompletion(p);
    e = ExpressionCompletion(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionCompletion(Expression e) throws ParseException {
    if (jj_2_3(2147483647)) {
      e = AssignmentExpressionCompletion(e);
    } else {
      e = ConditionalExpressionCompletion(e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PRIMARY EXPRESSIONS */
  final public Expression PrimaryExpression() throws ParseException {
   Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = NameOrPrimaryExpression();
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e = BaseExpression();
      break;
    case LPAREN:
      e = ParenthesizedExpression();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = PrimaryExpressionCompletion(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BaseExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e = LiteralExpression();
      break;
    case THIS:
      e = ThisExpression();
      break;
    case SUPER:
      e = SuperInvocationExpression();
      break;
    case NEW:
      e = InstanceCreationExpression();
      break;
    case ANY:
    case NULL:
      e = SequenceAnyExpression();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NameToPrimaryExpression(QualifiedName q) throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case LBRACKET:
      e = SequenceConstructionExpressionCompletion(q);
      break;
    case LPAREN:
      e = BehaviorInvocation(q);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpressionCompletion(Expression p) throws ParseException {
  FeatureReference f;
  Expression i;
  Expression e = p;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        f = Feature(e);
      e = new PropertyAccessExpression(f);
      ((PropertyAccessExpression)e).setFeatureReference(f);
        if (jj_2_4(2)) {
          e = FeatureInvocation(f);
        } else {
          ;
        }
        break;
      case LBRACKET:
        i = Index();
      SequenceAccessExpression s = new SequenceAccessExpression(e);
      s.setPrimary(e);
      s.setIndex(i);
      this.provideEnd(s);
      e = s;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* LITERAL EXPRESSIONS */
  final public Expression LiteralExpression() throws ParseException {
  Token t;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
      e = new BooleanLiteralExpression(this); ((BooleanLiteralExpression)e).setImage(t.image);
      break;
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
      e = new NaturalLiteralExpression(this); ((NaturalLiteralExpression)e).setImage(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      e = new StringLiteralExpression(this); ((StringLiteralExpression)e).setImage(t.image);
      break;
    case STAR:
      t = jj_consume_token(STAR);
      e = new UnboundedLiteralExpression(this);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* NAME EXPRESSIONS */
  final public Expression NameOrPrimaryExpression() throws ParseException {
  QualifiedName q;
  Expression e;
    q = QualifiedName();
    NameExpression ne = new NameExpression(q);
    ne.setName(q);
    e = ne;
    if (jj_2_5(2)) {
      e = NameToPrimaryExpression(q);
    } else {
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* THIS EXPRESSIONS */
  final public Expression ThisExpression() throws ParseException {
  Tuple t;
  Expression e = new ThisExpression(this);
    jj_consume_token(THIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = Tuple();
      e = new FeatureInvocationExpression(e);
      ((FeatureInvocationExpression) e).setTuple(t);
      t.setInvocation((FeatureInvocationExpression) e);
      this.provideEnd(e);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PARENTHESIZED EXPRESSIONS */
  final public Expression ParenthesizedExpression() throws ParseException {
  Expression e;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTY ACCESS EXPRESSIONS */
  final public FeatureReference Feature(Expression p) throws ParseException {
  NameBinding n;
    jj_consume_token(DOT);
    n = NameBinding();
    FeatureReference f = new FeatureReference(p);
    f.setExpression(p);
    f.setNameBinding(n);
    this.provideEnd(f);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

/* INVOCATION EXPRESSIONS */
  final public Tuple Tuple() throws ParseException {
  PositionalTuple t = new PositionalTuple(this);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
      PositionalTupleExpressionList(t);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    this.provideEnd(t);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void PositionalTupleExpressionList(PositionalTuple t) throws ParseException {
  Expression e;
    e = Expression();
                     t.addExpression(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      e = Expression();
                               t.addExpression(e);
    }
  }

  final public Expression BehaviorInvocation(QualifiedName n) throws ParseException {
  Tuple t;
    t = Tuple();
    BehaviorInvocationExpression e = new BehaviorInvocationExpression(n);
    e.setTarget(n);
    e.setTuple(t);
    this.provideEnd(e);
    t.setInvocation(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FeatureInvocation(FeatureReference f) throws ParseException {
  Tuple t;
    t = Tuple();
    FeatureInvocationExpression e = new FeatureInvocationExpression(f);
    e.setTarget(f);
    e.setTuple(t);
    this.provideEnd(e);
    t.setInvocation(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SuperInvocationExpression() throws ParseException {
  QualifiedName n = null;
  Tuple t;
  SuperInvocationExpression e = new SuperInvocationExpression(this);
    jj_consume_token(SUPER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      n = QualifiedName();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    t = Tuple();
    e.setTarget(n);
    e.setTuple(t);
    this.provideEnd(e);
    t.setInvocation(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* INSTANCE CREATION EXPRESSIONS */
  final public Expression InstanceCreationExpression() throws ParseException {
  QualifiedName n;
  Tuple t;
  Expression e;
  InstanceCreationExpression ice = new InstanceCreationExpression(this);
    jj_consume_token(NEW);
    n = QualifiedName();
    t = Tuple();
      ice.setConstructor(n);
      ice.setTuple(t);
      this.provideEnd(ice);
      t.setInvocation(ice);
      e = ice;
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* SEQUENCE CONSTRUCTION EXPRESSIONS */
  final public SequenceConstructionExpression SequenceAnyExpression() throws ParseException {
  SequenceConstructionExpression e = new SequenceConstructionExpression(this);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
      jj_consume_token(ANY);
      SequenceConstructionExpressionBody(e);
      break;
    case NULL:
      jj_consume_token(NULL);
             e.setHasMultiplicity(true);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(e);
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public SequenceConstructionExpression SequenceConstructionExpressionCompletion(QualifiedName q) throws ParseException {
  SequenceConstructionExpression e = new SequenceConstructionExpression(q);
    SequenceConstructionExpressionBody(e);
    e.setTypeName(q);
        this.provideEnd(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void SequenceConstructionExpressionBody(SequenceConstructionExpression e) throws ParseException {
  SequenceElements c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      MultiplicityIndicator();
                              e.setHasMultiplicity(true);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
      c = SequenceElements();
                                      e.setElements(c);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void MultiplicityIndicator() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
  }

  final public SequenceElements SequenceElements() throws ParseException {
  SequenceExpressionList c = new SequenceExpressionList(this);
  Expression e1;
  Expression e2;
    e1 = Expression();
                      c.addElement(e1);
    label_4:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      e2 = Expression();
                                             c.addElement(e2);
    }
    this.provideEnd(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/* SEQUENCE ACCESS EXPRESSIONS */
  final public Expression Index() throws ParseException {
  Expression e;
    jj_consume_token(LBRACKET);
    e = Expression();
    jj_consume_token(RBRACKET);
    this.provideEnd(e);
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* UNARY EXPRESSIONS */
  final public Expression UnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case STAR:
      e = PrimaryOrCastExpression();
      break;
    case BANG:
    case PLUS:
    case MINUS:
      e = NonPrimaryNonCastUnaryExpression();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryOrCastExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case STAR:
      e = NonNamePrimaryOrCastExpression();
      break;
    case IDENTIFIER:
      e = NameOrPrimaryExpression();
      e = PrimaryExpressionCompletion(e);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonNameUnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case STAR:
      e = NonNamePrimaryOrCastExpression();
      break;
    case BANG:
    case PLUS:
    case MINUS:
      e = NonPrimaryNonCastUnaryExpression();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonNamePrimaryOrCastExpression() throws ParseException {
  Token t;
  QualifiedName q;
  Expression e1;
  Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = jj_consume_token(LPAREN);
      if (jj_2_8(2)) {
        jj_consume_token(ANY);
        jj_consume_token(RPAREN);
        e2 = CastCompletion(null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          q = QualifiedName();
          if (jj_2_7(2)) {
            jj_consume_token(RPAREN);
            e2 = CastCompletion(q);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HASTYPE:
            case INSTANCEOF:
            case LPAREN:
            case RPAREN:
            case LBRACE:
            case LBRACKET:
            case DOT:
            case ASSIGN:
            case GT:
            case LT:
            case HOOK:
            case EQ:
            case LE:
            case GE:
            case NE:
            case SC_OR:
            case SC_AND:
            case PLUS:
            case MINUS:
            case STAR:
            case SLASH:
            case REM:
              e1 = NameToExpressionCompletion(q);
              jj_consume_token(RPAREN);
              e2 = PrimaryExpressionCompletion(e1);
              break;
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case ANY:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case BOOLEAN_LITERAL:
        case DECIMAL_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
        case STAR:
          e1 = NonNameExpression();
          jj_consume_token(RPAREN);
          e2 = PrimaryExpressionCompletion(e1);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      this.provideBegin(e2, t);
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case STAR:
      e1 = BaseExpression();
      e2 = PrimaryExpressionCompletion(e1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NonPrimaryNonCastUnaryExpression() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      e = NumericUnaryExpression();
      break;
    case BANG:
      e = BooleanNegationExpression();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanNegationExpression() throws ParseException {
  Expression e;
  UnaryExpression u = new BooleanUnaryExpression(this);
    jj_consume_token(BANG);
    e = UnaryExpression();
    u.setOperator("!");
    u.setOperand(e);
    this.provideEnd(u);
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NumericUnaryExpression() throws ParseException {
  String op;
  Expression e;
  UnaryExpression u = new NumericUnaryExpression(this);
    op = NumericUnaryOperator();
    e = UnaryExpression();
    u.setOperator(op);
    u.setOperand(e);
    this.provideEnd(u);
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public String NumericUnaryOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastExpression() throws ParseException {
  QualifiedName q;
  Expression e;
    jj_consume_token(LPAREN);
    q = TypeName();
    jj_consume_token(RPAREN);
    e = CastCompletion(q);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastCompletion(QualifiedName q) throws ParseException {
  Expression e;
  CastExpression c = q == null? new CastExpression(this): new CastExpression(q);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case STAR:
      e = PrimaryOrCastExpression();
      break;
    case BANG:
      e = BooleanNegationExpression();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    c.setTypeName(q);
    c.setOperand(e);
    this.provideEnd(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/* ARITHMETIC EXPRESSIONS */
  final public Expression MultiplicativeExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = MultiplicativeExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpressionCompletion(Expression u) throws ParseException {
  Expression e1 = u;
  String op;
  Expression e2;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      op = MultiplicativeOperator();
      e2 = UnaryExpression();
      BinaryExpression b = new ArithmeticExpression(u);
      b.setOperand1(e1);
      b.setOperator(op);
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      t = jj_consume_token(STAR);
      break;
    case SLASH:
      t = jj_consume_token(SLASH);
      break;
    case REM:
      t = jj_consume_token(REM);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = AdditiveExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = MultiplicativeExpressionCompletion(u);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      op = AdditiveOperator();
      e2 = MultiplicativeExpression();
      BinaryExpression b = new ArithmeticExpression(u);
      b.setOperand1(e1);
      b.setOperator(op);
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* RELATIONAL EXPRESSIONS */
  final public Expression RelationalExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = RelationalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = AdditiveExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
    case LT:
    case LE:
    case GE:
      op = RelationalOperator();
      e2 = AdditiveExpression();
      BinaryExpression b = new RelationalExpression(u);
      b.setOperand1(e1);
      b.setOperator(op);
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String RelationalOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t = jj_consume_token(LT);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* CLASSIFICATION EXPRESSIONS */
  final public Expression ClassificationExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ClassificationExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ClassificationExpressionCompletion(Expression u) throws ParseException {
  Expression e;
  String op;
  QualifiedName n;
    e = RelationalExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASTYPE:
    case INSTANCEOF:
      op = ClassificationOperator();
      n = QualifiedName();
      ClassificationExpression c = new ClassificationExpression(u);
      c.setOperand(e);
      c.setOperator(op);
      c.setTypeName(n);
      this.provideEnd(c);
      e = c;
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String ClassificationOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
      break;
    case HASTYPE:
      t = jj_consume_token(HASTYPE);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* EQUALITY EXPRESSIONS */
  final public Expression EqualityExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = EqualityExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  String op;
  Expression e2;
    e1 = ClassificationExpressionCompletion(u);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_7;
      }
      op = EqualityOperator();
      e2 = ClassificationExpression();
      BinaryExpression b = new EqualityExpression(u);
      b.setOperand1(e1);
      b.setOperator(op);
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String EqualityOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL LOGICAL EXPRESSIONS */
  final public Expression ConditionalAndExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalAndExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = EqualityExpressionCompletion(u);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_8;
      }
      jj_consume_token(SC_AND);
      e2 = EqualityExpression();
      ConditionalLogicalExpression b =
                new ConditionalLogicalExpression(u);
      b.setOperand1(e1);
      b.setOperator("&&");
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalOrExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
    e1 = ConditionalAndExpressionCompletion(u);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_9;
      }
      jj_consume_token(SC_OR);
      e2 = ConditionalAndExpression();
      ConditionalLogicalExpression b =
                new ConditionalLogicalExpression(u);
      b.setOperand1(e1);
      b.setOperator("||");
      b.setOperand2(e2);
      this.provideEnd(b);
      e1 = b;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* CONDITIONAL-TEST EXPRESSIONS */
  final public Expression ConditionalExpression() throws ParseException {
  Expression u;
  Expression e;
    u = UnaryExpression();
    e = ConditionalExpressionCompletion(u);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpressionCompletion(Expression u) throws ParseException {
  Expression e1;
  Expression e2;
  Expression e3;
    e1 = ConditionalOrExpressionCompletion(u);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      e2 = Expression();
      jj_consume_token(COLON);
      e3 = ConditionalExpression();
      ConditionalTestExpression c =
        new ConditionalTestExpression(u);
      c.setOperand1(e1);
      c.setOperand2(e2);
      c.setOperand3(e3);
      this.provideEnd(c);
      e1 = c;
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/* ASSIGNMENT EXPRESSIONS */
  final public Expression AssignmentExpressionCompletion(Expression p) throws ParseException {
  Expression i = null;
  LeftHandSide lhs = null;
  String op;
  Expression e2;
  Token t;
    t = token;
    op = AssignmentOperator();
    if (p instanceof SequenceAccessExpression) {
      SequenceAccessExpression e1 = (SequenceAccessExpression)p;
      i = (Expression)e1.getIndex();
      p = (Expression)e1.getPrimary();
    }

    if (p instanceof NameExpression) {
      lhs = new NameLeftHandSide(p);
      ((NameLeftHandSide)lhs).setTarget(((NameExpression)p).getName());
    } else if (p instanceof PropertyAccessExpression) {
      lhs = new FeatureLeftHandSide(p);
      ((FeatureLeftHandSide)lhs).setFeature(((PropertyAccessExpression)p).getFeatureReference());
    } else {
      {if (true) throw generateParseException(t, "Not a legal left-hand side.");}
    }
    lhs.setIndex(i);
    e2 = Expression();
    AssignmentExpression e = new AssignmentExpression(p);
    e.setLeftHandSide(lhs);
    e.setOperator(op);
    e.setRightHandSide(e2);
    this.provideEnd(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String AssignmentOperator() throws ParseException {
  Token t;
    t = jj_consume_token(ASSIGN);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**************
 * STATEMENTS *
 **************/
  final public Block StatementSequence() throws ParseException {
  Statement s;
  Block b = new Block(this);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH_SLASH_AT:
      case DOCUMENTATION_COMMENT:
      case ACCEPT:
      case ANY:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SUPER:
      case THIS:
      case WHILE:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case PLUS:
      case MINUS:
      case STAR:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_10;
      }
      s = DocumentedStatement();
                                b.addStatement(s);
    }
    this.provideEnd(b);
        {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* For use in parsing the bodies of OpaqueBehaviors and OpaqueActions */
  final public Block StatementSequenceEOF() throws ParseException {
    Block b;
    b = StatementSequence();
    jj_consume_token(0);
      {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Statement DocumentedStatement() throws ParseException {
  Token t;
  String c = null;
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    s = Statement();
    if (c != null) { s.addDocumentation(c); }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH_SLASH_AT:
      s = AnnotatedStatement();
      break;
    case LBRACE:
      s = BlockStatement();
      break;
    case SEMICOLON:
      s = EmptyStatement();
      break;
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
      s = ExpressionStatement();
      break;
    case IF:
      s = IfStatement();
      break;
    case WHILE:
      s = WhileStatement();
      break;
    case FOR:
      s = ForStatement();
      break;
    case DO:
      s = DoStatement();
      break;
    case RETURN:
      s = ReturnStatement();
      break;
    case ACCEPT:
      s = AcceptStatement();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* BLOCK */
  final public Block Block() throws ParseException {
  Token t;
  Block b;
    t = jj_consume_token(LBRACE);
    b = StatementSequence();
    jj_consume_token(RBRACE);
        this.provideBegin(b, t);
        this.provideEnd(b);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* ANNOTATED STATEMENTS */
  final public Statement AnnotatedStatement() throws ParseException {
  ArrayList<Annotation> al;
  Statement s;
    jj_consume_token(SLASH_SLASH_AT);
    al = Annotations();
    jj_consume_token(EOL);
    s = Statement();
   s.setAnnotation(al);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Annotation> Annotations() throws ParseException {
  Annotation a;
  ArrayList<Annotation> al = new ArrayList<Annotation>();
    a = Annotation();
                      al.add(a);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      jj_consume_token(AT);
      a = Annotation();
                                                             al.add(a);
    }
     {if (true) return al;}
    throw new Error("Missing return statement in function");
  }

  final public Annotation Annotation() throws ParseException {
  Token t;
  Annotation a = new Annotation(this);
    t = jj_consume_token(IDENTIFIER);
    if (!"parallel".equals(t.image) && !"isolated".equals(t.image)) {
          {if (true) throw new ParseException(t, errorMessage("Invalid annotation: " + t.image));}
        }
    a.setIdentifier(t.image);
    this.provideEnd(a);
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/* BLOCK STATEMENTS */
  final public BlockStatement BlockStatement() throws ParseException {
  Block b;
    b = Block();
    BlockStatement s = new BlockStatement(b);
    s.setBlock(b);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* EMPTY STATEMENTS */
  final public EmptyStatement EmptyStatement() throws ParseException {
  EmptyStatement s = new EmptyStatement(this);
    jj_consume_token(SEMICOLON);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* EXPRESSION STATEMENTS */
  final public Statement ExpressionStatement() throws ParseException {
  QualifiedName q;
  String n;
  Expression e;
  ExpressionStatement s = new ExpressionStatement(this);
    e = Expression();
    jj_consume_token(SEMICOLON);
    s.setExpression(e);
        this.provideEnd(s);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* IF STATEMENTS */
  final public IfStatement IfStatement() throws ParseException {
  IfStatement s = new IfStatement(this);
  Block b;
    jj_consume_token(IF);
    SequentialClauses(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      b = FinalClause();
                                                  s.setFinalClause(b);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    this.provideEnd(s);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void SequentialClauses(IfStatement s) throws ParseException {
  ConcurrentClauses cs;
    cs = ConcurrentClauses();
                             s.addNonFinalClauses(cs);
    label_12:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      cs = ConcurrentClauses();
                                                        s.addNonFinalClauses(cs);
    }
  }

  final public ConcurrentClauses ConcurrentClauses() throws ParseException {
  ConcurrentClauses cs = new ConcurrentClauses(this);
  NonFinalClause c;
    c = NonFinalClause();
                         cs.addClause(c);
    this.provideEnd(cs);
        {if (true) return cs;}
    throw new Error("Missing return statement in function");
  }

  final public NonFinalClause NonFinalClause() throws ParseException {
  Expression e;
  Block b;
  NonFinalClause c = new NonFinalClause(this);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    c.setCondition(e);
    c.setBody(b);
    this.provideEnd(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Block FinalClause() throws ParseException {
  Block b;
    jj_consume_token(ELSE);
    b = Block();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/* WHILE STATEMENTS */
  final public WhileStatement WhileStatement() throws ParseException {
  Expression e;
  Block b;
  WhileStatement s = new WhileStatement(this);
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    b = Block();
    s.setCondition(e);
    s.setBody(b);
    this.provideEnd(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* DO STATEMENTS */
  final public DoStatement DoStatement() throws ParseException {
  Block b;
  Expression e;
  DoStatement s = new DoStatement();
    jj_consume_token(DO);
    b = Block();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    s.setCondition(e);
    s.setBody(b);
    this.provideEnd(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* FOR STATEMENTS */
  final public ForStatement ForStatement() throws ParseException {
  ForStatement s = new ForStatement(this);
  Block b;
  LoopVariableDefinition d;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    d = LoopVariableDefinition();
                                       s.addVariableDefinition(d);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      d = LoopVariableDefinition();
                                                 s.addVariableDefinition(d);
    }
    jj_consume_token(RPAREN);
    b = Block();
    s.setBody(b);
        this.provideEnd(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public LoopVariableDefinition LoopVariableDefinition() throws ParseException {
  String n;
  Expression e1;
  Expression e2 = null;
  LoopVariableDefinition d = new LoopVariableDefinition(this);
    n = Name();
    jj_consume_token(IN);
    e1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_DOT:
      jj_consume_token(DOUBLE_DOT);
      e2 = Expression();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    d.setVariable(n);
    d.setTypeName(null);
    d.setExpression1(e1);
    d.setExpression2(e2);
    this.provideEnd(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* RETURN STATEMENTS */
  final public ReturnStatement ReturnStatement() throws ParseException {
  Expression e = null;
  ReturnStatement s = new ReturnStatement(this);
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case BOOLEAN_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
      e = Expression();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    s.setExpression(e);
        this.provideEnd(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* ACCEPT STATEMENTS */
  final public AcceptStatement AcceptStatement() throws ParseException {
  AcceptStatement s = new AcceptStatement(this);
  AcceptBlock c;
    c = AcceptClause();
    jj_consume_token(SEMICOLON);
    s.addAcceptBlock(c);
        this.provideEnd(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AcceptBlock AcceptClause() throws ParseException {
  QualifiedName n;
  QualifiedNameList nl = new QualifiedNameList();
  AcceptBlock b = new AcceptBlock(this);
    jj_consume_token(ACCEPT);
    jj_consume_token(LPAREN);
    n = QualifiedName();
    jj_consume_token(RPAREN);
    nl.addName(n);
    b.setSignalNames(nl);
    this.provideEnd(b);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

/*********
 * UNITS *
 *********/
  final public UnitDefinition UnitDefinition() throws ParseException {
  QualifiedName n;
  ImportReference i;
  Token t;
  NamespaceDefinition d;
  UnitDefinition u = new UnitDefinition(this);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      n = NamespaceDeclaration();
                                 u.setNamespaceName(n);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_14;
      }
      i = ImportDeclaration();
                              u.addImport(i); i.setUnit(u);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  u.addDocumentation(t.image);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    d = NamespaceDefinition();
    u.setDefinition(d);
    d.setUnit(u);
    this.provideEnd(u);
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public UnitDefinition UnitDefinitionEOF() throws ParseException {
        UnitDefinition u;
    u = UnitDefinition();
    jj_consume_token(0);
          {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<StereotypeAnnotation> StereotypeAnnotations() throws ParseException {
  StereotypeAnnotation s;
  ArrayList<StereotypeAnnotation> sl = new ArrayList<StereotypeAnnotation>();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_15;
      }
      s = StereotypeAnnotation();
                                 sl.add(s);
    }
    {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  final public StereotypeAnnotation StereotypeAnnotation() throws ParseException {
  Token n;
  StereotypeAnnotation s = new StereotypeAnnotation(this);
    jj_consume_token(AT);
    n = jj_consume_token(IDENTIFIER);
    if (!"Create".equals(n.image)) {
          {if (true) throw new ParseException(n, errorMessage("Invalid stereotype annotation: " + n.image));}
        }
    s.setStereotypeName(new QualifiedName().getImpl().addName(n.image));
    this.provideEnd(s);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName NamespaceDeclaration() throws ParseException {
  QualifiedName n;
    jj_consume_token(NAMESPACE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ImportReference ImportDeclaration() throws ParseException {
  String v;
  QualifiedName q;
  ImportReference i = new ElementImportReference(this);
    v = ImportVisibilityIndicator();
    jj_consume_token(IMPORT);
    q = QualifiedName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      jj_consume_token(STAR);
                             i = new PackageImportReference(i);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    i.setVisibility(v);
        i.setReferentName(q);
    this.provideEnd(i);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String ImportVisibilityIndicator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      t = jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* NAMESPACES */
  final public NamespaceDefinition NamespaceDefinition() throws ParseException {
  NamespaceDefinition d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      d = PackageDefinition();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case CLASS:
    case ENUM:
    case SIGNAL:
      d = ClassifierDefinition();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public String VisibilityIndicator() throws ParseException {
  String v;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PUBLIC:
      v = ImportVisibilityIndicator();
      break;
    case PROTECTED:
      t = jj_consume_token(PROTECTED);
                      v = t.image;
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/* PACKAGES */
  final public String PackageDeclaration() throws ParseException {
  String n;
    jj_consume_token(PACKAGE);
    n = Name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public PackageDefinition PackageDefinition() throws ParseException {
  String n;
  PackageDefinition d = new PackageDefinition(this);
    n = PackageDeclaration();
                             d.setName(n);
    PackageBody(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public PackageDefinition PackageDefinitionOrStub() throws ParseException {
  String n;
  PackageDefinition d = new PackageDefinition(this);
    n = PackageDeclaration();
                             d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub(true);
      break;
    case LBRACE:
      PackageBody(d);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void PackageBody(PackageDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_16;
      }
      m = PackagedElement();
                                     d.addOwnedMember(m); m.setNamespace(d);
    }
    jj_consume_token(RBRACE);
  }

  final public Member PackagedElement() throws ParseException {
  Token t;
  String c = null;
  String v;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    v = ImportVisibilityIndicator();
    m = PackagedElementDefinition();
    if (c != null) { m.addDocumentation(c); }
    m.setVisibility(v);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member PackagedElementDefinition() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      m = PackageDefinitionOrStub();
      break;
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case CLASS:
    case ENUM:
    case SIGNAL:
      m = ClassifierDefinitionOrStub();
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/***************
 * CLASSIFIERS *
 ***************/
  final public NamespaceDefinition ClassifierDefinition() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_10(2)) {
      d = ClassDefinition();
    } else if (jj_2_11(2)) {
      d = ActiveClassDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDefinition();
        break;
      default:
        jj_la1[55] = jj_gen;
        if (jj_2_12(2)) {
          d = SignalDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDefinition();
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public NamespaceDefinition ClassifierDefinitionOrStub() throws ParseException {
  NamespaceDefinition d;
    if (jj_2_13(2)) {
      d = ClassDefinitionOrStub();
    } else if (jj_2_14(2)) {
      d = ActiveClassDefinitionOrStub();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        d = EnumerationDefinitionOrStub();
        break;
      default:
        jj_la1[57] = jj_gen;
        if (jj_2_15(2)) {
          d = SignalDefinitionOrStub();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACTIVITY:
            d = ActivityDefinitionOrStub();
            break;
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassifierSignature(ClassifierDefinition d) throws ParseException {
  String n;
  QualifiedNameList nl;
    n = Name();
               d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  final public QualifiedNameList QualifiedNameList() throws ParseException {
  QualifiedNameList nl = new QualifiedNameList(this);
  QualifiedName n;
    n = QualifiedName();
                        nl.addName(n);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      n = QualifiedName();
                                  nl.addName(n);
    }
    this.provideEnd(nl);
        {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedNameList SpecializationClause() throws ParseException {
  QualifiedNameList nl;
    jj_consume_token(SPECIALIZES);
    nl = QualifiedNameList();
    {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/* CLASSES */
  final public ClassDefinition ClassDeclaration() throws ParseException {
  ClassDefinition d = new ClassDefinition(this);
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract(true);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    ClassifierSignature(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ClassDefinition ClassDefinition() throws ParseException {
  ClassDefinition d;
    d = ClassDeclaration();
    ClassBody(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ClassDefinition ClassDefinitionOrStub() throws ParseException {
  ClassDefinition d;
    d = ClassDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub(true);
      break;
    case LBRACE:
      ClassBody(d);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassBody(ClassDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case AT:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_18;
      }
      m = ClassMember();
                                 d.addOwnedMember(m); m.setNamespace(d);
    }
    jj_consume_token(RBRACE);
  }

  final public Member ClassMember() throws ParseException {
  Token t;
  String c = null;
  ArrayList<StereotypeAnnotation> sl;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    v = VisibilityIndicator();
    m = ClassMemberDefinition();
    if (c!=null) { m.addDocumentation(c); }
    m.setAnnotation(sl);
    m.setVisibility(v);
    this.provideEnd(m);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member ClassMemberDefinition() throws ParseException {
  Member m;
    if (jj_2_16(2)) {
      m = ClassifierDefinitionOrStub();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case IDENTIFIER:
        m = FeatureDefinitionOrStub();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ACTIVE CLASSES */
  final public ActiveClassDefinition ActiveClassDeclaration() throws ParseException {
  ActiveClassDefinition d = new ActiveClassDefinition(this);
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract(true);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    jj_consume_token(ACTIVE);
    jj_consume_token(CLASS);
    ClassifierSignature(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActiveClassDefinition ActiveClassDefinition() throws ParseException {
  ActiveClassDefinition d;
    d = ActiveClassDeclaration();
    ActiveClassBody(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActiveClassDefinition ActiveClassDefinitionOrStub() throws ParseException {
  ActiveClassDefinition d;
    d = ActiveClassDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub(true);
      break;
    case LBRACE:
      ActiveClassBody(d);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void ActiveClassBody(ActiveClassDefinition d) throws ParseException {
  Member m;
  ActivityDefinition a;
    jj_consume_token(LBRACE);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTATION_COMMENT:
      case ABSTRACT:
      case ACTIVE:
      case ACTIVITY:
      case CLASS:
      case ENUM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RECEIVE:
      case SIGNAL:
      case IDENTIFIER:
      case AT:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_19;
      }
      m = ActiveClassMember();
                                       d.addOwnedMember(m); m.setNamespace(d);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      a = BehaviorClause();
      d.setClassifierBehavior(a); d.addOwnedMember(a); a.setNamespace(d);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
  }

  final public ActivityDefinition BehaviorClause() throws ParseException {
  ActivityDefinition a = new ActivityDefinition(this);
  Block b;
  String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      b = Block();
                        a.setBody(b);
      break;
    case IDENTIFIER:
      n = Name();
                       a.setName(n); a.setIsStub(true);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          a.setVisibility("private");
          this.provideEnd(a);
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Member ActiveClassMember() throws ParseException {
  Token t;
  String c = null;
  ArrayList<StereotypeAnnotation> sl;
  String v = null;
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
                                  c = t.image;
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    sl = StereotypeAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      v = VisibilityIndicator();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    m = ActiveClassMemberDefinition();
    if (c != null) { m.addDocumentation(c); }
    m.setAnnotation(sl);
    m.setVisibility(v);
    this.provideEnd(m);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Member ActiveClassMemberDefinition() throws ParseException {
  Member m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case ACTIVE:
    case ACTIVITY:
    case CLASS:
    case ENUM:
    case SIGNAL:
    case IDENTIFIER:
      m = ClassMemberDefinition();
      break;
    default:
      jj_la1[73] = jj_gen;
      if (jj_2_17(3)) {
        m = ReceptionDefinition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* ENUMERATIONS */
  final public EnumerationDefinition EnumerationDeclaration() throws ParseException {
  EnumerationDefinition d = new EnumerationDefinition(this);
  String n;
  QualifiedNameList nl;
    jj_consume_token(ENUM);
    n = Name();
                      d.setName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIALIZES:
      nl = SpecializationClause();
                                  d.setSpecialization(nl);
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EnumerationDefinition EnumerationDefinition() throws ParseException {
  EnumerationDefinition d;
    d = EnumerationDeclaration();
    EnumerationBody(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EnumerationDefinition EnumerationDefinitionOrStub() throws ParseException {
  EnumerationDefinition d;
    d = EnumerationDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub(true);
      break;
    case LBRACE:
      EnumerationBody(d);
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void EnumerationBody(EnumerationDefinition d) throws ParseException {
  Member m;
    jj_consume_token(LBRACE);
    m = EnumerationLiteralName();
                                          d.addOwnedMember(m); m.setNamespace(d);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      m = EnumerationLiteralName();
                                           d.addOwnedMember(m); m.setNamespace(d);
    }
    jj_consume_token(RBRACE);
  }

  final public EnumerationLiteralName EnumerationLiteralName() throws ParseException {
  Token t = null;
  String n;
  EnumerationLiteralName e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    e = new EnumerationLiteralName(this);
        if (t != null) { e.addDocumentation(t.image); }
    n = Name();
    e.setName(n);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* SIGNALS */
  final public SignalDefinition SignalDeclaration() throws ParseException {
  SignalDefinition d = new SignalDefinition(this);
  String n;
  QualifiedNameList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                 d.setIsAbstract(true);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(SIGNAL);
    ClassifierSignature(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public SignalDefinition SignalDefinition() throws ParseException {
  SignalDefinition d;
    d = SignalDeclaration();
    jj_consume_token(LBRACE);
    jj_consume_token(RBRACE);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public SignalDefinition SignalDefinitionOrStub() throws ParseException {
  SignalDefinition d;
    d = SignalDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  d.setIsStub(true);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* ACTIVITIES */
  final public ActivityDefinition ActivityDeclaration() throws ParseException {
  ActivityDefinition d = new ActivityDefinition(this);
  String n;
    jj_consume_token(ACTIVITY);
    n = Name();
                          d.setName(n);
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
              FormalParameter p = new FormalParameter(this);
      TypePart(p);
                  p.setDirection("return"); p.setNamespace(d); d.addOwnedMember(p);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ActivityDefinition ActivityDefinition() throws ParseException {
  ActivityDefinition a;
  Block b;
    a = ActivityDeclaration();
    b = Block();
    a.setBody(b);
        this.provideEnd(a);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ActivityDefinition ActivityDefinitionOrStub() throws ParseException {
  ActivityDefinition a;
  Block b;
    a = ActivityDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                  a.setIsStub(true);
      break;
    case LBRACE:
      b = Block();
                  a.setBody(b);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(a);
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void FormalParameters(NamespaceDefinition d) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
    case IN:
    case INOUT:
    case OUT:
      FormalParameterList(d);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FormalParameterList(NamespaceDefinition d) throws ParseException {
  FormalParameter p;
    p = FormalParameter();
                          d.addOwnedMember(p); p.setNamespace(d);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      p = FormalParameter();
                                    d.addOwnedMember(p); p.setNamespace(d);
    }
  }

  final public FormalParameter FormalParameter() throws ParseException {
  Token t = null;
  String d;
  String n;
  FormalParameter p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCUMENTATION_COMMENT:
      t = jj_consume_token(DOCUMENTATION_COMMENT);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    p = new FormalParameter(this);
        if (t != null)  { p.addDocumentation(t.image); }
    d = ParameterDirection();
                             p.setDirection(d);
    n = Name();
               p.setName(n);
    jj_consume_token(COLON);
    TypePart(p);
    this.provideEnd(p);
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public String ParameterDirection() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      t = jj_consume_token(IN);
      break;
    case OUT:
      t = jj_consume_token(OUT);
      break;
    case INOUT:
      t = jj_consume_token(INOUT);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* FEATURES */
  final public Member FeatureDefinitionOrStub() throws ParseException {
  Member m;
    if (jj_2_18(2)) {
      m = AttributeDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case IDENTIFIER:
        m = OperationDefinitionOrStub();
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* PROPERTIES */
  final public PropertyDefinition PropertyDefinition() throws ParseException {
    PropertyDefinition d;
    d = PropertyDeclaration();
    jj_consume_token(SEMICOLON);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDefinition AttributeDefinition() throws ParseException {
  PropertyDefinition d;
  Expression e;
    d = PropertyDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      e = AttributeInitializer();
                                 d.setInitializer(e);
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AttributeInitializer() throws ParseException {
  Expression e;
    jj_consume_token(ASSIGN);
    e = Expression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDefinition PropertyDeclaration() throws ParseException {
  PropertyDefinition d = new PropertyDefinition(this);
  String n;
    n = Name();
               d.setName(n);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPOSE:
      jj_consume_token(COMPOSE);
                        d.setIsComposite(true);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    TypePart(d);
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void TypePart(TypedElementDefinition d) throws ParseException {
  QualifiedName t;
  Token tc;
    t = TypeName();
                   d.setTypeName(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      Multiplicity(d);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
  }

  final public QualifiedName TypeName() throws ParseException {
  QualifiedName n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = QualifiedName();
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void Multiplicity(TypedElementDefinition d) throws ParseException {
    jj_consume_token(LBRACKET);
    MultiplicityRange(d);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEQUENCE:
      jj_consume_token(SEQUENCE);
                 d.setIsNonunique(true); d.setIsOrdered(true);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
  }

  final public void MultiplicityRange(TypedElementDefinition d) throws ParseException {
  Token t;
  String n;
    if (jj_2_19(2)) {
      t = jj_consume_token(DECIMAL_LITERAL);
      jj_consume_token(DOUBLE_DOT);
                                                      d.setLowerBound(t.image);
    } else {
      ;
    }
    n = UnlimitedNaturalLiteral();
                                  d.setUpperBound(n);
  }

  final public String UnlimitedNaturalLiteral() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
      break;
    case STAR:
      t = jj_consume_token(STAR);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/* OPERATIONS */
  final public OperationDefinition OperationDeclaration() throws ParseException {
  OperationDefinition d = new OperationDefinition(this);
  String n;
  QualifiedNameList nl;
    n = Name();
               d.setName(n);
    FormalParameters(d);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
              FormalParameter p = new FormalParameter(this);
      TypePart(p);
                  p.setDirection("return"); p.setNamespace(d); d.addOwnedMember(p);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    this.provideEnd(d);
        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public OperationDefinition OperationDefinitionOrStub() throws ParseException {
  OperationDefinition o;
  Block b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      o = OperationDeclaration();
                                            o.setIsAbstract(true);
      jj_consume_token(SEMICOLON);
      break;
    case IDENTIFIER:
      o = OperationDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
                    o.setIsStub(true);
        break;
      case LBRACE:
        b = Block();
                                                         o.setBody(b);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    this.provideEnd(o);
        {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

//QualifiedNameList RedefinitionClause():
//{
//  QualifiedNameList nl;
//}
//{
//  <REDEFINES> nl = QualifiedNameList()
//  
//  { return nl; }
//}

/* RECEPTIONS */
  final public ReceptionDefinition ReceptionDefinition() throws ParseException {
  QualifiedName n;
  ReceptionDefinition d = new ReceptionDefinition(this);
    jj_consume_token(RECEIVE);
    n = QualifiedName();
    jj_consume_token(SEMICOLON);
    d.setSignalName(n);
    List<NameBinding> nameBindings = n.getNameBinding();
    d.setName(nameBindings.get(nameBindings.size()-1).getName());
    this.provideEnd(d);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3R_78() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(RECEIVE)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(ACTIVITY)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    if (jj_scan_token(DOUBLE_DOT)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_scan_token(ACTIVE)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ANY)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOUBLE_COLON)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BaseParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44400040,0x400000,0x44000040,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x400000,0x0,0x0,0x0,0x1a000000,0x0,0x0,0x400000,0x400000,0x1a000000,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x2000000,0x0,0x400000,0x400000,0x2000000,0x2000000,0x0,0x1a400000,0x0,0x0,0x400000,0x0,0x1a000000,0x0,0x0,0x0,0x400000,0x2000000,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x2000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x5000000,0x5000000,0x0,0x0,0x0,0x0,0x0,0x5000000,0x0,0x0,0x4000000,0x0,0x5000000,0x5000000,0x5000000,0x5000000,0x210000,0x5000000,0x5000000,0x0,0x0,0x5000000,0x0,0x0,0x0,0x0,0x0,0x0,0x210000,0x210000,0x0,0x0,0x0,0x0,0x0,0x5024800,0x0,0x5024800,0x0,0x1000,0x0,0x0,0x5000000,0x800000,0x80000000,0x0,0x0,0x0,0x80000000,0x40002008,0x80000000,0x0,0x80000000,0x0,0x40002008,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80002008,0x800,0x0,0x0,0x80000000,0x2008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20180000,0x0,0x0,0x20180000,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x205c900,0x1c900,0x2a000000,0x20000000,0x20000000,0x1c000,0x2000000,0x205c900,0x0,0x0,0x0,0x20000000,0x205c900,0x205c900,0x205c900,0x201c900,0x2e000000,0x205c900,0x201c900,0x0,0x0,0x205c900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a05e920,0x0,0x8a05e920,0x0,0x0,0x0,0x0,0x205c900,0x0,0x2,0x0,0x0,0x0,0x2,0x200,0x3,0x88000000,0x2,0x0,0x200,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x88000000,0x3,0x0,0x40000,0x0,0x88000000,0x40207,0x0,0x8040000,0x0,0x3,0x40200,0x80,0x88000000,0x0,0x0,0x0,0x88000000,0x0,0x88000000,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x20000000,0x40000,0x40,0x8000,0x0,0x88000000,0x40000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x400000,0x400000,0x0,0x2,0x2,0x400000,0x0,0x700400,0x1,0x2,0x0,0x0,0x700400,0x700400,0x400000,0x700400,0x1ffd382,0x700400,0x400000,0x300400,0x300000,0x400400,0x1c00000,0x1c00000,0x300000,0x300000,0x18300,0x18300,0x0,0x0,0x24000,0x24000,0x80000,0x40000,0x1000,0x700400,0x0,0x700400,0x2000,0x0,0x1,0x4,0x700400,0x0,0x0,0x0,0x2000,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8,0x0,0x0,0x1,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x400000,0x8,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BaseParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BaseParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BaseParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BaseParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BaseParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BaseParserImpl(BaseParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BaseParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[121];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 121; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
