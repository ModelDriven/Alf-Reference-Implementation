private import Alf::Library::PrimitiveBehaviors::StringFunctions::*;
private import DomainDataTypes::*;

package Utility {

  public activity SendMessage(
    in title: String,
    in message: String) {
    WriteLine(title);
    WriteLine(message);
    WriteLine("Press Return to continue.");
    ReadLine();
  }

  public activity BlankToNull(in string: String): String[0..1] {
    return string == ""? null: string;
  }

  public activity NullToString(in string: String[0..1]): String {
    return string == null? "": string;
  }
  
  public activity Ask(in query: String): Boolean {
    Write(query + " (y or n)?");
    answer = ReadLine();
    while (answer !="y" && answer != "n") {
      Write("Please respond y or n:");
      answer = ReadLine();
    }
    return answer == "y";
  }
  
  public activity GetString(in prompt: String[0..1]): String {
    Write(prompt);
    s = ReadLine();
    return s == ""? null: s;
  }
  
  public activity GetCustomerEmail(): InternetEmailAddress[0..1] {
    do {
      Write("Enter your email address:");
      response = ReadLine();
      if (response == "") {
        return null;
      } else if (IsValidEmail(response)) {
        return response;
      } else {
        WriteLine("That is not a valid email address.\n");
      }
    } while (true);
  }
  
  public activity IsValidEmail(in email: String): Boolean {
    // Check that the given address contains exactly one "@".
    foundOne = false;
    for (i in 1..Size(email)) {
      if (Substring(email, i, i) == "@") {
        if (foundOne || i == 1 || i == Size(email)) {
          return false;
        }
        foundOne = true;
      }
    }
    return foundOne;
  }
  
  public activity GetQuantity(
    in message: String, 
    in minimum: Count): Count[0..1] {
    do {
      Write(message);
      response = ReadLine();
      if (response == "") {
        return null;
      }
      quantity = IntegerFunctions::ToInteger(response);
      if (quantity->isEmpty() || quantity < minimum) {
        WriteLine("That is not a valid quantity.\n");
      } else {        
        return quantity;
      }
    } while (true);
  }
  
  public activity GetPersonalName(in prompt: String[0..1]): PersonalName {
    WriteLine(prompt);
    Write("  Title:"); title = BlankToNull(ReadLine());
    Write("  First name:"); firstName = ReadLine();
    Write("  Middle name:"); middleName = BlankToNull(ReadLine());
    Write("  Last name:"); lastName = ReadLine();
    Write("  Suffix:"); suffix = BlankToNull(ReadLine());
    return new PersonalName(title, firstName, middleName, lastName, suffix);
  }
  
  public activity GetMailingAddress(in prompt: String[0..1]): MailingAddress {
    WriteLine(prompt);
    Write("  Address Line 1:"); addressLine1 = ReadLine();
    Write("  Address Line 2:"); addressLine2 = BlankToNull(ReadLine());
    Write("  City:"); city = BlankToNull(ReadLine());
    Write("  State Or Province:"); stateOrProvince = BlankToNull(ReadLine());
    Write("  Postal Code:"); postalCode = BlankToNull(ReadLine());
    Write("  Country:"); country = BlankToNull(ReadLine());
    return new MailingAddress(
      addressLine1, addressLine2, city, stateOrProvince, country, postalCode);
  }

  public activity GetMonthYear(in prompt: String[0..1]): MonthYear[0..1] {
    WriteLine(prompt);
    do {
      Write("  Month:");
      response = ReadLine();
      if (response->isEmpty()) {
        return null;
      }
      month = IntegerFunctions::ToInteger(response);
      if (month->isEmpty() || month < 1 || month > 12) {
        WriteLine("  That is not a valid month.\n");
      }
    } while (month->isEmpty() || month < 1 || month > 12);
    
    do {
      Write("  Year:");
      response = ReadLine();
      if (response->isEmpty()) {
        return null;
      }
      year = IntegerFunctions::ToInteger(response);
      if (year->isEmpty() || year < 2000 || year > 2099) {
        WriteLine("  That is not a valid year.\n");
      }
    } while (year->isEmpty() || year < 2000 || year > 2099);
    
    return new MonthYear(year, month);
  }
  
  public activity Write(in data: any) {
    StandardOutputChannel.allInstances().write(data);
  }
  
  public activity WriteWrapped(in text: String, in length: Integer) {
    l = +0;
    i = +1;
    GetWord(text, i, word);
    while (word->size() > 0) {
      if (word->at(1) == "\n") {
        WriteLine("\n");
        l = 0;
      } else {
        l = l + word->size();
        if (l > length) {
          WriteLine("");
          l = word->size();
        }
        WriteWord(word);
        if (l < length) {
          Write(" ");
          l++;
        }
      }
      GetWord(text, i, word);
    }
    WriteLine("");
  }
  
  private activity GetWord(
    in text: String, 
    inout i: Integer,
    out word: String[*]) {
    word = null;
    n = Size(text);
    if (i <= n) {
      do {
        char = Substring(text, i, i);
        i++;
      } while (i <= n && char == " ");
      if (char == "\n") {
        word = "\n";
      } else {
        while (char != " " && char != "\n") {
          word->add(char);
          if (i > n) {
            break;
          }
          char = Substring(text, i, i);
          i++;
        }
        if (char == "\n") {
          i--;
        }
      }
    }
  }
  
  private activity WriteWord(in word: String[*]) {
    for (char in word) {
      Write(char);
    }
  }
  
}