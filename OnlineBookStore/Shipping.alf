private import DomainDataTypes::*;
private import Ordering::Order;
private import Ordering::ProductSelection;

/**
The Shipping subsystem contains those classes that deal with the work of packing
and shipping orders to customers.
*/
package Shipping {

  public active class Shipment;
  public class ShipmentItem;
  public class ShippingCompany;
  
  public active class Warehouse;
  
  /**
  In the bookstore, the warehouse makes a policy of hiring clerks who can take
  on several roles, so that the shipping clerk is really just one kind of a more
  general warehouse clerk. Sometimes a warehouse clerk may be processing
  shipments, at other times the same clerk may be assigned to restock prodcut,
  and at still other times the clerk may be off duty.
  */
  public abstract class WarehouseClerk;
  
  // Generalization Set R27 {disjoint, complete}
  public active class ShippingClerk specializes WarehouseClerk;
  public class StockClerk specializes WarehouseClerk;
  public class OffDutyClerk specializes WarehouseClerk;
  
  /**
  When an order's payment is approved, a Shipment is created and associated to
  the Order. All of the selections on an order are shipped together in one
  shipment.
  */
  public assoc R6 {
    public 'delivers contents of': Order[1];
    public 'is sent to customer as': Shipment[0..1];
  }

  /**
  When an order is paid for, the selections in the order are shipped to the
  customer. This association identifies which selections are shipped in which
  shipment. A shipment must contain at least one selection.
  */
  public assoc R9a {
    public 'is included in': Shipment[1];
    public includes: ShipmentItem[1..*];
  }
  
  /**
  Some selections are not shipped from the bookstore because they are selections
  of special-order products shipped directly from the publisher. It is even
  possible for a paid order to have no shipment.
  
  Future versions of this system will also support partial shipments in which
  items are shipped only when there is sufficient stock on hand. In that
  situation, we will need to identify which shipments contain which selections.
  This association will capture this information.
  */
  public assoc R9b {
    public includes: ProductSelection[1];
    public 'included as': ShipmentItem[0..*];
  }
  
  /**
  Each shipment is sent to the customer via a delivery company. Ordinarily all
  shipments are sent using the same delivery company; however, under special
  circumstances another company may deliver the shipment.
  */
  public assoc R21 {
    public 'is delivered by': ShippingCompany[1];
    public delivers: Shipment[0..*];
  }
  
  /**
  This association captures the history of which clerk packed which shipment.
  The bookstore needs to be able to track the work actually done by each clerk
  and to identify which clerk packed which shipment. Although clerks are
  generally very careful, they do make mistakes.
  */
  public assoc R22 {
    public 'was packed by': WarehouseClerk[0..1];
    public packed: Shipment[0..*];
  }
  
  /**
  This association captures a shipping clerk's current assignment. When a 
  shipping clark is assigned to pack and ship a shipment, the clerk is linked to
  the shipment. When the clerk completes the job, this link goes away. However,
  the history of all jobs packed by the clerk is captured in association R22.
  */
  public assoc R23 {
    public 'is currently being packed by': ShippingClerk[0..1];
    public 'is currently packing': Shipment[0..1];
  }
  
  /**
  Each shipment is assigned to be packed at a warehouse based on two criteria:
  (1) whether the warehouse has the product selections in stock and (2) which
  warehouse is closest to the customer in terms of shipping costs and delivery
  time. An outside logistics system is responsible for computing the shipping
  time and costs.
  */
  public assoc R24 {
    public 'is origin point for': Shipment[0..*];
    public 'is packed and shipped at': Warehouse[1];
  }
  
  /**
  Each clerk works in one warehouse.
  */
  public assoc R25 {
    public employs: WarehouseClerk[1..*];
    public 'works in': Warehouse[1];
  }
  
}