namespace OnlineBookstoreUI;

private import Ordering::ShoppingCart;

active class PaymentController specializes Controller {

  public cardholderName: PersonalName;
  public accountNumber: BankCardAccountNumber[0..1];
  public cardExpirationDate: MonthYear[0..1];
  public billingAddress: MailingAddress;

  public previous: CheckOutController;
  
  @Create
  public PaymentController(in previous: CheckOutController) {
    this.cardholderName = previous.customerName;
    this.billingAddress = previous.shippingAddress;
    this.previous = previous;
  }
  
  public receive signal Update {
    public cardholderName: PersonalName[0..1];
    public accountNumber: BankCardAccountNumber[0..1];
    public cardExpirationDate: MonthYear[0..1];
    public billingAddress: MailingAddress[0..1];
  }
  
  public receive signal PlaceOrder {
  }
  
  public receive signal Back {
  }
  
  public receive signal ShowShoppingCart {
  }
  
  public receive signal Home {
  }
      
  private isValid(): Boolean {
    if (this.cardholderName.firstName == "" || this.cardholderName.lastName == "") {
      WriteLine("*** The cardholder first and last names are both required. ***");
    } else if (this.accountNumber->isEmpty()) {
      WriteLine("*** A bank card account number is required. ***");
    } else if (this.cardExpirationDate->isEmpty()) {
      WriteLine("*** The bank card expiration date is required. ***");
    } else if (this.billingAddress.addressLine1 == "") {
      WriteLine("*** The billing address must include a first address line. ***");
    } else {
      return true;
    }
    return false;
  }
  
  private completeCheckOut() {
    cart = ShoppingCart->select s (s.isActive)[1];
    cart.CheckOut(
      accountNumber => this.accountNumber,
      billingAddress => this.billingAddress,
      cardExpirationDate => this.cardExpirationDate,
      cardholderName => this.cardholderName,
      customerEmail => this.previous.customerEmail,
      customerName => this.previous.customerName,
      customerPhone => this.previous.customerPhone,
      shippingAddress => this.previous.shippingAddress
    );
  }  
  
} do {

  accept (Display);

  continue = true;
  do {
    new PaymentView(this);
  
    accept (event: Update) {
      WriteLine("Update");
      if (event.cardholderName->notEmpty()) {
        this.cardholderName = event.cardholderName;
      }
      if (event.accountNumber->notEmpty()) {
        this.accountNumber = event.accountNumber;
      }
      if (event.cardExpirationDate->notEmpty()) {
        this.cardExpirationDate = event.cardExpirationDate;
      }
      if (event.billingAddress->notEmpty()) {
        this.billingAddress = event.billingAddress;
      }
    } or accept (PlaceOrder) {
      if (this.isValid()) {
        this.completeCheckOut();
        new HomeController().Display();
        continue = false;
      }
    } or accept (Back) {
      new CheckOutController::continue(this.previous).Display();
      continue = false;
    } or accept (ShowShoppingCart) {
      new ShoppingCartController().Display();
      continue = false;
    } or accept (Home) {
      new HomeController().Display();
      continue = false;
    } or accept (Exit) {
      continue = false;
    }
    
    this.view.destroy();
  } while (continue);
  
}