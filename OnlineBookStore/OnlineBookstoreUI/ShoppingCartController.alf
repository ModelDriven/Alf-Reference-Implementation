namespace OnlineBookstoreUI;

private import Ordering::*;

active class ShoppingCartController specializes Controller {

  public cart: ShoppingCart;

  @Create
  public ShoppingCartController() {
    this.cart = ShoppingCart->select s (s.isActive)[1];
  }
  
  @Create
  public addProduct(
    in productID: UniversalProductCode,
    in quantity: Count
  ) {
    this();
    if (this.cart->isEmpty()) {
      this.cart = new ShoppingCart();
      this.cart.StartCart(productID, quantity);
    } else {
      this.cart.AddSelection(productID, quantity);
    }
  }
  
  public receive signal Home {
  }
  
  public receive signal Cancel {
  }
  
  public receive signal CheckOut {
    public customerEmail: String;
  }
  
  public receive signal ShowShoppingCart {
  }
  
  public receive signal ChangeQuantity {
    public choice: Integer;
    public quantity: Count;
  }
  
  private displayView() {
    if (this.cart->isEmpty()) {
      new EmptyCartView(this);
    } else {
      new ShoppingCartView(this);
    }
  }
  
} do {

  accept (Display);
  
  continue = true;
  do {
    this.displayView();
    
    accept (Exit) {
      continue = false;
    } or accept (Home) {
      new HomeController().Display();
      continue = false;
    } or accept (event: CheckOut) {
      new CheckOutController(event.customerEmail).Display();
      continue = false;
    } or accept (ShowShoppingCart) {
    } or accept (Cancel) {
      this.cart.Cancel();
    } or accept (event: ChangeQuantity) {
      this.cart.'includes selection'->at(event.choice).
        ChangeQuantity(event.quantity);
    }
    
    if (!this.cart.isActive) {
      this.cart = null;
    }
    
    this.view.destroy();
    
  } while (continue);
}