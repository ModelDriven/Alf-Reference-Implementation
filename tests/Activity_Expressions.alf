activity ExpressionStatements() {

  1234;
  0;
  0b1010111000010000;
  0B0100_1010_0101_1011;
  0xAE10;
  0X4a_5b;
  057410;
  0_045_133;

  customer;
  Ordering::Order::customer;
  Ordering.Order.customer;
  A::B<C::D>::e;
  A.B<C.D>.e;
  Set<Integer>;
  Map<K=>String, V=>Entry>;
  Map<String,Entry>.KeySet;
  List< List<String> >;
  CollectionClasses::Set<Integer>::add;

  currentOffer = this.offers[1];
  monitor.SignalAlarm(sensorId);
  this.interest = this.principal * this.rate * period;
  
  poleValue.im;
  this.node;
  members.name;
  jack.house;
  
  (something);
  (this.node);
  
  Owns::house(owner => jack);
  Roster::player(team=>t, season=>y);
  Roster.player(t,y);
  Owns::house(jack);

  A(1, true);
  A(x=>1, y=>true);
  A(y=>true, x=>1);
  A(x=>1);
  A(1, null);
  ComputeInterest(amount);
  Start(monitor => systemMonitor);
  including<Integer>(Integer[]{1,2,3}, 4);
  
  super.run();
  super.initialize(startValue);
  super.Person::setName(name);
  
  new Employee(id, name);
  new Employee::transferred(employeeInfo);
  new Set<Integer>(Integer[]{1,2,3});
  
  employee.destroy();
  sensor.destroy(recoveryLog);
  
  Owns.createLink(jack, newHouse);
  Owns.createLink(owner=>jack, house=>newHouse);
  Owns.createLink(owner=>jack, house[1]=>newHouse);
  Owns.destroyLink(owner=>jack, house=>newHouse);
  Owns.clearAssoc(jack);
  Owns.createLink(jack = oldHouse.owner, newHouse);
  
  String[]{"apple","orange","strawberry"};
  new String[]{"apple","orange","strawberry",};
  Integer[]{1..6+4};
  Integer[]{1, Integer[]{2,3}, 4};
  Integer[]{1, 2, 3, 4};
  Integer[]{1..6+4};
  Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, };
  Set<Integer>{1, 3, 45, 2, 3};
  new List< List<String> >{{"apple","orange"},{"strawberry","raspberry"}};
  null;
  
  this.getTypes()[1];
  a = Integer[]{10, 20, 30, 40};

  selectedCustomers->notEmpty();
  memberList->includes(possibleMember);
  memberList->including(newMember);
  products->removeAll(rejects);
  a->including(x);
  including(a,x);
  
  Customer->size();
  Customer.allInstances()->size();
  size(Customer.allInstances());
  
  subtotals->reduce '+';
  rotationMatrices->reduce ordered MatMult;
  Integer[]{1, 2, 3} -> reduce '+';
  Matrix[]{A, B, C} -> reduce ordered MatMult;

  c->select x (x>1);
  Customer->select c (c.name == customerName);
  Customer.allInstances()->select c (c.name == customerName);

  employees->select e (e.age>50);
  employees->reject e (e.isMarried);
  employees->collect e (e.birthDate);
  collection -> collect x (x.name);
  processSteps->iterate step (step.execute());
  employees->forAll e (e.age<=65);
  employees->exists e (e.firstName=="Jack");
  employees->one e (e.title=="President");
  employees->isUnique e (e.employeeIdentificationNumber);

  count++;
  size--;
  this.x++;
  this.total[i]--;
  total[i]++;
  -(a).b++;

  ++count;
  --this.numberWaiting[queueIndex];
  --numberWaiting[queueIndex];

  !isActive;
  !this.running;
  !member.isActive;

  ~registerContext;
  ~memory.getByte(address);
  
  +1234;
  -42;
  +(a*b);
  -absoluteValue;
  
  $this.monitor.getActiveSensor().getReading();
  
  (fUML::Syntax::Activity)this.getTypes();
  (Person)invoice.payingParty;
  (any)this;
  (Integer)any[]{1,"banana",2};

  amount * interestRate;
  duration / timeStep;
  length % unit;
  initialPosition + positionChange;
  basePrice - discount;
  
  bitmask << wordLength;
  wordContent >> offset;
  (value&0xF0) >>> 8;
  
  sensorReading > threshold;
  size < maxSize;
  size >= minSize;
  count <= limit;
  3 < * ;
  
  (UnlimitedNatural)(+3) < *;
  (UnlimitedNatural)* * 1;
  
  action instanceof ActionActivation;
  'signal' hastype SignalArrival;
  
  errorCount==0;
  nextRecord!=endRecord;
  list.next==null;
  
  sensorOff | sensorError;
  i > min & i < max | unlimited;
  bit[i]^mask[i];
  bitString ^ mask;
  registerContent & 0x00FF;

  index > 0 && value[index] < limit;
  index == 0 || value[index] >= limit;
  isNormalOps? readPrimarySensor(): readBackupSensor();
  
  customer = new Customer();                // Local name assignment
  customer[i] = new Customer();             // Indexed local name assignment
  reply = this.createReply(request,result); // Output parameter assignment
  customer.email = checkout.customerEmail;  // Attribute assignment
  customer.address[i] = newAddress;         // Indexed attribute assignment
  x += 4;                                   // Compound assignment
  filename += ".doc";                       // Compound assignment
  WriteLine(a = 3);
  a += 1;
  b -= 1;
  c *= 1;
  d %= 1;
  e /= 1;
  f &= true;
  g |= true;
  h <<= 1;
  i >>= 1;
  j >>>= 1;

}