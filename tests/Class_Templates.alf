class Templates {

    abstract class Collection<T> {
        @Create protected Collection(in seq: T[0..*] sequence) {
            this.setContent(seq);
        }

        protected abstract setContent (in seq: T[0..*] sequence);
  
        public add (in element: T) { 
            this.setContent(this.toSequence()->including(element));
        }

        public abstract toSequence (): T[0..*] sequence;
    }

    class List<T> specializes Collection<T> {
    
        private content: T[0..*] sequence;

        @Create public List (in seq: T[0..*] sequence) { 
            super(seq);
        }

        private setContent(in seq: T[0..*] sequence) {
            this.content = seq;
        }

        public toSequence(): T[0..*] sequence {
            return this.content;
        }
    }

    public test() {
        new List< List<String> >();
    }
}